<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>highfish920的博客</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-11T01:34:37.379Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>highfish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux--MapReduce经典案例--数据去重</title>
    <link href="http://yoursite.com/2020/10/11/linux8/"/>
    <id>http://yoursite.com/2020/10/11/linux8/</id>
    <published>2020-10-11T01:34:02.042Z</published>
    <updated>2020-10-11T01:34:37.379Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MapReduce经典案例–数据去重"><a href="#MapReduce经典案例–数据去重" class="headerlink" title="MapReduce经典案例–数据去重"></a>MapReduce经典案例–数据去重</h4><a id="more"></a><p>项目完整代码以及两个test文件以及maven环境所需jar包：<br>链接：<a href="https://pan.baidu.com/s/10MEBxCfy_ShTaCf_RhGzMw">https://pan.baidu.com/s/10MEBxCfy_ShTaCf_RhGzMw</a><br>提取码：1314<br><img src="https://img-blog.csdnimg.cn/20201011093239110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>首先要在windows上搭建开发环境 见<a href="https://blog.csdn.net/weixin_42693712/article/details/108796708">https://blog.csdn.net/weixin_42693712/article/details/108796708</a></li><li>打开本机eclipse，创建一个maven工程</li></ol><ul><li>选择file-&gt;new-&gt;maven project创建maven工程，选择create a simple project选项，点击next GroupId写com.itcast,Artifact写HadoopDemo，其他默认就好</li><li>编辑pom.xml添加依赖，依赖添加成功后，在maven Dependenciens下面自动会有jar包<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.itcast&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;HadoopDemo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;jdk.tools&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jdk.tools&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.8&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">            &lt;systemPath&gt;$&#123;JAVA_HOME&#125;/lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li>在src下建立com.itcast.hdfsdemo包，建立HDFS_CRUD类以初始化客户端对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.hdfsdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.tools.JavaFileManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.BlockLocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.LocatedFileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.RemoteIterator;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> com.sun.javadoc.DocErrorReporter;</span><br><span class="line"><span class="keyword">import</span> com.sun.javadoc.ProgramElementDoc;</span><br><span class="line"><span class="keyword">import</span> com.sun.javadoc.SourcePosition;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.doclets.internal.toolkit.Content;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.doclets.internal.toolkit.WriterFactory;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.doclets.internal.toolkit.util.MessageRetriever;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFS_CRUD</span> </span>&#123;</span><br><span class="line">    FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//要访问hdfs的url</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration(); </span><br><span class="line">        <span class="comment">//执行hdfs</span></span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>,<span class="string">&quot;hdfs://gaoyu:9000&quot;</span>);</span><br><span class="line">        <span class="comment">//进行客户端设置</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">//静态方法获取客户端对象</span></span><br><span class="line">        fs = FileSystem.get(conf);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddFileToHdfs</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//将上传的文件保存在本地路劲</span></span><br><span class="line">        Path src = <span class="keyword">new</span> Path(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//要上川岛hdfs目标路劲</span></span><br><span class="line">        Path dst = <span class="keyword">new</span> Path(<span class="string">&quot;/testFile&quot;</span>);</span><br><span class="line">        <span class="comment">//上传文件方法</span></span><br><span class="line">        fs.copyFromLocalFile(src, dst);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDownloadFileTolocal</span><span class="params">()</span> <span class="keyword">throws</span> IllegalMonitorStateException,IOException</span>&#123;</span><br><span class="line">        <span class="comment">//下载文件</span></span><br><span class="line">        fs.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">&quot;/testFile&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;D://&quot;</span>));</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建删除重命名文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMkdirAndDeleteAndRename</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建目录</span></span><br><span class="line">        fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">&quot;/a/b/c&quot;</span>));</span><br><span class="line">        fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">&quot;/a2/b2/c2&quot;</span>));</span><br><span class="line">        <span class="comment">//重命名文件或文件夹</span></span><br><span class="line">        fs.rename(<span class="keyword">new</span> Path(<span class="string">&quot;/a&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;/a3&quot;</span>));</span><br><span class="line">        <span class="comment">//删除文件夹</span></span><br><span class="line">        fs.delete(<span class="keyword">new</span> Path(<span class="string">&quot;/a2&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListFiles</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,IllegalArgumentException,IOException</span>&#123;</span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        RemoteIterator&lt;LocatedFileStatus&gt;listFiles = fs.listFiles(<span class="keyword">new</span> Path(<span class="string">&quot;/&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">while</span>(listFiles.hasNext()) &#123;</span><br><span class="line">            LocatedFileStatus fileStatus = listFiles.next();</span><br><span class="line">            <span class="comment">//打印当前文件名</span></span><br><span class="line">            System.out.println(fileStatus.getPath().getName());</span><br><span class="line">            <span class="comment">//打印当前文件块大小</span></span><br><span class="line">            System.out.println(fileStatus.getBlockSize());</span><br><span class="line">            <span class="comment">//打印当前文件权限</span></span><br><span class="line">            System.out.println(fileStatus.getPermission());</span><br><span class="line">            <span class="comment">//打印当前文件内容长度</span></span><br><span class="line">            System.out.println(fileStatus.getLen());</span><br><span class="line">            <span class="comment">//获取文件块信息</span></span><br><span class="line">            BlockLocation[] blockLocations = fileStatus.getBlockLocations();</span><br><span class="line">            <span class="keyword">for</span>(BlockLocation b1 : blockLocations) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;block-length:&quot;</span>+b1.getLength()+<span class="string">&quot;--&quot;</span>+<span class="string">&quot;block-offset:&quot;</span>+b1.getOffset());</span><br><span class="line">                String[] hosts = b1.getHosts();</span><br><span class="line">                <span class="keyword">for</span>(String host : hosts) &#123;</span><br><span class="line">                    System.out.println(host);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------分割线--------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><em>注意：</em></strong><br>gaoyu:9000s是自己设置的在core-site.xml中，自行查看<br><img src="https://img-blog.csdnimg.cn/2020101109084582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中output在本地目录下不用创建，会自动生成，input目录需要自行创建在相应路劲下，我的是在D:\Dedup\input目录下，和代码中位置需要一直一致<img src="https://img-blog.csdnimg.cn/20201011091125870.png#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201011090713887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>创建cn.itcast.mr.dedup包，在该路径下编写自定义Mapper类DedupMapper，自定义Reducer类DedupReducer以及运行主类DedupDriver</li></ul><p>DedupMapper 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mr.dedup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DedupMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Text field = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="comment">// &lt;0,2018-3-3 c&gt;&lt;11,2018-3-4 d&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        field = value;</span><br><span class="line">        context.write(field, NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;2018-3-3 c,null&gt; &lt;2018-3-4 d,null&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DedupReducer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mr.dedup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DedupReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">NullWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// &lt;2018-3-3 c,null&gt; &lt;2018-3-4 d,null&gt;&lt;2018-3-4 d,null&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;NullWritable&gt; values, Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        context.write(key, NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DedupRunner类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mr.dedup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DedupRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">        job.setJarByClass(DedupRunner.class);</span><br><span class="line">        job.setMapperClass(DedupMapper.class);</span><br><span class="line">        job.setReducerClass(DedupReducer.class);</span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line"></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(<span class="string">&quot;D:\\Dedup\\input&quot;</span>));</span><br><span class="line">        <span class="comment">// 指定处理完成之后的结果所保存的位置</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">&quot;D:\\Dedup\\output&quot;</span>));</span><br><span class="line"></span><br><span class="line">        job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代码编写完毕后，打开虚拟机开启所有服务进程<code>start-all.sh</code></li><li>然后运行主类DedupRunner，在output目录下查看结果<img src="https://img-blog.csdnimg.cn/20201011091709803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看文件part-r-00000发现已经成功<img src="https://img-blog.csdnimg.cn/20201011091828934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;MapReduce经典案例–数据去重&quot;&gt;&lt;a href=&quot;#MapReduce经典案例–数据去重&quot; class=&quot;headerlink&quot; title=&quot;MapReduce经典案例–数据去重&quot;&gt;&lt;/a&gt;MapReduce经典案例–数据去重&lt;/h4&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse&amp;IDEA中Maven和Git快速配置及使用</title>
    <link href="http://yoursite.com/2020/10/03/Eclipse&amp;IDEA%E4%B8%ADMaven%E5%92%8CGit%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/10/03/Eclipse&amp;IDEA%E4%B8%ADMaven%E5%92%8CGit%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-03T15:13:02.428Z</published>
    <updated>2020-10-03T15:15:13.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Eclipse-amp-IDEA中Maven和Git快速配置及使用"><a href="#Eclipse-amp-IDEA中Maven和Git快速配置及使用" class="headerlink" title="Eclipse&amp;IDEA中Maven和Git快速配置及使用"></a>Eclipse&amp;IDEA中Maven和Git快速配置及使用</h4><a id="more"></a><p>见资料：<br>链接：<a href="https://pan.baidu.com/s/1kzd4_sKwkq9sRTs45HE91Q">https://pan.baidu.com/s/1kzd4_sKwkq9sRTs45HE91Q</a><br>提取码：1314 </p><p>视频：<a href="https://www.bilibili.com/video/BV1Te411W7N6?p=1">https://www.bilibili.com/video/BV1Te411W7N6?p=1</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Eclipse-amp-IDEA中Maven和Git快速配置及使用&quot;&gt;&lt;a href=&quot;#Eclipse-amp-IDEA中Maven和Git快速配置及使用&quot; class=&quot;headerlink&quot; title=&quot;Eclipse&amp;amp;IDEA中Maven和Git快速配置及使用&quot;&gt;&lt;/a&gt;Eclipse&amp;amp;IDEA中Maven和Git快速配置及使用&lt;/h4&gt;</summary>
    
    
    
    <category term="maven" scheme="http://yoursite.com/categories/maven/"/>
    
    
    <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>ECharts数据可视化项目</title>
    <link href="http://yoursite.com/2020/09/26/echarts/"/>
    <id>http://yoursite.com/2020/09/26/echarts/</id>
    <published>2020-09-26T14:05:14.241Z</published>
    <updated>2020-09-26T14:05:52.511Z</updated>
    
    <content type="html"><![CDATA[<h4 id="学习视频：https-www-bilibili-com-video-BV1v7411R7mp-p-1"><a href="#学习视频：https-www-bilibili-com-video-BV1v7411R7mp-p-1" class="headerlink" title="学习视频：https://www.bilibili.com/video/BV1v7411R7mp?p=1"></a>学习视频：<a href="https://www.bilibili.com/video/BV1v7411R7mp?p=1">https://www.bilibili.com/video/BV1v7411R7mp?p=1</a></h4><p>个人博客：<a href="https://highfish920.github.io/">https://highfish920.github.io/</a><br>代码地址：<a href="https://github.com/highfish920/ECharts-">https://github.com/highfish920/ECharts-</a></p><a id="more"></a><p>项目展示<img src="https://img-blog.csdnimg.cn/20200926220304486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;学习视频：https-www-bilibili-com-video-BV1v7411R7mp-p-1&quot;&gt;&lt;a href=&quot;#学习视频：https-www-bilibili-com-video-BV1v7411R7mp-p-1&quot; class=&quot;headerlink&quot; title=&quot;学习视频：https://www.bilibili.com/video/BV1v7411R7mp?p=1&quot;&gt;&lt;/a&gt;学习视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1v7411R7mp?p=1&quot;&gt;https://www.bilibili.com/video/BV1v7411R7mp?p=1&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;个人博客：&lt;a href=&quot;https://highfish920.github.io/&quot;&gt;https://highfish920.github.io/&lt;/a&gt;&lt;br&gt;代码地址：&lt;a href=&quot;https://github.com/highfish920/ECharts-&quot;&gt;https://github.com/highfish920/ECharts-&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ECharts" scheme="http://yoursite.com/categories/ECharts/"/>
    
    
    <category term="ECharts" scheme="http://yoursite.com/tags/ECharts/"/>
    
  </entry>
  
  <entry>
    <title>linux--基于linux搭建hadoop开发环境</title>
    <link href="http://yoursite.com/2020/09/25/linux7/"/>
    <id>http://yoursite.com/2020/09/25/linux7/</id>
    <published>2020-09-25T11:44:49.224Z</published>
    <updated>2020-09-25T13:36:47.332Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><a id="more"></a><p>下载对应jar包，地址<a href="http://mirrors.neusoft.edu.cn/eclipse/technology/epp/downloads/release/2018-09/R/">http://mirrors.neusoft.edu.cn/eclipse/technology/epp/downloads/release/2018-09/R/</a><br>网盘：链接：<a href="https://pan.baidu.com/s/1aGlgu5tWf0XIO9H0hxqB0A">https://pan.baidu.com/s/1aGlgu5tWf0XIO9H0hxqB0A</a><br>提取码：1314 </p><ol><li>将下载的jar包上传至虚拟机，解压eclipse<br><img src="https://img-blog.csdnimg.cn/20200925195621994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925195643797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925195706597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看<img src="https://img-blog.csdnimg.cn/20200925195759298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>将eclipse执行文件连接到用户目录<br><img src="https://img-blog.csdnimg.cn/20200925202814127.png#pic_center" alt="在这里插入图片描述"></li></ol><p>创建一个启动项，添加代码<br><img src="https://img-blog.csdnimg.cn/20200925200251247.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925200903935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装图形化界面<br>安装桌面组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y   &quot;Desktop&quot;   &quot;Desktop Platform&quot;   &quot;Desktop Platform Development&quot; &quot;Fonts&quot; &quot;General Purpose Desktop&quot; &quot;Graphical Administration Tools&quot; &quot;Graphics Creation Tools&quot; &quot;Input Methods&quot; &quot;X Window System&quot; &quot;Chinese Support [zh]&quot; &quot;Internet Browser&quot;</span><br></pre></td></tr></table></figure><p>编辑/etc/inittab文件，修改启级别为5，</p><p>将    id:3:initdefault:    改为     id:5:initdefault:<br>重启 reboot<br>su root 切换到root下 cd退回 init 3到终端  init 5到图形化界面</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h4&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux--基于windows开发hadoop应用程序</title>
    <link href="http://yoursite.com/2020/09/25/linux6/"/>
    <id>http://yoursite.com/2020/09/25/linux6/</id>
    <published>2020-09-25T08:45:11.717Z</published>
    <updated>2020-09-25T11:44:44.924Z</updated>
    
    <content type="html"><![CDATA[<h4 id="所需jar包-链接：https-pan-baidu-com-s-1dV0cocLamZlm5NC89ZjEmQ"><a href="#所需jar包-链接：https-pan-baidu-com-s-1dV0cocLamZlm5NC89ZjEmQ" class="headerlink" title="所需jar包 链接：https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ"></a>所需jar包 链接：<a href="https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ">https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ</a></h4><p>提取码：dasa</p><a id="more"></a><h2 id="基于windows开发hadoop应用程序"><a href="#基于windows开发hadoop应用程序" class="headerlink" title="基于windows开发hadoop应用程序"></a>基于windows开发hadoop应用程序</h2><h3 id="1-搭建hdfs环境"><a href="#1-搭建hdfs环境" class="headerlink" title="1. 搭建hdfs环境"></a>1. 搭建hdfs环境</h3><p>1.1 解压hadoop.tar.gz到一个目录下<br><img src="https://img-blog.csdnimg.cn/20200925145031660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925150058725.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925150216104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>1.2 配置环境变量<br><img src="https://img-blog.csdnimg.cn/20200925145243614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020092514532527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>1.3 path里面<br><img src="https://img-blog.csdnimg.cn/20200925145424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>1.4 打开eclipse的plugins目录<br><img src="https://img-blog.csdnimg.cn/20200925150940174.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925151007157.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925153239948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>1.5 导入后重新启动eclipse</p><p>按下图操作<br><img src="https://img-blog.csdnimg.cn/20200925153522594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>切换到map/reduce，点击小象</p><p><img src="https://img-blog.csdnimg.cn/20200925161248798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><code>vi mapred-site.xml </code><br><img src="https://img-blog.csdnimg.cn/20200925161334337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><code>vi core-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20200925161500860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>配置完如果还报错不用管，忽略即可<br>类似于这样的错误<br><img src="https://img-blog.csdnimg.cn/20200925163409183.png#pic_center" alt="在这里插入图片描述"></p><p>1.6 输入网址（<a href="http://192.168.50.146:50070/explorer.html#/%EF%BC%89%E6%9F%A5%E7%9C%8B%E5%B7%B2%E7%BB%8F%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6">http://192.168.50.146:50070/explorer.html#/）查看已经显示文件</a><br><img src="https://img-blog.csdnimg.cn/20200925154405737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>配置完成查看eclipse里面的树已经显示(第一次不显示，需要新建项目后显示，所以不显示也不要着急)<br>这是显示的树<br><img src="https://img-blog.csdnimg.cn/20200925163537583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-基于windows开发hadoop应用程序"><a href="#2-基于windows开发hadoop应用程序" class="headerlink" title="2.基于windows开发hadoop应用程序"></a>2.基于windows开发hadoop应用程序</h2><p><img src="https://img-blog.csdnimg.cn/20200925163720993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925163741142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.1 添加外部扩展jar包，在自己的linux下（这3个jar包）<br><img src="https://img-blog.csdnimg.cn/20200925163945279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以先复制到自己的机器上在添加<br><img src="https://img-blog.csdnimg.cn/20200925164336508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>同理添加以下jar包<br><img src="https://img-blog.csdnimg.cn/20200925165034182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925165216497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925165427140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925165619666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>导入成功<br><img src="https://img-blog.csdnimg.cn/20200925165645162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.2 右键项目新建class<br><img src="https://img-blog.csdnimg.cn/20200925165812811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>类里面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span> </span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                    )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line">      <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">        word.set(itr.nextToken());</span><br><span class="line">        context.write(word, one);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span> </span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, </span></span></span><br><span class="line"><span class="function"><span class="params">                       Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                       )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">        sum += val.get();</span><br><span class="line">      &#125;</span><br><span class="line">      result.set(sum);</span><br><span class="line">      context.write(key, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class="line">    <span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">      System.exit(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Job job = Job.getInstance(conf, <span class="string">&quot;word count&quot;</span>);</span><br><span class="line">    job.setJarByClass(MyWordCount.class);</span><br><span class="line">    job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">    job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">    job.setReducerClass(IntSumReducer.class);</span><br><span class="line">    job.setOutputKeyClass(Text.class);</span><br><span class="line">    job.setOutputValueClass(IntWritable.class);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    FileOutputFormat.setOutputPath(job,</span><br><span class="line">      <span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200925170402278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925170413332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925170425100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>将导出的jar包放到hadoop目录用户下<br>（在/home/gaoyu（建立的什么就是什么，可能是hadoop）下新建wordcount文件夹，然后将jar包放进去）<br><img src="https://img-blog.csdnimg.cn/20200925171356575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>拖进去<br><img src="https://img-blog.csdnimg.cn/20200925171517586.png#pic_center" alt="在这里插入图片描述"><br>登录hadoop集群的主机，进入刚才的gaoyu目录下，创建两个txt文件，创建txt文件的时候一定要先回车，在按ctrl+c才能保存</p><p><img src="https://img-blog.csdnimg.cn/20200925172520635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200925172537186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将这两个文件移动到wordcount目录下<br><img src="https://img-blog.csdnimg.cn/20200925172751123.png#pic_center" alt="在这里插入图片描述"><br>并且修改所有属主和属组为gaoyu（有的是hadoop）<br><img src="https://img-blog.csdnimg.cn/20200925173743975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>切换回gaoyu（hadoop）目录，创建input目录，如果存在则不用创建<br><img src="https://img-blog.csdnimg.cn/20200925173927981.png#pic_center" alt="在这里插入图片描述"><br>切回root <code>su root</code></p><p>上传新建的两个文件swpt1和2到input文件下，并查看<br><img src="https://img-blog.csdnimg.cn/20200925174233254.png#pic_center" alt="在这里插入图片描述"><br>删除output目录，以及input目录下其他文件<br><code>hdfs dfs -rmr /output</code><br><img src="https://img-blog.csdnimg.cn/20200925174441451.png#pic_center" alt="在这里插入图片描述"><br><code>hdfs dfs -rm /input/LICENSE.txt</code><br><img src="https://img-blog.csdnimg.cn/20200925174530281.png#pic_center" alt="在这里插入图片描述"><br>删除成功</p><h2 id="3-运行MyWordCount"><a href="#3-运行MyWordCount" class="headerlink" title="3.运行MyWordCount"></a>3.运行MyWordCount</h2><p><img src="https://img-blog.csdnimg.cn/20200925185532528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看网页结果<br><img src="https://img-blog.csdnimg.cn/20200925185638896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;所需jar包-链接：https-pan-baidu-com-s-1dV0cocLamZlm5NC89ZjEmQ&quot;&gt;&lt;a href=&quot;#所需jar包-链接：https-pan-baidu-com-s-1dV0cocLamZlm5NC89ZjEmQ&quot; class=&quot;headerlink&quot; title=&quot;所需jar包 链接：https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ&quot;&gt;&lt;/a&gt;所需jar包 链接：&lt;a href=&quot;https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ&quot;&gt;https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;提取码：dasa&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>在编写css文件的时候，less插件保存成wxss或者css方法</title>
    <link href="http://yoursite.com/2020/09/23/css1/"/>
    <id>http://yoursite.com/2020/09/23/css1/</id>
    <published>2020-09-23T02:04:18.432Z</published>
    <updated>2020-09-23T02:05:09.731Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-先安装easy-less-插件"><a href="#1-先安装easy-less-插件" class="headerlink" title="1. 先安装easy less 插件"></a>1. 先安装easy less 插件</h4><a id="more"></a><ol start="2"><li>打开设置》扩展设置》settings.json<br><img src="https://img-blog.csdnimg.cn/20200923100300104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="3."><br>这个地方，如果想要自动保存less后保存为wxss或者css文件就可以在这里修改</li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-先安装easy-less-插件&quot;&gt;&lt;a href=&quot;#1-先安装easy-less-插件&quot; class=&quot;headerlink&quot; title=&quot;1. 先安装easy less 插件&quot;&gt;&lt;/a&gt;1. 先安装easy less 插件&lt;/h4&gt;</summary>
    
    
    
    <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
    <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Oracle11g数据库卸载</title>
    <link href="http://yoursite.com/2020/09/21/oracle%E5%8D%B8%E8%BD%BD/"/>
    <id>http://yoursite.com/2020/09/21/oracle%E5%8D%B8%E8%BD%BD/</id>
    <published>2020-09-21T13:28:22.323Z</published>
    <updated>2020-09-21T13:28:58.521Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Oracle11g数据库卸载"><a href="#Oracle11g数据库卸载" class="headerlink" title="Oracle11g数据库卸载"></a>Oracle11g数据库卸载</h4><a id="more"></a><ol><li>找到安装目录，找到卸载程序<br><img src="https://img-blog.csdnimg.cn/20200921211522448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921211538989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>点击卸载产品，选择数据库，点击删除<br>如果点击删除出现警告<br>以cmd管理员运行 把提示的代码粘贴进去回车（最后一个输入y，其他不修改）</li><li>查看服务是否存在，应该是没有了</li><li>进入注册表 <code>regedit</code> 删除注册表 带有oracle的都删了</li><li>删除目录 C盘和安装盘<br><img src="https://img-blog.csdnimg.cn/20200921212123555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921212150219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最后一步重启即可<br>实在不行就重装系统吧</li></ol><p>安装oracle 11g网址：<a href="https://editor.csdn.net/md/?articleId=108717666">https://editor.csdn.net/md/?articleId=108717666</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Oracle11g数据库卸载&quot;&gt;&lt;a href=&quot;#Oracle11g数据库卸载&quot; class=&quot;headerlink&quot; title=&quot;Oracle11g数据库卸载&quot;&gt;&lt;/a&gt;Oracle11g数据库卸载&lt;/h4&gt;</summary>
    
    
    
    <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
    <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oracle11g数据库安装</title>
    <link href="http://yoursite.com/2020/09/21/oracle%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/09/21/oracle%E5%AE%89%E8%A3%85/</id>
    <published>2020-09-21T13:25:16.007Z</published>
    <updated>2020-09-21T13:38:09.495Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Oracle11g数据库安装"><a href="#Oracle11g数据库安装" class="headerlink" title="Oracle11g数据库安装"></a>Oracle11g数据库安装</h4><a id="more"></a><p>软件下载地址：链接：<a href="https://pan.baidu.com/s/1NTbQ_mY7SoIhhEbpBr5Nnw">https://pan.baidu.com/s/1NTbQ_mY7SoIhhEbpBr5Nnw</a><br>提取码：dasa</p><p>下载完成并且解压是两个文件夹，复制其中一个文件夹的database文件夹粘贴到另一个文件夹下合并文件夹</p><p>安装前准备</p><ul><li>关闭本机防火墙和电脑管家，360等软件</li><li>断开网络</li></ul><p>开始安装：</p><ol><li>双击setup.exe<br><img src="https://img-blog.csdnimg.cn/20200921195809960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>取消勾选，下一步<br><img src="https://img-blog.csdnimg.cn/20200921200709204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选是<br><img src="https://img-blog.csdnimg.cn/20200921200821793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择安装并配置数据库<br><img src="https://img-blog.csdnimg.cn/20200921200937658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择服务器类型，下一步<br><img src="https://img-blog.csdnimg.cn/20200921201032529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择第一个<br><img src="https://img-blog.csdnimg.cn/20200921201132859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择高级安装<br><img src="https://img-blog.csdnimg.cn/20200921201159468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择语言<br><img src="https://img-blog.csdnimg.cn/20200921201243582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>安企业版本<br><img src="https://img-blog.csdnimg.cn/20200921201324795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><ol start="10"><li>安装目录<br><img src="https://img-blog.csdnimg.cn/2020092120162461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol></li><li>默认一般仓库<br><img src="https://img-blog.csdnimg.cn/20200921201706973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>指定数据库名<br><img src="https://img-blog.csdnimg.cn/20200921202307740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择字符集，样本数据（千万别着急下一步）<br><img src="https://img-blog.csdnimg.cn/20200921202439404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921202555341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="13."><ol start="13"><li>下一步<br><img src="https://img-blog.csdnimg.cn/20200921202651563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下一步<br><img src="https://img-blog.csdnimg.cn/20200921202717600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下一步<br><img src="https://img-blog.csdnimg.cn/20200921202733865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol></li><li>输入相同口令：oracleadmin<br><img src="https://img-blog.csdnimg.cn/20200921203322537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921203335377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>完成<br><img src="https://img-blog.csdnimg.cn/20200921203436169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>检查中，如果出现错误提示，忽略即可<br>下载安装<br><img src="https://img-blog.csdnimg.cn/20200921204406732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>等待<img src="https://img-blog.csdnimg.cn/20200921204425913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><p>会出现一个页面点击确定<br>然后又出现一个页面，选择口令管理<br><img src="https://img-blog.csdnimg.cn/20200921204623192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>口令包括：</p><ul><li>超级管理员 sys / change_on_install</li><li>普通管理员 system / manager</li><li>普通用户 scott / tiger 需要解锁</li><li>大数据用户（样本数据库才有） sh / sh 需要解锁</li><li>如果没有解锁密码就是上面配置的oracleadmin</li></ul><p>下面对应（口令和确认口令是一样的）<br>sys / change_on_install<br>system / manager<br><img src="https://img-blog.csdnimg.cn/20200921205251976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>找到scott取消对勾，输入密码tiger<br><img src="https://img-blog.csdnimg.cn/202009212055417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>找到SH取消对勾输入密码sh<br><img src="https://img-blog.csdnimg.cn/20200921205636202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击确定》是》确定<br>此时oracle软件和数据库安装完成<br>点击关闭<br><img src="https://img-blog.csdnimg.cn/20200921205834956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol start="17"><li>打开服务（确保开机速度）<br>查看<br><img src="https://img-blog.csdnimg.cn/20200921210227554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>把所有的自动改为手动<br><img src="https://img-blog.csdnimg.cn/20200921210431873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>但是每次开启的时候只需要开启两个服务即可<br>OracleOraDb11g_home1TNSListener   监听服务<br>OracleServiceORCL     数据库实例服务</li></ol><p>windows+R 输入 sqlplus 即可启动 输入<br>超级管理员 sys / change_on_install<br>普通管理员 system / manager<br>普通用户 scott / tiger<br>大数据用户（样本数据库才有） sh / sh<br>任何一个即可</p><p>卸载地址： <a href="https://blog.csdn.net/weixin_42693712/article/details/108719409">https://blog.csdn.net/weixin_42693712/article/details/108719409</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Oracle11g数据库安装&quot;&gt;&lt;a href=&quot;#Oracle11g数据库安装&quot; class=&quot;headerlink&quot; title=&quot;Oracle11g数据库安装&quot;&gt;&lt;/a&gt;Oracle11g数据库安装&lt;/h4&gt;</summary>
    
    
    
    <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
    <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>linux-安装hadoop集群（伪分布）</title>
    <link href="http://yoursite.com/2020/09/19/linux5/"/>
    <id>http://yoursite.com/2020/09/19/linux5/</id>
    <published>2020-09-19T09:11:42.371Z</published>
    <updated>2020-09-22T02:38:42.139Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装hadoop"><a href="#1-安装hadoop" class="headerlink" title="1. 安装hadoop"></a>1. 安装hadoop</h4><a id="more"></a><h3 id="安装hadoop集群"><a href="#安装hadoop集群" class="headerlink" title="安装hadoop集群"></a>安装hadoop集群</h3><h4 id="1-安装hadoop-1"><a href="#1-安装hadoop-1" class="headerlink" title="1. 安装hadoop"></a>1. 安装hadoop</h4><p>将压缩包复制到/usr目录下<br><img src="https://img-blog.csdnimg.cn/20200916181653488.png#pic_center" alt="在这里插入图片描述"><br>解压 <code>tar -zxvf 压缩包名字 -C /usr</code></p><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><p>2.1 查看所有文件<br><br><img src="https://img-blog.csdnimg.cn/20200916182622807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.2 修改<code>hadoop.env.sh</code><br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><img src="https://img-blog.csdnimg.cn/20200916191519637.png#pic_center" alt="在这里插入图片描述"></p><p>配置<br><img src="https://img-blog.csdnimg.cn/20200916202052584.png#pic_center" alt="在这里插入图片描述"></p><p>2.3 配置<code>core-site</code><br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi core-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20200916201335778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/hadoop/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:<span class="comment">//gaoyu:9000&lt;/value&gt;</span></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>2.4<br>配置hdfs.site<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi hdfs-site.xml</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;gaoyu:50070&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;gaoyu2:50090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/hadoop/name&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.data.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/hadoop/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>2.5  配置mapred-site.xml<br>复制模板<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code> mv mapred-site.xml.template mapred-site.xml</code><br>修改配置<br><code>vi mapred-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20200919152452915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.6 配置yarn-env.sh<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi yarn-env.sh</code><br><img src="https://img-blog.csdnimg.cn/20200919152749131.png#pic_center" alt="在这里插入图片描述"><br>2.7 配置yarn-site.xml<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi yarn-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20200919152957416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>2.5 配置slaves<br><code>vi slaves</code><br><br><br><img src="https://img-blog.csdnimg.cn/20200916202751615.png#pic_center" alt="在这里插入图片描述"><br>2.6 配置hadoop环境变量<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi /etc/profile</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#hadoop environment</span><br><span class="line">export HADOOP_HOME=/usr/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">export HADOOP CONF DIR=/usr/hadoop/etc/hadoop/</span><br></pre></td></tr></table></figure><p>刷新：<code>source /etc/profile</code><br>3. 复制文件到其他机器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/hadoop gaoyu1:/usr/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/hadoop gaoyu2:/usr/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile gaoyu1:/etc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile gaoyu2:/etc</span><br></pre></td></tr></table></figure><p>在三台机器上分别操作（root下）<br><img src="https://img-blog.csdnimg.cn/20200922102536516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><code>useradd hadoop</code><br><code>groupadd hadoop</code><br><code>gpasswd -a hadoop hadoop</code><br><code>chown -R hadoop:hadoop /use/hadoop</code><br><code>ll /usr</code><br>其他两台照做一遍</p><p>4.格式化hdfs<img src="https://img-blog.csdnimg.cn/20200916214504660.png#pic_center" alt="在这里插入图片描述"><br>5.启动hdfs<br><code>start-all.sh</code><br><img src="https://img-blog.csdnimg.cn/20200916222525347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>关闭：<code>stop-all.sh</code><br>查看：<img src="https://img-blog.csdnimg.cn/20200916222856304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200919150346397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-安装hadoop&quot;&gt;&lt;a href=&quot;#1-安装hadoop&quot; class=&quot;headerlink&quot; title=&quot;1. 安装hadoop&quot;&gt;&lt;/a&gt;1. 安装hadoop&lt;/h4&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux克隆虚拟机以及配置各台虚拟机，包括修改id，ssh免密登录，使用别名登录等</title>
    <link href="http://yoursite.com/2020/09/16/linux4/"/>
    <id>http://yoursite.com/2020/09/16/linux4/</id>
    <published>2020-09-16T10:01:59.547Z</published>
    <updated>2020-09-16T10:02:58.407Z</updated>
    
    <content type="html"><![CDATA[<h5 id="本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3"><a href="#本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3" class="headerlink" title="本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量https://highfish920.github.io/2020/09/16/linux3/"></a>本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量<a href="https://highfish920.github.io/2020/09/16/linux3/">https://highfish920.github.io/2020/09/16/linux3/</a></h5><a id="more"></a><h3 id="1-克隆虚拟机"><a href="#1-克隆虚拟机" class="headerlink" title="1.克隆虚拟机"></a>1.克隆虚拟机</h3><h4 id="1-1-选住要克隆的虚拟机-右键》管理》克隆"><a href="#1-1-选住要克隆的虚拟机-右键》管理》克隆" class="headerlink" title="1.1 选住要克隆的虚拟机  右键》管理》克隆"></a>1.1 选住要克隆的虚拟机  右键》管理》克隆<br><img src="https://img-blog.csdnimg.cn/20200916160911927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4><p>因为虚拟机是开着的所以无法克隆，所以先关闭虚拟机</p><h4 id="1-2关闭后再次选择克隆即可"><a href="#1-2关闭后再次选择克隆即可" class="headerlink" title="1.2关闭后再次选择克隆即可"></a>1.2关闭后再次选择克隆即可<br><img src="https://img-blog.csdnimg.cn/20200916161035587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4><p><img src="https://img-blog.csdnimg.cn/20200916161209120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择完整克隆<br><img src="https://img-blog.csdnimg.cn/20200916161313436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置名字和路劲<br><img src="https://img-blog.csdnimg.cn/20200916161410439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击完成<br><br><img src="https://img-blog.csdnimg.cn/20200916161533695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在克隆一台<br><br><img src="https://img-blog.csdnimg.cn/20200916161803308.png#pic_center" alt="在这里插入图片描述"><br>接下来启动三台虚拟机</p><h3 id="2-配置克隆的虚拟机"><a href="#2-配置克隆的虚拟机" class="headerlink" title="2.配置克隆的虚拟机"></a>2.配置克隆的虚拟机</h3><p>2.1 开启hadoop2<br><br><img src="https://img-blog.csdnimg.cn/2020091616235625.png#pic_center" alt="在这里插入图片描述"><br>2.2 输入 <code>vi /etc/udev/rules.d/70-persistent-net.rules</code><br><br><img src="https://img-blog.csdnimg.cn/20200916163200349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>修改：删除第一个，第二个把eth1改为eth0<br><img src="https://img-blog.csdnimg.cn/20200916163127599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.3 修改ip地址<br>输入<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code><br><br><br><img src="https://img-blog.csdnimg.cn/20200916163720605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>删除HWADDR，修改ip<br><br><img src="https://img-blog.csdnimg.cn/2020091616382131.png#pic_center" alt="在这里插入图片描述"><br>2.4 同理将hadoop3修改，这里修改的ip为192.168.50.148<br><img src="https://img-blog.csdnimg.cn/20200916165218690.png#pic_center" alt="在这里插入图片描述"><br>修改完输入 <code>reboot</code> 重启生效</p><p>测试ping百度也都成功<img src="https://img-blog.csdnimg.cn/20200916170304980.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3.关闭防火墙"></a>3.关闭防火墙</h3><p>3.1 使用MobaXterm 登录三台虚拟机<br><img src="https://img-blog.csdnimg.cn/20200916170759199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击这个可以同时操作<br><img src="https://img-blog.csdnimg.cn/20200916171015979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>3.2     查看状态 <code> service iptables status</code><br><img src="https://img-blog.csdnimg.cn/20200916171352391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>3.3 关闭防火墙<code>service iptables stop</code><br><img src="https://img-blog.csdnimg.cn/20200916171323630.png#pic_center" alt="在这里插入图片描述"><br>命令：<br><img src="https://img-blog.csdnimg.cn/20200916171407423.png#pic_center" alt="在这里插入图片描述"><br>3.4 彻底关闭防火墙以及查看<br><code>chkconfig iptables off</code><br><code>chkconfig --list iptables</code><br><img src="https://img-blog.csdnimg.cn/20200916171554193.png#pic_center" alt="在这里插入图片描述"></p><h4 id="4-关闭selinux-同样是三台一起操作"><a href="#4-关闭selinux-同样是三台一起操作" class="headerlink" title="4.关闭selinux(同样是三台一起操作)"></a>4.关闭selinux(同样是三台一起操作)</h4><p><code>vi /etc/selinux/config</code><br><img src="https://img-blog.csdnimg.cn/20200916171924852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>重启三台机器 <code>reboot</code></p><h3 id="5-修改主机名"><a href="#5-修改主机名" class="headerlink" title="5.修改主机名"></a>5.修改主机名</h3><p>输入 <code>vi /etc/sysconfig/network</code>将名字改为gaoyu1<br><img src="https://img-blog.csdnimg.cn/20200916172602350.png#pic_center" alt="在这里插入图片描述"><br>同理将hadoop机器改为gaoyu2<br>重启生效</p><h3 id="6-配置别名，用别名访问"><a href="#6-配置别名，用别名访问" class="headerlink" title="6.配置别名，用别名访问"></a>6.配置别名，用别名访问</h3><p>输入<code>vi /etc/hosts</code>配置别名<br><img src="https://img-blog.csdnimg.cn/20200916173339979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>测试通过可以通过名字ping通<br><img src="https://img-blog.csdnimg.cn/20200916173914608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="7-使用ssh免密登录"><a href="#7-使用ssh免密登录" class="headerlink" title="7.使用ssh免密登录"></a>7.使用ssh免密登录</h3><p>三台同时操作生成公钥和私钥<br><code>ssh-keygen -t rsa</code><br>按三次回车即可<br><img src="https://img-blog.csdnimg.cn/20200916174455288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接下来将第一台机器的秘钥拷贝到这三台机器，下面对第一台机器操作<br>输入<code>ssh-copy-id gaoyu</code>将秘钥拷贝到第一台机器上<br><img src="https://img-blog.csdnimg.cn/20200916174838286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接下来将其拷贝到其他两台机器<br><img src="https://img-blog.csdnimg.cn/20200916175020562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>测试：<img src="https://img-blog.csdnimg.cn/20200916175423760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他两台机器同理</p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3&quot;&gt;&lt;a href=&quot;#本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3&quot; class=&quot;headerlink&quot; title=&quot;本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量https://highfish920.github.io/2020/09/16/linux3/&quot;&gt;&lt;/a&gt;本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量&lt;a href=&quot;https://highfish920.github.io/2020/09/16/linux3/&quot;&gt;https://highfish920.github.io/2020/09/16/linux3/&lt;/a&gt;&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 配置java环境变量</title>
    <link href="http://yoursite.com/2020/09/16/linux3/"/>
    <id>http://yoursite.com/2020/09/16/linux3/</id>
    <published>2020-09-16T05:10:08.443Z</published>
    <updated>2020-09-16T05:10:54.059Z</updated>
    
    <content type="html"><![CDATA[<h5 id="linux配置java环境变量"><a href="#linux配置java环境变量" class="headerlink" title="linux配置java环境变量"></a>linux配置java环境变量</h5><a id="more"></a><p>jdk对应版本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1--hWO9IORgtywZ0UBquELQ </span><br><span class="line">提取码：vm7w</span><br></pre></td></tr></table></figure><ol><li>先查看本身是否安装有jdk，如有则卸载<br>查看： <code>rpm -qa | grep java</code><br>没有下一步 有卸载<br>如：<img src="https://img-blog.csdnimg.cn/20200916124734230.png#pic_center" alt="在这里插入图片描述"><br>使用 <code>rpm -e --nodeps</code> 名称 卸载</li><li>新建目录 <code>/usr/java</code><br>命令： <code>mkdir /usr/java</code><br>查看是否创建成功 <code>ll /usr</code><br><img src="https://img-blog.csdnimg.cn/20200916125000350.png#pic_center" alt="在这里插入图片描述"></li></ol><p>3.</p><ul><li>利用MobaXterm_CHS工具将jdk复制到此目录下即可</li><li>或者通过命令：先到创建的目录下 <code>cd /usr/java</code><pre><code>                      `pwd` 查看是否在当前目录下                      再利用MobaXterm_CHS工具将jdk复制到此目录下</code></pre><ul><li><code>ll</code> 查看是否上传成功</li></ul><ol start="3"><li>解压 <code>tar -zxvf jdk名字 -C /usr/java</code><img src="https://img-blog.csdnimg.cn/20200916125557405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>配置环境变量<br>打开<code>/etc/profile</code>文件   <code>vi /etc/profile</code>到最底部添加配置</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#new java environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_161</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200916130107713.png#pic_center" alt="在这里插入图片描述"><br>刷新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200916130153791.png#pic_center" alt="在这里插入图片描述"><br>测试：<br>输入 <code>java -version</code> 显示版本为成功<br><img src="https://img-blog.csdnimg.cn/2020091613025025.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;linux配置java环境变量&quot;&gt;&lt;a href=&quot;#linux配置java环境变量&quot; class=&quot;headerlink&quot; title=&quot;linux配置java环境变量&quot;&gt;&lt;/a&gt;linux配置java环境变量&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos6.5安装步骤</title>
    <link href="http://yoursite.com/2020/09/09/linux2/"/>
    <id>http://yoursite.com/2020/09/09/linux2/</id>
    <published>2020-09-09T15:14:02.812Z</published>
    <updated>2020-09-09T15:23:29.106Z</updated>
    
    <content type="html"><![CDATA[<h5 id="centos6-5安装步骤"><a href="#centos6-5安装步骤" class="headerlink" title="centos6.5安装步骤"></a>centos6.5安装步骤</h5><a id="more"></a><ol><li><p>下载centos6.5 网址：<a href="https://blog.csdn.net/huchunlinnk/article/details/45038025">https://blog.csdn.net/huchunlinnk/article/details/45038025</a><hr></p></li><li><p>安装vmware 网址： <a href="https://my.vmware.com/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_fusion/10_0">https://my.vmware.com/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_fusion/10_0</a><hr></p></li><li><p>打开vmware 新建虚拟机，选择典型<br><hr><img src="https://img-blog.csdnimg.cn/20200909170531877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选择稍后安装<br><hr><img src="https://img-blog.csdnimg.cn/20200909170709460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选择操作系统<br><hr><img src="https://img-blog.csdnimg.cn/20200909170822618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>命名虚拟机以及安装位置<br><hr><img src="https://img-blog.csdnimg.cn/20200909171029368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>默认，下一步<br><hr><img src="https://img-blog.csdnimg.cn/20200909171145383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>完成<br><hr><img src="https://img-blog.csdnimg.cn/20200909171216860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><hr><img src="https://img-blog.csdnimg.cn/20200909171257548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选住虚拟机右键，设置，可配置内存<br><hr><img src="https://img-blog.csdnimg.cn/20200909171356567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>配置CD/DVD  选择自己的镜像位置<br><hr><img src="https://img-blog.csdnimg.cn/20200909171629665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>网络适配器选择NAT<br><hr><img src="https://img-blog.csdnimg.cn/20200909171935596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选择住自己的虚拟机，点击开启<br><hr><img src="https://img-blog.csdnimg.cn/20200909172035123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>开始安装</strong></p></li><li><p>回车<br><hr><img src="https://img-blog.csdnimg.cn/2020090917223080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol><p>选择skip<br><hr><img src="https://img-blog.csdnimg.cn/20200909172309792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>next<br><hr><img src="https://img-blog.csdnimg.cn/20200909172941638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择中文简体<br><hr><img src="https://img-blog.csdnimg.cn/20200909173044451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>键盘选择美国英语式<br><hr><img src="https://img-blog.csdnimg.cn/20200909173131335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>下一步<br><hr><img src="https://img-blog.csdnimg.cn/2020090917321351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>是，忽略<br><hr><img src="https://img-blog.csdnimg.cn/20200909173239730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置主机名<br><hr><img src="https://img-blog.csdnimg.cn/202009091733297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>时区选择上海<br><hr><img src="https://img-blog.csdnimg.cn/20200909173408680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置密码123456<br><hr><img src="https://img-blog.csdnimg.cn/20200909173503696.png#pic_center" alt="在这里插入图片描述"><br>无论如何都用<br><hr><img src="https://img-blog.csdnimg.cn/20200909173532309.png#pic_center" alt="在这里插入图片描述"><br><hr><br>自定义分区<br><hr><img src="https://img-blog.csdnimg.cn/20200909173613693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909173821652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>创建<br><hr><img src="https://img-blog.csdnimg.cn/20200909173841985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909173943443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909174016982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909174329381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/2020090917442620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909174502472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>格式化<br><hr><img src="https://img-blog.csdnimg.cn/20200909174521853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>选择将修改写入磁盘<br><hr><img src="https://img-blog.csdnimg.cn/20200909174543931.png#pic_center" alt="在这里插入图片描述"><br><hr><br>分区完成，下一步<br><hr><img src="https://img-blog.csdnimg.cn/20200909174618241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>重新引导<br><hr><img src="https://img-blog.csdnimg.cn/20200909174954472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>参考：<a href="https://blog.csdn.net/z1941563559/article/details/80615691">https://blog.csdn.net/z1941563559/article/details/80615691</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;centos6-5安装步骤&quot;&gt;&lt;a href=&quot;#centos6-5安装步骤&quot; class=&quot;headerlink&quot; title=&quot;centos6.5安装步骤&quot;&gt;&lt;/a&gt;centos6.5安装步骤&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux-Centos6.5 配置地址</title>
    <link href="http://yoursite.com/2020/09/09/linux1/"/>
    <id>http://yoursite.com/2020/09/09/linux1/</id>
    <published>2020-09-09T15:11:30.331Z</published>
    <updated>2020-09-16T05:13:07.958Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CentOS-6-5网络配置静态IP地址"><a href="#CentOS-6-5网络配置静态IP地址" class="headerlink" title="CentOS 6.5网络配置静态IP地址"></a>CentOS 6.5网络配置静态IP地址</h5><a id="more"></a><p>CentOS 6.5网络配置静态IP地址<br>打开VMvare，并进入虚拟机</p><p>CentOS6.5网络配置<br>2<br>输入用户名，按回车键，再输入密码，登录系统</p><p>CentOS6.5网络配置<br>3<br>进行网络配置前，需要确认几个事情：</p><ol><li>网络适配器模式是否为NAT模式</li></ol><p>右键虚拟机，或者点击VMvare菜单栏中的虚拟机（按ctrl+alt键可切出虚拟机返回到windows，点击虚拟机窗口，可进入虚拟机操作）</p><p>点击“设置”<br><img src="https://img-blog.csdnimg.cn/20200909201251787.png#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>4<br>确认网络适配器是否处于NAT模式<br><img src="https://img-blog.csdnimg.cn/20200909201308914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>5<br>2. 确认网关、网段</p><p>点击VMvare虚拟机“编辑”菜单中的“虚拟网络编辑器”<br><img src="https://img-blog.csdnimg.cn/20200909201524495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>6<br>在弹出页面上方列表中选择VMnet8，并点击页面中部的“NAT设置”按钮</p><p>CentOS6.5网络配置<br>7<br>在该页面中，可以查看到网关IP为“192.168.50.2”（各机器有所不同）<br><img src="https://img-blog.csdnimg.cn/2020090920154051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>CentOS6.5网络配置<br>8<br>关闭网关查看页面，点击页面下方的“DHCP设置”按钮<br><img src="https://img-blog.csdnimg.cn/20200909201607165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>可查看到网络信息</p><p>CentOS6.5网络配置<br>9<br>3. 确认Windows服务启动项中，“VMware DHCP Service”、”VMware NAT Service”，两项服务是否启动</p><p>CentOS6.5网络配置<br>10<br>4. 查看网络和共享中心中的“VMware Network Adapter VMnet8”的状态<br><img src="https://img-blog.csdnimg.cn/20200909201746562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>11<br>其中：</p><p>192.168.50.2 是虚拟路由器的网关地址</p><p>192.168.50.1 是虚拟路由器为Windows分配的地址</p><p>CentOS6.5网络配置<br>12<br>确认完成后，进入CentOS6.5系统中，输入命令“ifconfig”，查看网络信息。</p><p>可以查看到只有一条“lo”，且地址为“127.0.0.1”</p><p>CentOS6.5网络配置<br>配置网络，输入命令“vi  /etc/sysconfig/network-scripts/ifcfg-eth0”</p><p>CentOS6.5网络配置<br>进入文本编辑模式后，可查看到原信息<br><img src="https://img-blog.csdnimg.cn/20200909201859460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>修改信息：</p><p>ONBOOT=yes</p><p>BOOTPROTO=static</p><p>添加信息：</p><p>IPADDR=192.168.50.146（根据网关自行调整）</p><p>NETMASK=255.255.255.0</p><p>GATEWAY=192.168.50.2</p><p>（按“i”键进入编辑模式，按“Esc”键退出编辑模式，在退出编辑模式时，按“zz”保存退出）<br><img src="https://img-blog.csdnimg.cn/20200916111558524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:0C:29:3A:AC:12</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=22c2bab6-e7b6-4bde-a2e3-151dd8394d44</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=ststic</span><br><span class="line">IPADDR=192.168.50.146</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.50.2</span><br></pre></td></tr></table></figure><p>CentOS6.5网络配置<br>编辑完成后，输入命令“service network restart”</p><p>CentOS6.5网络配置<br>再次输入“ifconfig”命令，查看网络信息。</p><p>可以看到多了一个“eth0”，并且地址为“192.168.50.146”<br><img src="https://img-blog.csdnimg.cn/20200909202113981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>测试网络是否联通。</p><p>ping网关：输入命令“ping 192.168.50.2”</p><p>pingWindows地址：输入命令“ping 192.168.50.1”</p><p>CentOS6.5网络配置<br>设置DNS服务，输入命令“vi /etc/resolv.conf”</p><p>CentOS6.5网络配置<br>添加内容“nameserver 114.114.114.114”,并保存退出<br><img src="https://img-blog.csdnimg.cn/20200909202150453.png#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>测试外网是否联通</p><p>输入命令“ping <a href="http://www.baidu.com”/">www.baidu.com”</a><br><img src="https://img-blog.csdnimg.cn/20200909202227853.png#pic_center" alt="在这里插入图片描述"><br><hr><br>配置完成<br>参考：<a href="https://www.cnblogs.com/lucky-man/p/7111920.html">https://www.cnblogs.com/lucky-man/p/7111920.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;CentOS-6-5网络配置静态IP地址&quot;&gt;&lt;a href=&quot;#CentOS-6-5网络配置静态IP地址&quot; class=&quot;headerlink&quot; title=&quot;CentOS 6.5网络配置静态IP地址&quot;&gt;&lt;/a&gt;CentOS 6.5网络配置静态IP地址&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---策略模式</title>
    <link href="http://yoursite.com/2020/09/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-06T14:48:21.364Z</published>
    <updated>2020-09-06T14:49:01.448Z</updated>
    
    <content type="html"><![CDATA[<h5 id="策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。"><a href="#策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。" class="headerlink" title="策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。"></a>策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。</h5><a id="more"></a><h3 id="策略模式-前端"><a href="#策略模式-前端" class="headerlink" title="策略模式(前端)"></a>策略模式(前端)</h3><p>下面也是举个例子，现在超市有活动，vip为5折，老客户3折，普通顾客没折，计算***需要支付的金额，如果不使用策略模式，我们的代码可能和下面一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params">personType, price</span>) </span>&#123; </span><br><span class="line"> <span class="comment">//vip 5 折 </span></span><br><span class="line"> <span class="keyword">if</span> (personType == <span class="string">&#x27;vip&#x27;</span>) &#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="number">0.5</span>; </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (personType == <span class="string">&#x27;old&#x27;</span>)&#123; <span class="comment">//老客户 3 折 </span></span><br><span class="line"> <span class="keyword">return</span> price * <span class="number">0.3</span>; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> price; <span class="comment">//其他都全价 </span></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在上面的代码中，我们需要很多个判断，如果有很多优惠，我们又需要添加很多判断，<strong>这里已经违背了刚才说的设计模式的六大原则中的开闭原则了，如果使用策略模式</strong>，我们的代码可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于vip客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vipPrice</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">0.5</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">vipPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="built_in">this</span>.discount; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 对于老客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldPrice</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">0.3</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">oldPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="built_in">this</span>.discount; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 对于普通客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">Price.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price ; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 上下文，对于客户端的使用 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Context</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"> <span class="built_in">this</span>.strategy = <span class="literal">null</span>; </span><br><span class="line"> <span class="built_in">this</span>.price = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">Context.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">name, strategy, price</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = name; </span><br><span class="line"> <span class="built_in">this</span>.strategy = strategy; </span><br><span class="line"> <span class="built_in">this</span>.price = price; </span><br><span class="line">&#125; </span><br><span class="line">Context.prototype.getResult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; 的结账价为: &#x27;</span> + <span class="built_in">this</span>.strategy.getPrice(<span class="built_in">this</span>.price)); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context(); </span><br><span class="line"><span class="keyword">var</span> vip = <span class="keyword">new</span> vipPrice(); </span><br><span class="line">context.set (<span class="string">&#x27;vip客户&#x27;</span>, vip, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// vip客户 的结账价为: 100 </span></span><br><span class="line"><span class="keyword">var</span> old = <span class="keyword">new</span> oldPrice(); </span><br><span class="line">context.set (<span class="string">&#x27;老客户&#x27;</span>, old, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// 老客户 的结账价为: 60 </span></span><br><span class="line"><span class="keyword">var</span> Price = <span class="keyword">new</span> Price(); </span><br><span class="line">context.set (<span class="string">&#x27;普通客户&#x27;</span>, Price, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// 普通客户 的结账价为: 200 </span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在上面的代码中，通过策略模式，使得客户的折扣与算法解藕，又使得修改跟扩展能独立的进行，不影到客户端或其他算法的使用。</p><p>当我们的代码中有很多个判断分支，每一个条件分支都会引起该“类”的特定行为以不同的方式作出改变，这个时候就可以使用策略模式，可以改进我们代码的质量，也更好的可以进行单元测试。</p><h3 id="策略模式-后端"><a href="#策略模式-后端" class="headerlink" title="策略模式(后端)"></a>策略模式(后端)</h3><p><img src="https://img-blog.csdnimg.cn/2020090622452363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中，Context是上下文，用一个ConcreteStrategy来配置，维护一个对Strategy对象的引用；Strategy是策略类，用于定义所有支持算法的公共接口；ConcreteStrategy是具体策略类，封装了具体的算法或行为，继承于Strategy。</p><p>　　1. Context上下文<br>　　Context上下文角色，也叫Context封装角色，起承上启下的作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     Strategy strategy;</span><br><span class="line"> <span class="number">4</span>     </span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line"> <span class="number">7</span>     &#125;</span><br><span class="line"> <span class="number">8</span>     </span><br><span class="line"> <span class="number">9</span>     <span class="comment">//上下文接口</span></span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">11</span>         strategy.algorithmInterface();</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure><p>　　2. 策略角色<br>　　抽象策略角色，是对策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具有的方法和属性。algorithm是“运算法则”的意思。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>     </span><br><span class="line"><span class="number">3</span>     <span class="comment">//算法方法</span></span><br><span class="line"><span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">6</span> &#125;</span><br></pre></td></tr></table></figure><p>　　3. 具体策略角色<br>　　用于实现抽象策略中的操作，即实现具体的算法，下方用print代替。测试类共3个ConcreteStrategy，其它两个类与ConcreteStrategyA同理，就不再赘述了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">5</span>         System.out.println(<span class="string">&quot;算法A实现&quot;</span>);</span><br><span class="line"><span class="number">6</span>     &#125;</span><br><span class="line"><span class="number">7</span> </span><br><span class="line"><span class="number">8</span> &#125;</span><br></pre></td></tr></table></figure><p>　　4. Client客户端<br>　　下面依次更换策略，测试一下策略模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Context context;</span><br><span class="line"> <span class="number">5</span>         </span><br><span class="line"> <span class="number">6</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line"> <span class="number">7</span>         context.contextInterface();</span><br><span class="line"> <span class="number">8</span>         </span><br><span class="line"> <span class="number">9</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line"><span class="number">10</span>         context.contextInterface();</span><br><span class="line"><span class="number">11</span>         </span><br><span class="line"><span class="number">12</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyC());</span><br><span class="line"><span class="number">13</span>         context.contextInterface();</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020090622464769.png#pic_center" alt="在这里插入图片描述"></p><h4 id="策略模式的应用"><a href="#策略模式的应用" class="headerlink" title="策略模式的应用"></a>策略模式的应用</h4><p>　　<strong>1. 何时使用</strong><br>一个系统有许多类，而区分它们的只是他们直接的行为时<br><strong>2. 方法</strong><br>将这些算法封装成一个一个的类，任意的替换<br><strong>3. 优点</strong><br>算法可以自由切换<br>避免使用多重条件判断（如果不用策略模式我们可能会使用多重条件语句，不利于维护）<br>扩展性良好，增加一个策略只需实现接口即可<br><strong>4. 缺点</strong><br>策略类数量会增多，每个策略都是一个类，复用的可能性很小<br>所有的策略类都需要对外暴露<br><strong>5. 使用场景</strong><br>多个类只有算法或行为上稍有不同的场景<br>算法需要自由切换的场景<br>需要屏蔽算法规则的场景<br><strong>6. 应用实例</strong><br>出行方式，自行车、汽车等，每一种出行方式都是一个策略<br>商场促销方式，打折、满减等<br>Java AWT中的LayoutManager，即布局管理器<br><strong>7. 注意事项</strong><br>如果一个系统的策略多于四个，就需要考虑使用混合模式来解决策略类膨胀的问题</p><p>参考： <a href="https://www.cnblogs.com/adamjwh/p/11011095.html">https://www.cnblogs.com/adamjwh/p/11011095.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&quot;&gt;&lt;a href=&quot;#策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&quot; class=&quot;headerlink&quot; title=&quot;策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&quot;&gt;&lt;/a&gt;策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&lt;/h5&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="策略模式" scheme="http://yoursite.com/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---观察者模式</title>
    <link href="http://yoursite.com/2020/09/06/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/06/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-06T09:33:23.387Z</published>
    <updated>2020-09-06T09:35:05.022Z</updated>
    
    <content type="html"><![CDATA[<h5 id="观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。"><a href="#观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。" class="headerlink" title="观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。"></a>观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。</h5><a id="more"></a><h5 id="观察者模式又叫做-发布—订阅模式-，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计"><a href="#观察者模式又叫做-发布—订阅模式-，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计" class="headerlink" title="观察者模式又叫做 发布—订阅模式 ，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计"></a>观察者模式又叫做 <em>发布—订阅模式</em> ，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计</h5><h3 id="观察者模式（前端）"><a href="#观察者模式（前端）" class="headerlink" title="观察者模式（前端）"></a>观察者模式（前端）</h3><p><strong>定义</strong>：对象间的一种一对多的依赖关系。</p><p><strong>需求</strong>：当一个对象的状态发生变化时，所有依赖于他的对象都将得到通知。</p><p><strong>优点</strong>：时间上的解耦，对象之间的解耦。</p><p><strong>实现</strong>：</p><p>指定好谁充当发布者;<br>给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者;<br>发布消息的时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函数。<br>下面举个例子，比如我们给页面中的一个dom节点绑定一个事件，其实就可以看做是一种观察者模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> alert(<span class="string">&quot;Hello World&quot;</span>) </span><br><span class="line">&#125;，<span class="literal">false</span> ) </span><br><span class="line"><span class="built_in">document</span>.body.click() <span class="comment">//模拟用户点击 </span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在上面的例子中，需要监听用户点击 document.body 的动作，但是我们是没办法预知用户将在什么时候点击的，因此我们订阅了 document.body 的 click 事件，当 body 节点被点击时，body 节点便会向订阅者发布 “Hello World” 消息。</p><h3 id="观察者模式（后端）"><a href="#观察者模式（后端）" class="headerlink" title="观察者模式（后端）"></a>观察者模式（后端）</h3><p><img src="https://img-blog.csdnimg.cn/20200906170819998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中，Subject类是主题，它把所有对观察者对象的引用文件存在了一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供了一个接口，可以增加和删除观察者对象；Observer类是抽象观察者，为所有的具体观察者定义一个接口，在得到主题的通知时更新自己；ConcreteSubject类是具体主题，将有关状态存入具体观察者对象，在具体主题内部状态改变时，给所有登记过的观察者发出通知；ConcreteObserver是具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观察者数组</span></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; oVector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oVector.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oVector.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知所有观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer : <span class="keyword">this</span>.oVector) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>     <span class="comment">//更新</span></span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">super</span>.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息，进行处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个主题</span></span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        <span class="comment">//定义一个观察者</span></span><br><span class="line">        Observer observer = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line">        <span class="comment">//观察</span></span><br><span class="line">        subject.addObserver(observer);</span><br><span class="line">        <span class="comment">//开始活动</span></span><br><span class="line">        subject.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://img-blog.csdnimg.cn/2020090617253982.png#pic_center" alt="在这里插入图片描述"></p><h5 id="观察者模式的应用"><a href="#观察者模式的应用" class="headerlink" title="观察者模式的应用"></a>观察者模式的应用</h5><p>　　<strong>1. 何时使用</strong><br>一个对象状态改变，所有的依赖对象都将得到通知<br> 　　<strong>2. 方法</strong><br>使用面向对象技术<br> 　　<strong>3. 优点</strong><br>观察者和被观察者是抽象耦合的<br>建立了一套触发机制<br> 　　<strong>4. 缺点</strong><br>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间<br>如果观察者和观察目标间有循环依赖，可能导致系统崩溃<br>没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的<br> 　　<strong>5. 使用场景</strong><br>关联行为场景<br>事件多级触发场景<br>跨系统的消息变换场景，如消息队列的处理机制<br>　　<strong>6. 应用实例</strong><br>手机丢了，委托别人给其他人发消息通知<br>通知老师/老板来了<br>拍卖，拍卖师观察最高标价，然后通知给其它竞价者竞价<br>在一个目录下建立一个文件，会同时通知目录管理器增加目录，并通知磁盘减少空间，文件是被观察者，目录管理器和磁盘管理器是观察者<br>猫叫了一声，吓着了老鼠，也惊到了主人，猫是被观察者，老鼠和人是观察者<br>　　<strong>7. 注意事项</strong><br>避免循环引用<br>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式</p><p>参考： <a href="https://www.cnblogs.com/adamjwh/p/10913660.html">https://www.cnblogs.com/adamjwh/p/10913660.html</a></p><p>参考： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&quot;&gt;&lt;a href=&quot;#观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&quot; class=&quot;headerlink&quot; title=&quot;观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&quot;&gt;&lt;/a&gt;观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&lt;/h5&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="观察者模式" scheme="http://yoursite.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---代理模式</title>
    <link href="http://yoursite.com/2020/09/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-05T09:48:31.563Z</published>
    <updated>2020-09-05T09:49:17.065Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。"><a href="#代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。" class="headerlink" title="代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。"></a>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</h4><a id="more"></a><h3 id="代理模式-前端"><a href="#代理模式-前端" class="headerlink" title="代理模式(前端)"></a>代理模式(前端)</h3><h4 id="代理模式的定义："><a href="#代理模式的定义：" class="headerlink" title="代理模式的定义："></a>代理模式的定义：</h4><p>代理模式主要是为其他对象提供一种代理以控制对这个对象的访问，主要解决在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上，在面向对象系统中，有些对象由于某些原因(比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问)，直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// 示例代码 </span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 目标对象，是真正被代理的对象 </span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"> Subject.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 代理对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>realSubject [持有被代理的具体的目标对象] </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Proxy</span>(<span class="params">realSubject</span>)</span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.realSubject = readSubject; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="built_in">Proxy</span>.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.realSubject.request(); </span><br><span class="line"> &#125;; </span><br><span class="line">&#125;()); </span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在上面的代码中，Proxy可以控制对真正被代理对象的一个访问，在代理模式中，比较常见的就是虚拟代理，虚拟代理用于控制对那种创建开销很大的本体的访问，它会把本体的实例化推迟到有方法被调用的时候，比如说，现在我们假设PublicLibrary的实例化很慢，不能在网页加载的时候立即完成，我们可以为其创建一个虚拟代理，让它把PublicLibrary的实例化推迟到必要的时候，比如说我们在前端中经常用到的图片懒加载，就可以用虚拟代理</p><h3 id="代理模式-后端"><a href="#代理模式-后端" class="headerlink" title="代理模式(后端)"></a>代理模式(后端)</h3><h4 id="为什么要用代理模式"><a href="#为什么要用代理模式" class="headerlink" title="为什么要用代理模式"></a>为什么要用代理模式</h4><p>中介隔离作用：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。<br>开闭原则，增加功能：代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服务。真正的业务功能还是由委托类来实现，但是可以在业务功能执行的前后加入一些公共的服务。例如我们想给项目加入缓存、日志这些功能，我们就可以使用代理类来完成，而没必要打开已经封装好的委托类。</p><h4 id="分为两种：静态代理、动态代理。"><a href="#分为两种：静态代理、动态代理。" class="headerlink" title="分为两种：静态代理、动态代理。"></a>分为两种：静态代理、动态代理。</h4><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>是由程序员创建或特定工具自动生成源代码，在对其编译。在程序员运行之前，代理类.class文件就已经被创建了。动态代理是在程序运行时通过反射机制动态创建的。<br>1.静态代理     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 第一步：创建服务类接口</span><br><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 4  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 5  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Date</span>: 22:40 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 7  */</span></span><br><span class="line"> <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span>     <span class="function"><span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><p>第二步：实现服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 4  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 5  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Date</span>: 22:42 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 7  */</span></span><br><span class="line"> <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHouseImpl</span> <span class="keyword">implements</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">11</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">12</span>         System.out.println(<span class="string">&quot;我要买房&quot;</span>);</span><br><span class="line"><span class="number">13</span>     &#125;</span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure><p>第三步：创建代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 7  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Date</span>: 22:43 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 9  */</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHouseProxy</span> <span class="keyword">implements</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span>     <span class="keyword">private</span> BuyHouse buyHouse;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span>     <span class="function"><span class="keyword">public</span> <span class="title">BuyHouseProxy</span><span class="params">(<span class="keyword">final</span> BuyHouse buyHouse)</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>         <span class="keyword">this</span>.buyHouse = buyHouse;</span><br><span class="line"><span class="number">16</span>     &#125;</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">19</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">20</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">21</span>         buyHouse.buyHosue();</span><br><span class="line"><span class="number">22</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     &#125;</span><br><span class="line"><span class="number">25</span> &#125;</span><br></pre></td></tr></table></figure><p>第四步：编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> main.java.proxy.impl.BuyHouseImpl;</span><br><span class="line"><span class="keyword">import</span> main.java.proxy.impl.BuyHouseProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 22:43 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line">        buyHouse.buyHosue();</span><br><span class="line">        BuyHouseProxy buyHouseProxy = <span class="keyword">new</span> BuyHouseProxy(buyHouse);</span><br><span class="line">        buyHouseProxy.buyHosue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态代理总结："><a href="#静态代理总结：" class="headerlink" title="静态代理总结："></a>静态代理总结：</h5><p>优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。<br>缺点：我们得为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。 </p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>　　在动态代理中我们不再需要再手动的创建代理类，我们只需要编写一个动态处理器就可以了。真正的代理对象由JDK再运行时为我们动态的来创建。</p><p>第一步：编写动态处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 7  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 9  * <span class="doctag">@Date</span>: 20:34 2018/1/12 0012</span></span><br><span class="line"><span class="comment">10  */</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span>     <span class="keyword">private</span> Object object;</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(<span class="keyword">final</span> Object object)</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>         <span class="keyword">this</span>.object = object;</span><br><span class="line"><span class="number">17</span>     &#125;</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">20</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="number">21</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">22</span>         Object result = method.invoke(object, args);</span><br><span class="line"><span class="number">23</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">24</span>         <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">25</span>     &#125;</span><br><span class="line"><span class="number">26</span> &#125;</span><br></pre></td></tr></table></figure><p>第二步：编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.test;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> main.java.proxy.impl.BuyHouseImpl;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> main.java.proxy.impl.DynamicProxyHandler;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment">11  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">12  * <span class="doctag">@Date</span>: 20:38 2018/1/12 0012</span></span><br><span class="line"><span class="comment">13  */</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>         BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line"><span class="number">17</span>         BuyHouse proxyBuyHouse = (BuyHouse) Proxy.newProxyInstance(BuyHouse.class.getClassLoader(), <span class="keyword">new</span></span><br><span class="line"><span class="number">18</span>                 Class[]&#123;BuyHouse.class&#125;, <span class="keyword">new</span> DynamicProxyHandler(buyHouse));</span><br><span class="line"><span class="number">19</span>         proxyBuyHouse.buyHosue();</span><br><span class="line"><span class="number">20</span>     &#125;</span><br><span class="line"><span class="number">21</span> &#125;</span><br></pre></td></tr></table></figure><p> 注意Proxy.newProxyInstance()方法接受三个参数：</p><ul><li>ClassLoader loader:指定当前目标对象使用的类加载器,获取加载器的方法是固定的</li><li>Class&lt;?&gt;[] interfaces:指定目标对象实现的接口的类型,使用泛型方式确认类型</li><li>InvocationHandler:指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法</li></ul><h5 id="动态代理总结："><a href="#动态代理总结：" class="headerlink" title="动态代理总结："></a>动态代理总结：</h5><p>虽然相对于静态代理，动态代理大大减少了我们的开发任务，同时减少了对业务接口的依赖，降低了耦合度。但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持interface代理的桎梏，因为它的设计注定了这个遗憾。回想一下那些动态生成的代理类的继承关系图，它们已经注定有一个共同的父类叫Proxy。Java的继承机制注定了这些动态代理类们无法实现对class的动态代理，原因是多继承在Java中本质上就行不通。有很多条理由，人们可以否定对 class代理的必要性，但是同样有一些理由，相信支持class动态代理会更美好。接口和类的划分，本就不是很明显，只是到了Java中才变得如此的细化。如果只从方法的声明及是否被定义来考量，有一种两者的混合体，它的名字叫抽象类。实现对抽象类的动态代理，相信也有其内在的价值。此外，还有一些历史遗留的类，它们将因为没有实现任何接口而从此与动态代理永世无缘。如此种种，不得不说是一个小小的遗憾。但是，不完美并不等于不伟大，伟大是一种本质，Java动态代理就是佐例。</p><h4 id="CGLIB代理"><a href="#CGLIB代理" class="headerlink" title="CGLIB代理"></a>CGLIB代理</h4><pre><code>   JDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要CGLib了。CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。但因为采用的是继承，所以不能对final修饰的类进行代理。JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。</code></pre><p>第一步：创建CGLIB代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> dan.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment">11  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">12  * <span class="doctag">@Date</span>: 20:38 2018/1/16 0016</span></span><br><span class="line"><span class="comment">13  */</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>     <span class="keyword">private</span> Object target;</span><br><span class="line"><span class="number">16</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(<span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line"><span class="number">17</span>         <span class="keyword">this</span>.target = target;</span><br><span class="line"><span class="number">18</span>         Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="number">19</span>         enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());</span><br><span class="line"><span class="number">20</span>         enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="number">21</span>         <span class="keyword">return</span> enhancer.create();</span><br><span class="line"><span class="number">22</span>     &#125;</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="number">25</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">26</span>         Object result = methodProxy.invoke(object, args);</span><br><span class="line"><span class="number">27</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">28</span>         <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">29</span>     &#125;</span><br><span class="line"><span class="number">30</span> &#125;</span><br></pre></td></tr></table></figure><p>第二步：创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">package</span> dan.proxy.test;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> dan.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> dan.proxy.impl.BuyHouseImpl;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> dan.proxy.impl.CglibProxy;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 9  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Date</span>: 20:52 2018/1/16 0016</span></span><br><span class="line"><span class="comment">11  */</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="number">14</span>         BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line"><span class="number">15</span>         CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line"><span class="number">16</span>         BuyHouseImpl buyHouseCglibProxy = (BuyHouseImpl) cglibProxy.getInstance(buyHouse);</span><br><span class="line"><span class="number">17</span>         buyHouseCglibProxy.buyHosue();</span><br><span class="line"><span class="number">18</span>     &#125;</span><br><span class="line"><span class="number">19</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&quot;&gt;&lt;a href=&quot;#代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&quot; class=&quot;headerlink&quot; title=&quot;代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&quot;&gt;&lt;/a&gt;代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&lt;/h4&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---单例模式</title>
    <link href="http://yoursite.com/2020/09/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-05T08:42:24.004Z</published>
    <updated>2020-09-05T08:47:13.198Z</updated>
    
    <content type="html"><![CDATA[<h4 id="将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。"><a href="#将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。" class="headerlink" title="将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。"></a>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。</h4><a id="more"></a><h2 id="单例模式（前端）"><a href="#单例模式（前端）" class="headerlink" title="单例模式（前端）"></a>单例模式（前端）</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>是保证一个类只有一个实例，并且提供一个访问它的全局访问点。</p><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器中的window对象、登录浮窗等。</p><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>用一个变量标识当前是否已经为某个类创建过对象，如果是，则在下一次获取这个类的实例时，直接返回之前创建的对象。</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>可以用来划分命名空间，减少全局变量的数量<br>可以被实例化，且实例化一次，再次实例化生成的也是***个实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> single = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> unique; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// 如果该实例存在，则直接返回，否则就对其实例化 </span></span><br><span class="line"> <span class="keyword">if</span>( unique === <span class="literal">undefined</span> )&#123; </span><br><span class="line"> unique = <span class="keyword">new</span> Construct(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> unique; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Construct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// ... 生成单例的构造函数的代码 </span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line"> getInstance : getInstance </span><br><span class="line"> &#125; </span><br><span class="line">&#125;)(); </span><br></pre></td></tr></table></figure><p>在上面的代码中，我们可以使用single.getInstance来获取到单例，并且每次调用均获取到同一个单例，在我们平时的开发中，我们也经常会用到这种模式，比如当我们单击登录按钮的时候，页面中会出现一个登录框，而这个浮窗是唯一的，无论单击多少次登录按钮，这个浮窗只会被创建一次，因此这个登录浮窗就适合用单例模式。</p><h2 id="单例模式（后端）"><a href="#单例模式（后端）" class="headerlink" title="单例模式（后端）"></a>单例模式（后端）</h2><p>Java开发过程中，很多场景下都会碰到或要用到单例模式，在设计模式里也是经常作为指导学习的热门模式之一，相信每位开发同事都用到过。我们总是沿着前辈的足迹去做设定好的思路，往往没去探究为何这么做，所以这篇文章对单例模式做了详解。</p><h3 id="单例模式定义："><a href="#单例模式定义：" class="headerlink" title="单例模式定义："></a>单例模式定义：</h3><p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p><h3 id="单例模式特点："><a href="#单例模式特点：" class="headerlink" title="单例模式特点："></a>单例模式特点：</h3><p>　　1、单例类只能有一个实例。<br>　　2、单例类必须自己创建自己的唯一实例。<br>　　3、单例类必须给所有其他对象提供这一实例。</p><p>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</p><h3 id="线程安全的问题"><a href="#线程安全的问题" class="headerlink" title="线程安全的问题"></a>线程安全的问题</h3><p>一方面在获取单例的时候，要保证不能产生多个实例对象，后面会详细讲到五种实现方式；</p><p>另一方面，在使用单例对象的时候，要注意单例对象内的实例变量是会被多线程共享的，推荐使用无状态的对象，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题，比如我们常用的VO，DTO等（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题）。</p><h3 id="单例模式的选择"><a href="#单例模式的选择" class="headerlink" title="单例模式的选择"></a>单例模式的选择</h3><p>还记得我们最早使用的MVC框架Struts1中的action就是单例模式的，而到了Struts2就使用了多例。在Struts1里，当有多个请求访问，每个都会分配一个新线程，在这些线程，操作的都是同一个action对象，每个用户的数据都是不同的，而action却只有一个。到了Struts2， action对象为每一个请求产生一个实例，并不会带来线程安全问题（实际上servlet容器给每个请求产生许多可丢弃的对象，但是并没有影响到性能和垃圾回收问题，有时间会做下研究）。</p><h3 id="实现单例模式的方式"><a href="#实现单例模式的方式" class="headerlink" title="实现单例模式的方式"></a>实现单例模式的方式</h3><h4 id="饿汉式单例（立即加载方式）"><a href="#饿汉式单例（立即加载方式）" class="headerlink" title="饿汉式单例（立即加载方式）"></a>饿汉式单例（立即加载方式）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饿汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式单例在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。</p><p>Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且闭着眼就认为反射机制不存在。）</p><h4 id="懒汉式单例（延迟加载方式）"><a href="#懒汉式单例（延迟加载方式）" class="headerlink" title="懒汉式单例（延迟加载方式）"></a>懒汉式单例（延迟加载方式）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该示例虽然用延迟加载方式实现了懒汉式单例，但在多线程环境下会产生多个single对象，如何改造请看以下方式:</p><h4 id="使用synchronized同步锁"><a href="#使用synchronized同步锁" class="headerlink" title="使用synchronized同步锁"></a>使用synchronized同步锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等同于 synchronized public static Singleton3 getInstance()</span></span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton3.class)&#123;</span><br><span class="line">          <span class="comment">// 注意：里面的判断是一定要加的，否则出现线程安全问题</span></span><br><span class="line">            <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">                single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    single = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p><h4 id="静态内部类实现"><a href="#静态内部类实现" class="headerlink" title="静态内部类实现"></a>静态内部类实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObject</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObject.single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。这种情况不多做说明了，使用时请注意。</p><h4 id="static静态代码块实现"><a href="#static静态代码块实现" class="headerlink" title="static静态代码块实现"></a>static静态代码块实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内部枚举类实现"><a href="#内部枚举类实现" class="headerlink" title="内部枚举类实现"></a>内部枚举类实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> EnmuSingleton&#123;</span><br><span class="line">        Singleton;</span><br><span class="line">        <span class="keyword">private</span> Singleton8 singleton;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//枚举类的构造方法在类加载是被实例化 </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnmuSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton8();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton8 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton8 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EnmuSingleton.Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton8</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton8</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考： <a href="https://www.cnblogs.com/garryfu/p/7976546.html">https://www.cnblogs.com/garryfu/p/7976546.html</a><br>参考： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a><br>参考： <a href="https://www.cnblogs.com/binaway/p/8889184.html">https://www.cnblogs.com/binaway/p/8889184.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。&quot;&gt;&lt;a href=&quot;#将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。&quot; class=&quot;headerlink&quot; title=&quot;将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。&quot;&gt;&lt;/a&gt;将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。&lt;/h4&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="单例模式" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---工厂模式</title>
    <link href="http://yoursite.com/2020/09/04/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/04/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-04T11:02:23.572Z</published>
    <updated>2020-09-04T11:10:27.674Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式包括简单工厂，工厂方法，抽象工厂，这里分别介绍前后端工厂模式以及示例</p><a id="more"></a><h2 id="（前端）工厂模式"><a href="#（前端）工厂模式" class="headerlink" title="（前端）工厂模式"></a>（前端）工厂模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>简单工厂模式又叫静态工厂模式，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象<br><strong>简单工厂在调用return new的时候使用</strong><br>比如说，在实际的项目中，我们常常需要根据用户的权限来渲染不同的页面，高级权限的用户所拥有的页面有些是无法被低级权限的用户所查看，所以我们可以在不同权限等级用户的构造函数中，保存该用户能够看到的页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span> (<span class="params">role</span>) </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SuperAdmin</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">NormalUser</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">switch</span> (role) &#123; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;superAdmin&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SuperAdmin(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;admin&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Admin(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;user&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> NormalUser(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">default</span>: </span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;参数错误, 可选参数:superAdmin、admin、user&#x27;</span>); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;superAdmin&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;admin&#x27;</span>)  </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;user&#x27;</span>) </span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在上面的例子中，UserFactory就是一个简单工厂，在该函数中有3个构造函数分别对应不同的权限的用户，当我们调用工厂函数时，只需要传递superAdmin, admin, user这三个可选参数中的一个获取对应的实例对象</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>简单工厂的优点在于，你只需要一个正确的参数，就可以获取到你所需要的对象，而无需知道其创建的具体细节;</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>在函数内包含了所有对象的创建逻辑(构造函数)和判断逻辑的代码，每增加新的构造函数还需要修改判断逻辑代码，我们的对象不是上面的3个而是30个或更多时，这个函数会成为一个庞大的超级函数，便得难以维护，简单工厂只能作用于创建的对象数量较少，<strong>对象的创建逻辑不复杂时使用</strong>;</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全模式创建的工厂方法函数 </span></span><br><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span>(<span class="params">role</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">this</span> <span class="keyword">instanceof</span> UserFactory) &#123; </span><br><span class="line"> <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">this</span>[role](); </span><br><span class="line"> <span class="keyword">return</span> s; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> UserFactory(role); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//工厂方法函数的原型中设置所有对象的构造函数 </span></span><br><span class="line">UserFactory.prototype = &#123; </span><br><span class="line"> SuperAdmin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>] </span><br><span class="line"> &#125;, </span><br><span class="line"> Admin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>] </span><br><span class="line"> &#125;, </span><br><span class="line"> NormalUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;SuperAdmin&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;Admin&#x27;</span>)  </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;NormalUser&#x27;</span>) </span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在简单工厂中，如果我们新增加一个用户类型，需要修改两个地方的代码，一个是增加新的用户构造函数，一个是在逻辑判断中增加对新的用户的判断，而在抽象工厂方法中，我们只需要在UserFactory.prototype中添加就可以啦。</p><h2 id="（后端）工厂模式"><a href="#（后端）工厂模式" class="headerlink" title="（后端）工厂模式"></a>（后端）工厂模式</h2><p>（1）简单工厂（Simple Factory）模式，又称静态工厂方法模式（Static Factory Method Pattern）。</p><p>（2）工厂方法（Factory Method）模式，又称多态性工厂（Polymorphic Factory）模式或虚拟构造子（Virtual Constructor）模式；</p><p>（3）抽象工厂（Abstract Factory）模式，又称工具箱（Kit 或Toolkit）模式。</p><h4 id="为什么要用工厂模式"><a href="#为什么要用工厂模式" class="headerlink" title="为什么要用工厂模式"></a>为什么要用工厂模式</h4><p>(1) 解耦 ：把对象的创建和使用的过程分开</p><p>(2)降低代码重复: 如果创建某个对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码。</p><p>(3) 降低维护成本 ：由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>（1）需要创建的对象较少。</p><p>（2）客户端不关心对象的创建过程。</p><h3 id="简单工厂-1"><a href="#简单工厂-1" class="headerlink" title="简单工厂"></a>简单工厂</h3><h4 id="Override是什么注解"><a href="#Override是什么注解" class="headerlink" title="@Override是什么注解"></a>@Override是什么注解</h4><p>@Override 的作bai用是：如果想重写父类的方du法，比如toString()方法的话zhi，在方法前面加上@Override 系统dao可以帮你检查方法的正确性。</p><p>（1）创建Shape接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建实现该接口的具体图形类</p><p>圆形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长方形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正方形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）创建工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (shapeType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape circle = ShapeFactory.getShape(<span class="string">&quot;CIRCLE&quot;</span>);</span><br><span class="line">        circle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape rectangle = ShapeFactory.getShape(<span class="string">&quot;RECTANGLE&quot;</span>);</span><br><span class="line">        rectangle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape square = ShapeFactory.getShape(<span class="string">&quot;SQUARE&quot;</span>);</span><br><span class="line">        square.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Circle</span><br><span class="line">Draw Circle</span><br><span class="line">Rectangle</span><br><span class="line">Draw Rectangle</span><br><span class="line">Square</span><br><span class="line">Draw Square</span><br></pre></td></tr></table></figure><p>这样的实现有个问题，如果我们新增产品类的话，就需要修改工厂类中的<code>getShape（）</code>方法，这很明显不符合 开放-封闭原则 。</p><h3 id="工厂方法-1"><a href="#工厂方法-1" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可。</p><p>(1)增加一个工厂接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）增加相关工厂类:</p><p>圆形工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长方形工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圆形工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory circlefactory = <span class="keyword">new</span> CircleFactory();</span><br><span class="line">        Shape circle = circlefactory.getShape();</span><br><span class="line">        circle.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Circle</span><br><span class="line">Draw Circle</span><br></pre></td></tr></table></figure><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。<br>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏<br>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><h4 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h4><p>和工厂方法一样客户端不需要知道它所创建的对象的类。<br>需要一组对象共同完成某种功能时，并且可能存在多组对象完成不同功能的情况。（同属于同一个产品族的产品）<br>系统结构稳定，不会频繁的增加对象。（因为一旦增加就需要修改原有代码，不符合开闭原则）<br><strong>场景：</strong><br>不知道大家玩过穿越火线或者吃鸡这类游戏了吗，游戏中存在各种枪。我们假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）</p><h4 id="抽象工厂模式实例"><a href="#抽象工厂模式实例" class="headerlink" title="抽象工厂模式实例"></a>抽象工厂模式实例</h4><p>（1）创建相关接口：</p><p>枪</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子弹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建接口对应实现类：</p><p>AK类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK</span> <span class="keyword">implements</span> <span class="title">Gun</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;shooting with AK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>M4A1类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1</span> <span class="keyword">implements</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;shooting with M4A1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AK子弹类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK_Bullet</span> <span class="keyword">implements</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Load bullets with AK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>M4A1子弹类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1</span></span></span><br><span class="line"><span class="class"><span class="title">_Bullet</span> <span class="keyword">implements</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Load bullets with M4A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）创建工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）创建具体工厂</p><p>生产AK和AK子弹的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK_Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AK();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AK_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产M4A1和M4A1子弹的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1_Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> M4A1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> M4A1_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">     Factory factory;</span><br><span class="line">     Gun gun;</span><br><span class="line">     Bullet bullet;</span><br><span class="line"></span><br><span class="line">     factory =<span class="keyword">new</span> AK_Factory();</span><br><span class="line">     bullet=factory.produceBullet();</span><br><span class="line">     bullet.load();</span><br><span class="line">     gun=factory.produceGun();</span><br><span class="line">     gun.shooting(); </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Load bullets with AK</span><br><span class="line">shooting with AK</span><br></pre></td></tr></table></figure><p>参考文章： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a><br>                   <a href="https://www.imooc.com/article/31360">https://www.imooc.com/article/31360</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工厂模式包括简单工厂，工厂方法，抽象工厂，这里分别介绍前后端工厂模式以及示例&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="工厂模式" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GIT篇---4.使用 diff 查看修改了哪些代码，分支管理(Windows系统)</title>
    <link href="http://yoursite.com/2020/08/31/git4/"/>
    <id>http://yoursite.com/2020/08/31/git4/</id>
    <published>2020-08-31T10:12:16.927Z</published>
    <updated>2020-08-31T10:16:56.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-名词定义"><a href="#1-名词定义" class="headerlink" title="1.名词定义"></a>1.名词定义</h2><a id="more"></a><p>在学习 Git 的diff命令之前，我们先来统一 一下两个名词的理解，分别是工作区和暂存区。</p><h3 id="1-1-工作区"><a href="#1-1-工作区" class="headerlink" title="1.1 工作区"></a>1.1 工作区</h3><p>工作区，指的是当前正在编辑的文件，将还没有修改的内容通过git add命令暂存起来；比如我现在修改了index.php文件中的一行代码，没有执行git add index.php命令，那么 index.php 便处于工作区状态。</p><h3 id="1-2-暂存区"><a href="#1-2-暂存区" class="headerlink" title="1.2 暂存区"></a>1.2 暂存区</h3><p>暂存区，指的是文件修改之后并且通过git add命令临时存储到版本记录里了，但还没有正式通过git commit提交的阶段；比如我现在新增一个test.php文件，使用了git add test.php命令，那么此时， test.php 文件的改动就已经进入到了暂存区。</p><h3 id="1-3-比较工作区变动"><a href="#1-3-比较工作区变动" class="headerlink" title="1.3 比较工作区变动"></a>1.3 比较工作区变动</h3><p>现在我编辑了index.php文件，并且在里面加入了内容，如果我想通过 git 命令查看增加了哪些内容，参考命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff </span><br></pre></td></tr></table></figure><h3 id="1-4-比较暂存区变动"><a href="#1-4-比较暂存区变动" class="headerlink" title="1.4  比较暂存区变动"></a>1.4  比较暂存区变动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached  diff.php</span><br></pre></td></tr></table></figure><h3 id="1-5-与指定记录比较"><a href="#1-5-与指定记录比较" class="headerlink" title="1.5 与指定记录比较"></a>1.5 与指定记录比较</h3><p>有些时候，我们可能需要代码和历史的某一个版本进行比较，这个时候你可以先通过<code>git log</code></p><h3 id="1-6-工作区比较"><a href="#1-6-工作区比较" class="headerlink" title="1.6 工作区比较"></a>1.6 工作区比较</h3><p>将要比较的 hash 值复制下来，然后执行如下所示命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure><h3 id="1-7-暂存区比较"><a href="#1-7-暂存区比较" class="headerlink" title="1.7 暂存区比较"></a>1.7 暂存区比较</h3><p>有些时候，我们想把暂存区的改动和指定记录进行对比，那么在命令中加入–cached 即可，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached <span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure><h3 id="1-8-与最新版本库比较"><a href="#1-8-与最新版本库比较" class="headerlink" title="1.8 与最新版本库比较"></a>1.8 与最新版本库比较</h3><p>很多时候，我们只需要将未正式提交的代码（包含工作区与暂存区）与最新的 commit 记录进行比较，虽然也可以通过指定 commit 的 hash 值进行，但是却很不方便，需要先获取到 hash 值，这里介绍一个简单的方法，可以通过git diff HEAD命令方式快速对比，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><p>在执行的命令中，HEAD指的是当前所在的分支名，如果你想比较其他分支也可以将 HEAD 改成其他分支名。</p><h3 id="1-9-比较两个历史记录"><a href="#1-9-比较两个历史记录" class="headerlink" title="1.9 比较两个历史记录"></a>1.9 比较两个历史记录</h3><p>有时候，可能会需要查看某一次提交记录修改了什么内容，这个时候就需要将两个历史记录进行比较；首先通过git log命令获取到需要查看的记录 hash 值，然后再找到这个记录的上一个版本的 hash 值，拼接的参考命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="built_in">hash</span>值1  <span class="built_in">hash</span>值2</span><br></pre></td></tr></table></figure><h2 id="2-分支管理"><a href="#2-分支管理" class="headerlink" title="2.分支管理"></a>2.分支管理</h2><h3 id="2-1查看分支"><a href="#2-1查看分支" class="headerlink" title="2.1查看分支"></a>2.1查看分支</h3><p>在学习分支管理之前，我们先来查看一下分支。分支分为两种，一种是本地已经存在的，还有一种是服务器上有，但本地不存在的分支，查看的方式稍有区别。</p><h3 id="2-2查看本地的分支"><a href="#2-2查看本地的分支" class="headerlink" title="2.2查看本地的分支"></a>2.2查看本地的分支</h3><p>Git 查看分支的命令为 git branch，在不带参数的情况下，默认查看到的是本地分支列表，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><h4 id="2-3查看所有分支"><a href="#2-3查看所有分支" class="headerlink" title="2.3查看所有分支"></a>2.3查看所有分支</h4><p>在 git branch 中再加入一个 -a 参数，可以理解为 all 的意思，就是查看本地的分支和远程的所有分支，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a </span><br></pre></td></tr></table></figure><h3 id="2-4新建分支"><a href="#2-4新建分支" class="headerlink" title="2.4新建分支"></a>2.4新建分支</h3><p>新建分支有两种情况，第一种是远程已经有的分支，需要把它在本地也同样创建一份；还有一种是新建一个远端和本地都不存在的分支。</p><h4 id="2-4-1导入远程分支"><a href="#2-4-1导入远程分支" class="headerlink" title="2.4.1导入远程分支"></a>2.4.1导入远程分支</h4><p>把远程分支在本地创建，可以通过 <code>git checkout</code> 分支名 命令进行，<strong>这个命令其实是切换分支用的</strong>。但当它发现你本地不存在这个分支，会自动找到远程对应的分支然后在本地进行创建，参考命令如下所示：<br>（在执行前，需要确保这个分支在远程或者本地已经存在）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>切换分支成功之后，会提示已经切换分支成功，以及提示你当前分支对应远程的分支名</p><h4 id="2-4-2-新建本地分支"><a href="#2-4-2-新建本地分支" class="headerlink" title="2.4.2 新建本地分支"></a>2.4.2 新建本地分支</h4><p>新建一个远程和本地都不存在的分支方式，和切换分支区别不大，只需要在 <code>git checkout</code> 分支名 中间加入参数 <code>-b</code> 即可。通过这种方式，创建的分支结构和内容会与当前所在的分支一模一样，也就是说，它其实就是复制了当前的分支，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>在提示中，同样可以看到会告诉你切换分支成功，但没有提示你对应远程的分支名，因为远程现在还不存在这个分支。所以你此时如果使用 <code>git push</code> 是不能直接推送的，需要在第一次推送的时候指定远程分支名，参考命令如下图所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="2-5合并分支"><a href="#2-5合并分支" class="headerlink" title="2.5合并分支"></a>2.5合并分支</h3><p>假设我们现在有三个分支，分别是:master生产环境、develop开发环境、test bug 修复分支。现在我在 test 分支中修复了 BUG，需要发布到线上生产服务器上，那么我们就可以通过合并分支的方式将test分支的代码合并到 master 分支中去。</p><h4 id="2-5-1-合并代码"><a href="#2-5-1-合并代码" class="headerlink" title="2.5.1 合并代码"></a>2.5.1 合并代码</h4><p>合并的时候， Git 会对比两个分支代码的差异，当 test 分支处于比较新的状态时候，Git 会将 test 分支的代码和提交记录复制到 master 分支中来，合并代码的参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="2-5-2-查看合并记录"><a href="#2-5-2-查看合并记录" class="headerlink" title="2.5.2 查看合并记录"></a>2.5.2 查看合并记录</h4><p>在代码合并之后，可以通过 <code>git log</code> 方式查看到合并记录，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="2-5-3-删除分支"><a href="#2-5-3-删除分支" class="headerlink" title="2.5.3  删除分支"></a>2.5.3  删除分支</h4><p>一般用来修复 BUG 的分支，我们可以把它当做是一个临时分支，当合并到 master 之后，就可以删除掉它了，这样可以减少 Git 仓库的体积。删除分支有两种方式，普通删除和强制删除。</p><h5 id="2-5-3-1-普通删除"><a href="#2-5-3-1-普通删除" class="headerlink" title="2.5.3.1 普通删除"></a>2.5.3.1 普通删除</h5><p>Git 中删除分支的命令为<code>git branch -d</code> 分支名，其中参数-d代表的是普通删除。一般情况下，删除使用普通删除即可。普通删除相对来说比较安全，避免造成数据丢失的情况，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="2-5-3-2-强制删除"><a href="#2-5-3-2-强制删除" class="headerlink" title="2.5.3.2 强制删除"></a>2.5.3.2 强制删除</h5><p>在极少数情况下你可能会遇到普通删除无法将分支删除的情况，这个时候你可以将-d替换成-D，这样就可以进行强制删除，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-名词定义&quot;&gt;&lt;a href=&quot;#1-名词定义&quot; class=&quot;headerlink&quot; title=&quot;1.名词定义&quot;&gt;&lt;/a&gt;1.名词定义&lt;/h2&gt;</summary>
    
    
    
    <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GIT篇---3.如何把修改后的代码提交到远程仓库(Windows系统)</title>
    <link href="http://yoursite.com/2020/08/31/git3/"/>
    <id>http://yoursite.com/2020/08/31/git3/</id>
    <published>2020-08-31T09:48:53.962Z</published>
    <updated>2020-08-31T10:17:03.723Z</updated>
    
    <content type="html"><![CDATA[<h6 id="将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。"><a href="#将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。" class="headerlink" title="将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。"></a>将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。</h6><a id="more"></a><h2 id="1-同步远程代码"><a href="#1-同步远程代码" class="headerlink" title="1.同步远程代码"></a>1.同步远程代码</h2><p>一个远程仓库有可能有多人有权限推送，所以存在远程代码比你本地仓库更新，因此在提交代码之前需要先拉取服务器代码，让本地仓库保持最新的版本记录；这样做的目的是为了防止当你提交代码之后，推送到远端出现代码冲突问题，拉取远程代码参考命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull </span><br></pre></td></tr></table></figure><h2 id="2-检查改动文件"><a href="#2-检查改动文件" class="headerlink" title="2.检查改动文件"></a>2.检查改动文件</h2><p>当远端最新的代码拉下来之后，我们最好（非必须，建议每次提交前检查）通过git status命令检查一下有哪些文件被改动了，参考命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>在终端执行完命令之后，有删除的、有添加的、也有修改内容的</p><ul><li>Untracked: 未跟踪,一般为新增文件，此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作.</li><li>deleted： 文件已删除，本地删除，服务器上还没有删除.</li><li>renamed：文件名称被改变<br>如果发现无意中编辑了某一个文件，但实际上并不想改变它，这里可以使用git checkout 文件名来撤销更改，参考命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout README.md</span><br></pre></td></tr></table></figure><p>撤销后，再次使用<code>git status</code>进行查看变动</p><h2 id="3-添加文件到缓存"><a href="#3-添加文件到缓存" class="headerlink" title="3.添加文件到缓存"></a>3.添加文件到缓存</h2><p>通过检查并将不需要改动的代码恢复后，就可以开始将需要提交的文件添加到暂存区中，添加文件到暂存区可以指定添加文件或目录，或者一次性添加全部改动到缓存。<br>先来看看提交指定文件或目录至缓存的格式，参考命令如下：<code>git add index.php</code><br>也可以使用刚才的命令将 app目录,提交到缓存中去，参考命令如下：<code>git add app</code><br>如果一次性添加所有文件，那么可以把命令这样写<code>git add .</code>(记住有点)</p><h2 id="4-提交代码"><a href="#4-提交代码" class="headerlink" title="4. 提交代码"></a>4. 提交代码</h2><p>当你将所需要提交的代码都添加到缓存区域后，接下来就可以将代码提交到本地仓库中，参考命令如下所示 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit . -m “这是备注信息”</span><br></pre></td></tr></table></figure><h2 id="5-推送代码"><a href="#5-推送代码" class="headerlink" title="5.推送代码"></a>5.推送代码</h2><p>当代码提交之后，在本地的工作就已经完成了，此时为了让其他人拉取你的代码，通常还需要将代码推送到远程仓库，这里我告诉大家最简单的方式，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>]]></content>
    
    
    <summary type="html">&lt;h6 id=&quot;将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&quot;&gt;&lt;a href=&quot;#将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&quot; class=&quot;headerlink&quot; title=&quot;将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&quot;&gt;&lt;/a&gt;将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&lt;/h6&gt;</summary>
    
    
    
    <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
