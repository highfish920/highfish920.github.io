<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>highfish920的博客</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-20T14:08:00.659Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>highfish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux-安装hadoop集群（伪分布）</title>
    <link href="http://yoursite.com/2020/09/19/linux5/"/>
    <id>http://yoursite.com/2020/09/19/linux5/</id>
    <published>2020-09-19T09:11:42.371Z</published>
    <updated>2020-09-20T14:08:00.659Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装hadoop"><a href="#1-安装hadoop" class="headerlink" title="1. 安装hadoop"></a>1. 安装hadoop</h4><a id="more"></a><h3 id="安装hadoop集群"><a href="#安装hadoop集群" class="headerlink" title="安装hadoop集群"></a>安装hadoop集群</h3><h1 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h1><p>将压缩包复制到/usr目录下<br><img src="https://img-blog.csdnimg.cn/20200916181653488.png#pic_center" alt="在这里插入图片描述"><br>解压 <code>tar -zxvf 压缩包名字 -C /usr</code></p><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><p>2.1 查看所有文件<br><br><img src="https://img-blog.csdnimg.cn/20200916182622807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.2 修改<code>hadoop.env.sh</code><br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><img src="https://img-blog.csdnimg.cn/20200916191519637.png#pic_center" alt="在这里插入图片描述"></p><p>配置<br><img src="https://img-blog.csdnimg.cn/20200916202052584.png#pic_center" alt="在这里插入图片描述"></p><p>2.3 配置<code>core-site</code><br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi core-site.xml</code>0<br><img src="https://img-blog.csdnimg.cn/20200916201335778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/hadoop/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:<span class="comment">//gaoyu:9000&lt;/value&gt;</span></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>2.4<br>配置hdfs.site<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi hdfs-site.xml</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;gaoyu:50070&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;gaoyu2:50090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/hadoop/name&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.data.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/hadoop/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>2.5  配置mapred-site.xml<br>复制模板<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code> mv mapred-site.xml.template mapred-site.xml</code><br>修改配置<br><code>vi mapred-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20200919152452915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.6 配置yarn-env.sh<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi yarn-env.sh</code><br><img src="https://img-blog.csdnimg.cn/20200919152749131.png#pic_center" alt="在这里插入图片描述"><br>2.7 配置yarn-site.xml<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi yarn-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20200919152957416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>2.5 配置slaves<br><code>vi slaves</code><br><br><br><img src="https://img-blog.csdnimg.cn/20200916202751615.png#pic_center" alt="在这里插入图片描述"><br>2.6 配置hadoop环境变量<br>进入<code>/usr/hadoop/etc/hadoop</code>目录下<br><code>vi /etc/profile</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">export HADOOP CONF DIR=/usr/hadoop/etc/hadoop/</span><br></pre></td></tr></table></figure><p>刷新：<code>source /etc/profile</code><br>3. 复制文件到其他机器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/hadoop gaoyu1:/usr/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/hadoop gaoyu2:/usr/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile gaoyu1:/etc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile gaoyu2:/etc</span><br></pre></td></tr></table></figure><p>4.格式化hdfs<img src="https://img-blog.csdnimg.cn/20200916214504660.png#pic_center" alt="在这里插入图片描述"><br>5.启动hdfs<br><code>start-all.sh</code><br><img src="https://img-blog.csdnimg.cn/20200916222525347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>关闭：<code>stop-all.sh</code><br>查看：<img src="https://img-blog.csdnimg.cn/20200916222856304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200919150346397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-安装hadoop&quot;&gt;&lt;a href=&quot;#1-安装hadoop&quot; class=&quot;headerlink&quot; title=&quot;1. 安装hadoop&quot;&gt;&lt;/a&gt;1. 安装hadoop&lt;/h4&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux克隆虚拟机以及配置各台虚拟机，包括修改id，ssh免密登录，使用别名登录等</title>
    <link href="http://yoursite.com/2020/09/16/linux4/"/>
    <id>http://yoursite.com/2020/09/16/linux4/</id>
    <published>2020-09-16T10:01:59.547Z</published>
    <updated>2020-09-16T10:02:58.407Z</updated>
    
    <content type="html"><![CDATA[<h5 id="本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3"><a href="#本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3" class="headerlink" title="本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量https://highfish920.github.io/2020/09/16/linux3/"></a>本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量<a href="https://highfish920.github.io/2020/09/16/linux3/">https://highfish920.github.io/2020/09/16/linux3/</a></h5><a id="more"></a><h3 id="1-克隆虚拟机"><a href="#1-克隆虚拟机" class="headerlink" title="1.克隆虚拟机"></a>1.克隆虚拟机</h3><h4 id="1-1-选住要克隆的虚拟机-右键》管理》克隆"><a href="#1-1-选住要克隆的虚拟机-右键》管理》克隆" class="headerlink" title="1.1 选住要克隆的虚拟机  右键》管理》克隆"></a>1.1 选住要克隆的虚拟机  右键》管理》克隆<br><img src="https://img-blog.csdnimg.cn/20200916160911927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4><p>因为虚拟机是开着的所以无法克隆，所以先关闭虚拟机</p><h4 id="1-2关闭后再次选择克隆即可"><a href="#1-2关闭后再次选择克隆即可" class="headerlink" title="1.2关闭后再次选择克隆即可"></a>1.2关闭后再次选择克隆即可<br><img src="https://img-blog.csdnimg.cn/20200916161035587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4><p><img src="https://img-blog.csdnimg.cn/20200916161209120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择完整克隆<br><img src="https://img-blog.csdnimg.cn/20200916161313436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置名字和路劲<br><img src="https://img-blog.csdnimg.cn/20200916161410439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击完成<br><br><img src="https://img-blog.csdnimg.cn/20200916161533695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在克隆一台<br><br><img src="https://img-blog.csdnimg.cn/20200916161803308.png#pic_center" alt="在这里插入图片描述"><br>接下来启动三台虚拟机</p><h3 id="2-配置克隆的虚拟机"><a href="#2-配置克隆的虚拟机" class="headerlink" title="2.配置克隆的虚拟机"></a>2.配置克隆的虚拟机</h3><p>2.1 开启hadoop2<br><br><img src="https://img-blog.csdnimg.cn/2020091616235625.png#pic_center" alt="在这里插入图片描述"><br>2.2 输入 <code>vi /etc/udev/rules.d/70-persistent-net.rules</code><br><br><img src="https://img-blog.csdnimg.cn/20200916163200349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>修改：删除第一个，第二个把eth1改为eth0<br><img src="https://img-blog.csdnimg.cn/20200916163127599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.3 修改ip地址<br>输入<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code><br><br><br><img src="https://img-blog.csdnimg.cn/20200916163720605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>删除HWADDR，修改ip<br><br><img src="https://img-blog.csdnimg.cn/2020091616382131.png#pic_center" alt="在这里插入图片描述"><br>2.4 同理将hadoop3修改，这里修改的ip为192.168.50.148<br><img src="https://img-blog.csdnimg.cn/20200916165218690.png#pic_center" alt="在这里插入图片描述"><br>修改完输入 <code>reboot</code> 重启生效</p><p>测试ping百度也都成功<img src="https://img-blog.csdnimg.cn/20200916170304980.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3.关闭防火墙"></a>3.关闭防火墙</h3><p>3.1 使用MobaXterm 登录三台虚拟机<br><img src="https://img-blog.csdnimg.cn/20200916170759199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击这个可以同时操作<br><img src="https://img-blog.csdnimg.cn/20200916171015979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>3.2     查看状态 <code> service iptables status</code><br><img src="https://img-blog.csdnimg.cn/20200916171352391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>3.3 关闭防火墙<code>service iptables stop</code><br><img src="https://img-blog.csdnimg.cn/20200916171323630.png#pic_center" alt="在这里插入图片描述"><br>命令：<br><img src="https://img-blog.csdnimg.cn/20200916171407423.png#pic_center" alt="在这里插入图片描述"><br>3.4 彻底关闭防火墙以及查看<br><code>chkconfig iptables off</code><br><code>chkconfig --list iptables</code><br><img src="https://img-blog.csdnimg.cn/20200916171554193.png#pic_center" alt="在这里插入图片描述"></p><h4 id="4-关闭selinux-同样是三台一起操作"><a href="#4-关闭selinux-同样是三台一起操作" class="headerlink" title="4.关闭selinux(同样是三台一起操作)"></a>4.关闭selinux(同样是三台一起操作)</h4><p><code>vi /etc/selinux/config</code><br><img src="https://img-blog.csdnimg.cn/20200916171924852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>重启三台机器 <code>reboot</code></p><h3 id="5-修改主机名"><a href="#5-修改主机名" class="headerlink" title="5.修改主机名"></a>5.修改主机名</h3><p>输入 <code>vi /etc/sysconfig/network</code>将名字改为gaoyu1<br><img src="https://img-blog.csdnimg.cn/20200916172602350.png#pic_center" alt="在这里插入图片描述"><br>同理将hadoop机器改为gaoyu2<br>重启生效</p><h3 id="6-配置别名，用别名访问"><a href="#6-配置别名，用别名访问" class="headerlink" title="6.配置别名，用别名访问"></a>6.配置别名，用别名访问</h3><p>输入<code>vi /etc/hosts</code>配置别名<br><img src="https://img-blog.csdnimg.cn/20200916173339979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>测试通过可以通过名字ping通<br><img src="https://img-blog.csdnimg.cn/20200916173914608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="7-使用ssh免密登录"><a href="#7-使用ssh免密登录" class="headerlink" title="7.使用ssh免密登录"></a>7.使用ssh免密登录</h3><p>三台同时操作生成公钥和私钥<br><code>ssh-keygen -t rsa</code><br>按三次回车即可<br><img src="https://img-blog.csdnimg.cn/20200916174455288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接下来将第一台机器的秘钥拷贝到这三台机器，下面对第一台机器操作<br>输入<code>ssh-copy-id gaoyu</code>将秘钥拷贝到第一台机器上<br><img src="https://img-blog.csdnimg.cn/20200916174838286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接下来将其拷贝到其他两台机器<br><img src="https://img-blog.csdnimg.cn/20200916175020562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>测试：<img src="https://img-blog.csdnimg.cn/20200916175423760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他两台机器同理</p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3&quot;&gt;&lt;a href=&quot;#本文配置为hadoop搭建集群做准备，接上篇-linux配置java环境变量https-highfish920-github-io-2020-09-16-linux3&quot; class=&quot;headerlink&quot; title=&quot;本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量https://highfish920.github.io/2020/09/16/linux3/&quot;&gt;&lt;/a&gt;本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量&lt;a href=&quot;https://highfish920.github.io/2020/09/16/linux3/&quot;&gt;https://highfish920.github.io/2020/09/16/linux3/&lt;/a&gt;&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 配置java环境变量</title>
    <link href="http://yoursite.com/2020/09/16/linux3/"/>
    <id>http://yoursite.com/2020/09/16/linux3/</id>
    <published>2020-09-16T05:10:08.443Z</published>
    <updated>2020-09-16T05:10:54.059Z</updated>
    
    <content type="html"><![CDATA[<h5 id="linux配置java环境变量"><a href="#linux配置java环境变量" class="headerlink" title="linux配置java环境变量"></a>linux配置java环境变量</h5><a id="more"></a><p>jdk对应版本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1--hWO9IORgtywZ0UBquELQ </span><br><span class="line">提取码：vm7w</span><br></pre></td></tr></table></figure><ol><li>先查看本身是否安装有jdk，如有则卸载<br>查看： <code>rpm -qa | grep java</code><br>没有下一步 有卸载<br>如：<img src="https://img-blog.csdnimg.cn/20200916124734230.png#pic_center" alt="在这里插入图片描述"><br>使用 <code>rpm -e --nodeps</code> 名称 卸载</li><li>新建目录 <code>/usr/java</code><br>命令： <code>mkdir /usr/java</code><br>查看是否创建成功 <code>ll /usr</code><br><img src="https://img-blog.csdnimg.cn/20200916125000350.png#pic_center" alt="在这里插入图片描述"></li></ol><p>3.</p><ul><li>利用MobaXterm_CHS工具将jdk复制到此目录下即可</li><li>或者通过命令：先到创建的目录下 <code>cd /usr/java</code><pre><code>                      `pwd` 查看是否在当前目录下                      再利用MobaXterm_CHS工具将jdk复制到此目录下</code></pre><ul><li><code>ll</code> 查看是否上传成功</li></ul><ol start="3"><li>解压 <code>tar -zxvf jdk名字 -C /usr/java</code><img src="https://img-blog.csdnimg.cn/20200916125557405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>配置环境变量<br>打开<code>/etc/profile</code>文件   <code>vi /etc/profile</code>到最底部添加配置</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#new java environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_161</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200916130107713.png#pic_center" alt="在这里插入图片描述"><br>刷新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200916130153791.png#pic_center" alt="在这里插入图片描述"><br>测试：<br>输入 <code>java -version</code> 显示版本为成功<br><img src="https://img-blog.csdnimg.cn/2020091613025025.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;linux配置java环境变量&quot;&gt;&lt;a href=&quot;#linux配置java环境变量&quot; class=&quot;headerlink&quot; title=&quot;linux配置java环境变量&quot;&gt;&lt;/a&gt;linux配置java环境变量&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos6.5安装步骤</title>
    <link href="http://yoursite.com/2020/09/09/linux2/"/>
    <id>http://yoursite.com/2020/09/09/linux2/</id>
    <published>2020-09-09T15:14:02.812Z</published>
    <updated>2020-09-09T15:23:29.106Z</updated>
    
    <content type="html"><![CDATA[<h5 id="centos6-5安装步骤"><a href="#centos6-5安装步骤" class="headerlink" title="centos6.5安装步骤"></a>centos6.5安装步骤</h5><a id="more"></a><ol><li><p>下载centos6.5 网址：<a href="https://blog.csdn.net/huchunlinnk/article/details/45038025">https://blog.csdn.net/huchunlinnk/article/details/45038025</a><hr></p></li><li><p>安装vmware 网址： <a href="https://my.vmware.com/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_fusion/10_0">https://my.vmware.com/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_fusion/10_0</a><hr></p></li><li><p>打开vmware 新建虚拟机，选择典型<br><hr><img src="https://img-blog.csdnimg.cn/20200909170531877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选择稍后安装<br><hr><img src="https://img-blog.csdnimg.cn/20200909170709460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选择操作系统<br><hr><img src="https://img-blog.csdnimg.cn/20200909170822618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>命名虚拟机以及安装位置<br><hr><img src="https://img-blog.csdnimg.cn/20200909171029368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>默认，下一步<br><hr><img src="https://img-blog.csdnimg.cn/20200909171145383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>完成<br><hr><img src="https://img-blog.csdnimg.cn/20200909171216860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><hr><img src="https://img-blog.csdnimg.cn/20200909171257548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选住虚拟机右键，设置，可配置内存<br><hr><img src="https://img-blog.csdnimg.cn/20200909171356567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>配置CD/DVD  选择自己的镜像位置<br><hr><img src="https://img-blog.csdnimg.cn/20200909171629665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>网络适配器选择NAT<br><hr><img src="https://img-blog.csdnimg.cn/20200909171935596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>选择住自己的虚拟机，点击开启<br><hr><img src="https://img-blog.csdnimg.cn/20200909172035123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>开始安装</strong></p></li><li><p>回车<br><hr><img src="https://img-blog.csdnimg.cn/2020090917223080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol><p>选择skip<br><hr><img src="https://img-blog.csdnimg.cn/20200909172309792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>next<br><hr><img src="https://img-blog.csdnimg.cn/20200909172941638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择中文简体<br><hr><img src="https://img-blog.csdnimg.cn/20200909173044451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>键盘选择美国英语式<br><hr><img src="https://img-blog.csdnimg.cn/20200909173131335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>下一步<br><hr><img src="https://img-blog.csdnimg.cn/2020090917321351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>是，忽略<br><hr><img src="https://img-blog.csdnimg.cn/20200909173239730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置主机名<br><hr><img src="https://img-blog.csdnimg.cn/202009091733297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>时区选择上海<br><hr><img src="https://img-blog.csdnimg.cn/20200909173408680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置密码123456<br><hr><img src="https://img-blog.csdnimg.cn/20200909173503696.png#pic_center" alt="在这里插入图片描述"><br>无论如何都用<br><hr><img src="https://img-blog.csdnimg.cn/20200909173532309.png#pic_center" alt="在这里插入图片描述"><br><hr><br>自定义分区<br><hr><img src="https://img-blog.csdnimg.cn/20200909173613693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909173821652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>创建<br><hr><img src="https://img-blog.csdnimg.cn/20200909173841985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909173943443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909174016982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909174329381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/2020090917442620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br><img src="https://img-blog.csdnimg.cn/20200909174502472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>格式化<br><hr><img src="https://img-blog.csdnimg.cn/20200909174521853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>选择将修改写入磁盘<br><hr><img src="https://img-blog.csdnimg.cn/20200909174543931.png#pic_center" alt="在这里插入图片描述"><br><hr><br>分区完成，下一步<br><hr><img src="https://img-blog.csdnimg.cn/20200909174618241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>重新引导<br><hr><img src="https://img-blog.csdnimg.cn/20200909174954472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>参考：<a href="https://blog.csdn.net/z1941563559/article/details/80615691">https://blog.csdn.net/z1941563559/article/details/80615691</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;centos6-5安装步骤&quot;&gt;&lt;a href=&quot;#centos6-5安装步骤&quot; class=&quot;headerlink&quot; title=&quot;centos6.5安装步骤&quot;&gt;&lt;/a&gt;centos6.5安装步骤&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux-Centos6.5 配置地址</title>
    <link href="http://yoursite.com/2020/09/09/linux1/"/>
    <id>http://yoursite.com/2020/09/09/linux1/</id>
    <published>2020-09-09T15:11:30.331Z</published>
    <updated>2020-09-16T05:13:07.958Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CentOS-6-5网络配置静态IP地址"><a href="#CentOS-6-5网络配置静态IP地址" class="headerlink" title="CentOS 6.5网络配置静态IP地址"></a>CentOS 6.5网络配置静态IP地址</h5><a id="more"></a><p>CentOS 6.5网络配置静态IP地址<br>打开VMvare，并进入虚拟机</p><p>CentOS6.5网络配置<br>2<br>输入用户名，按回车键，再输入密码，登录系统</p><p>CentOS6.5网络配置<br>3<br>进行网络配置前，需要确认几个事情：</p><ol><li>网络适配器模式是否为NAT模式</li></ol><p>右键虚拟机，或者点击VMvare菜单栏中的虚拟机（按ctrl+alt键可切出虚拟机返回到windows，点击虚拟机窗口，可进入虚拟机操作）</p><p>点击“设置”<br><img src="https://img-blog.csdnimg.cn/20200909201251787.png#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>4<br>确认网络适配器是否处于NAT模式<br><img src="https://img-blog.csdnimg.cn/20200909201308914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>5<br>2. 确认网关、网段</p><p>点击VMvare虚拟机“编辑”菜单中的“虚拟网络编辑器”<br><img src="https://img-blog.csdnimg.cn/20200909201524495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>6<br>在弹出页面上方列表中选择VMnet8，并点击页面中部的“NAT设置”按钮</p><p>CentOS6.5网络配置<br>7<br>在该页面中，可以查看到网关IP为“192.168.50.2”（各机器有所不同）<br><img src="https://img-blog.csdnimg.cn/2020090920154051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>CentOS6.5网络配置<br>8<br>关闭网关查看页面，点击页面下方的“DHCP设置”按钮<br><img src="https://img-blog.csdnimg.cn/20200909201607165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr><br>可查看到网络信息</p><p>CentOS6.5网络配置<br>9<br>3. 确认Windows服务启动项中，“VMware DHCP Service”、”VMware NAT Service”，两项服务是否启动</p><p>CentOS6.5网络配置<br>10<br>4. 查看网络和共享中心中的“VMware Network Adapter VMnet8”的状态<br><img src="https://img-blog.csdnimg.cn/20200909201746562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>11<br>其中：</p><p>192.168.50.2 是虚拟路由器的网关地址</p><p>192.168.50.1 是虚拟路由器为Windows分配的地址</p><p>CentOS6.5网络配置<br>12<br>确认完成后，进入CentOS6.5系统中，输入命令“ifconfig”，查看网络信息。</p><p>可以查看到只有一条“lo”，且地址为“127.0.0.1”</p><p>CentOS6.5网络配置<br>配置网络，输入命令“vi  /etc/sysconfig/network-scripts/ifcfg-eth0”</p><p>CentOS6.5网络配置<br>进入文本编辑模式后，可查看到原信息<br><img src="https://img-blog.csdnimg.cn/20200909201859460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>修改信息：</p><p>ONBOOT=yes</p><p>BOOTPROTO=static</p><p>添加信息：</p><p>IPADDR=192.168.50.146（根据网关自行调整）</p><p>NETMASK=255.255.255.0</p><p>GATEWAY=192.168.50.2</p><p>（按“i”键进入编辑模式，按“Esc”键退出编辑模式，在退出编辑模式时，按“zz”保存退出）<br><img src="https://img-blog.csdnimg.cn/20200916111558524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:0C:29:3A:AC:12</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=22c2bab6-e7b6-4bde-a2e3-151dd8394d44</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=ststic</span><br><span class="line">IPADDR=192.168.50.146</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.50.2</span><br></pre></td></tr></table></figure><p>CentOS6.5网络配置<br>编辑完成后，输入命令“service network restart”</p><p>CentOS6.5网络配置<br>再次输入“ifconfig”命令，查看网络信息。</p><p>可以看到多了一个“eth0”，并且地址为“192.168.50.146”<br><img src="https://img-blog.csdnimg.cn/20200909202113981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>测试网络是否联通。</p><p>ping网关：输入命令“ping 192.168.50.2”</p><p>pingWindows地址：输入命令“ping 192.168.50.1”</p><p>CentOS6.5网络配置<br>设置DNS服务，输入命令“vi /etc/resolv.conf”</p><p>CentOS6.5网络配置<br>添加内容“nameserver 114.114.114.114”,并保存退出<br><img src="https://img-blog.csdnimg.cn/20200909202150453.png#pic_center" alt="在这里插入图片描述"><br><hr></p><p>CentOS6.5网络配置<br>测试外网是否联通</p><p>输入命令“ping <a href="http://www.baidu.com”/">www.baidu.com”</a><br><img src="https://img-blog.csdnimg.cn/20200909202227853.png#pic_center" alt="在这里插入图片描述"><br><hr><br>配置完成<br>参考：<a href="https://www.cnblogs.com/lucky-man/p/7111920.html">https://www.cnblogs.com/lucky-man/p/7111920.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;CentOS-6-5网络配置静态IP地址&quot;&gt;&lt;a href=&quot;#CentOS-6-5网络配置静态IP地址&quot; class=&quot;headerlink&quot; title=&quot;CentOS 6.5网络配置静态IP地址&quot;&gt;&lt;/a&gt;CentOS 6.5网络配置静态IP地址&lt;/h5&gt;</summary>
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---策略模式</title>
    <link href="http://yoursite.com/2020/09/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-06T14:48:21.364Z</published>
    <updated>2020-09-06T14:49:01.448Z</updated>
    
    <content type="html"><![CDATA[<h5 id="策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。"><a href="#策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。" class="headerlink" title="策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。"></a>策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。</h5><a id="more"></a><h3 id="策略模式-前端"><a href="#策略模式-前端" class="headerlink" title="策略模式(前端)"></a>策略模式(前端)</h3><p>下面也是举个例子，现在超市有活动，vip为5折，老客户3折，普通顾客没折，计算***需要支付的金额，如果不使用策略模式，我们的代码可能和下面一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params">personType, price</span>) </span>&#123; </span><br><span class="line"> <span class="comment">//vip 5 折 </span></span><br><span class="line"> <span class="keyword">if</span> (personType == <span class="string">&#x27;vip&#x27;</span>) &#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="number">0.5</span>; </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (personType == <span class="string">&#x27;old&#x27;</span>)&#123; <span class="comment">//老客户 3 折 </span></span><br><span class="line"> <span class="keyword">return</span> price * <span class="number">0.3</span>; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> price; <span class="comment">//其他都全价 </span></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在上面的代码中，我们需要很多个判断，如果有很多优惠，我们又需要添加很多判断，<strong>这里已经违背了刚才说的设计模式的六大原则中的开闭原则了，如果使用策略模式</strong>，我们的代码可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于vip客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vipPrice</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">0.5</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">vipPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="built_in">this</span>.discount; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 对于老客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldPrice</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">0.3</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">oldPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="built_in">this</span>.discount; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 对于普通客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">Price.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price ; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 上下文，对于客户端的使用 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Context</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"> <span class="built_in">this</span>.strategy = <span class="literal">null</span>; </span><br><span class="line"> <span class="built_in">this</span>.price = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">Context.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">name, strategy, price</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = name; </span><br><span class="line"> <span class="built_in">this</span>.strategy = strategy; </span><br><span class="line"> <span class="built_in">this</span>.price = price; </span><br><span class="line">&#125; </span><br><span class="line">Context.prototype.getResult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; 的结账价为: &#x27;</span> + <span class="built_in">this</span>.strategy.getPrice(<span class="built_in">this</span>.price)); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context(); </span><br><span class="line"><span class="keyword">var</span> vip = <span class="keyword">new</span> vipPrice(); </span><br><span class="line">context.set (<span class="string">&#x27;vip客户&#x27;</span>, vip, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// vip客户 的结账价为: 100 </span></span><br><span class="line"><span class="keyword">var</span> old = <span class="keyword">new</span> oldPrice(); </span><br><span class="line">context.set (<span class="string">&#x27;老客户&#x27;</span>, old, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// 老客户 的结账价为: 60 </span></span><br><span class="line"><span class="keyword">var</span> Price = <span class="keyword">new</span> Price(); </span><br><span class="line">context.set (<span class="string">&#x27;普通客户&#x27;</span>, Price, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// 普通客户 的结账价为: 200 </span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在上面的代码中，通过策略模式，使得客户的折扣与算法解藕，又使得修改跟扩展能独立的进行，不影到客户端或其他算法的使用。</p><p>当我们的代码中有很多个判断分支，每一个条件分支都会引起该“类”的特定行为以不同的方式作出改变，这个时候就可以使用策略模式，可以改进我们代码的质量，也更好的可以进行单元测试。</p><h3 id="策略模式-后端"><a href="#策略模式-后端" class="headerlink" title="策略模式(后端)"></a>策略模式(后端)</h3><p><img src="https://img-blog.csdnimg.cn/2020090622452363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中，Context是上下文，用一个ConcreteStrategy来配置，维护一个对Strategy对象的引用；Strategy是策略类，用于定义所有支持算法的公共接口；ConcreteStrategy是具体策略类，封装了具体的算法或行为，继承于Strategy。</p><p>　　1. Context上下文<br>　　Context上下文角色，也叫Context封装角色，起承上启下的作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     Strategy strategy;</span><br><span class="line"> <span class="number">4</span>     </span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line"> <span class="number">7</span>     &#125;</span><br><span class="line"> <span class="number">8</span>     </span><br><span class="line"> <span class="number">9</span>     <span class="comment">//上下文接口</span></span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">11</span>         strategy.algorithmInterface();</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure><p>　　2. 策略角色<br>　　抽象策略角色，是对策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具有的方法和属性。algorithm是“运算法则”的意思。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>     </span><br><span class="line"><span class="number">3</span>     <span class="comment">//算法方法</span></span><br><span class="line"><span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">6</span> &#125;</span><br></pre></td></tr></table></figure><p>　　3. 具体策略角色<br>　　用于实现抽象策略中的操作，即实现具体的算法，下方用print代替。测试类共3个ConcreteStrategy，其它两个类与ConcreteStrategyA同理，就不再赘述了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">5</span>         System.out.println(<span class="string">&quot;算法A实现&quot;</span>);</span><br><span class="line"><span class="number">6</span>     &#125;</span><br><span class="line"><span class="number">7</span> </span><br><span class="line"><span class="number">8</span> &#125;</span><br></pre></td></tr></table></figure><p>　　4. Client客户端<br>　　下面依次更换策略，测试一下策略模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Context context;</span><br><span class="line"> <span class="number">5</span>         </span><br><span class="line"> <span class="number">6</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line"> <span class="number">7</span>         context.contextInterface();</span><br><span class="line"> <span class="number">8</span>         </span><br><span class="line"> <span class="number">9</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line"><span class="number">10</span>         context.contextInterface();</span><br><span class="line"><span class="number">11</span>         </span><br><span class="line"><span class="number">12</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyC());</span><br><span class="line"><span class="number">13</span>         context.contextInterface();</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020090622464769.png#pic_center" alt="在这里插入图片描述"></p><h4 id="策略模式的应用"><a href="#策略模式的应用" class="headerlink" title="策略模式的应用"></a>策略模式的应用</h4><p>　　<strong>1. 何时使用</strong><br>一个系统有许多类，而区分它们的只是他们直接的行为时<br><strong>2. 方法</strong><br>将这些算法封装成一个一个的类，任意的替换<br><strong>3. 优点</strong><br>算法可以自由切换<br>避免使用多重条件判断（如果不用策略模式我们可能会使用多重条件语句，不利于维护）<br>扩展性良好，增加一个策略只需实现接口即可<br><strong>4. 缺点</strong><br>策略类数量会增多，每个策略都是一个类，复用的可能性很小<br>所有的策略类都需要对外暴露<br><strong>5. 使用场景</strong><br>多个类只有算法或行为上稍有不同的场景<br>算法需要自由切换的场景<br>需要屏蔽算法规则的场景<br><strong>6. 应用实例</strong><br>出行方式，自行车、汽车等，每一种出行方式都是一个策略<br>商场促销方式，打折、满减等<br>Java AWT中的LayoutManager，即布局管理器<br><strong>7. 注意事项</strong><br>如果一个系统的策略多于四个，就需要考虑使用混合模式来解决策略类膨胀的问题</p><p>参考： <a href="https://www.cnblogs.com/adamjwh/p/11011095.html">https://www.cnblogs.com/adamjwh/p/11011095.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&quot;&gt;&lt;a href=&quot;#策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&quot; class=&quot;headerlink&quot; title=&quot;策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&quot;&gt;&lt;/a&gt;策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。&lt;/h5&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="策略模式" scheme="http://yoursite.com/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---观察者模式</title>
    <link href="http://yoursite.com/2020/09/06/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/06/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-06T09:33:23.387Z</published>
    <updated>2020-09-06T09:35:05.022Z</updated>
    
    <content type="html"><![CDATA[<h5 id="观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。"><a href="#观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。" class="headerlink" title="观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。"></a>观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。</h5><a id="more"></a><h5 id="观察者模式又叫做-发布—订阅模式-，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计"><a href="#观察者模式又叫做-发布—订阅模式-，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计" class="headerlink" title="观察者模式又叫做 发布—订阅模式 ，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计"></a>观察者模式又叫做 <em>发布—订阅模式</em> ，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计</h5><h3 id="观察者模式（前端）"><a href="#观察者模式（前端）" class="headerlink" title="观察者模式（前端）"></a>观察者模式（前端）</h3><p><strong>定义</strong>：对象间的一种一对多的依赖关系。</p><p><strong>需求</strong>：当一个对象的状态发生变化时，所有依赖于他的对象都将得到通知。</p><p><strong>优点</strong>：时间上的解耦，对象之间的解耦。</p><p><strong>实现</strong>：</p><p>指定好谁充当发布者;<br>给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者;<br>发布消息的时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函数。<br>下面举个例子，比如我们给页面中的一个dom节点绑定一个事件，其实就可以看做是一种观察者模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> alert(<span class="string">&quot;Hello World&quot;</span>) </span><br><span class="line">&#125;，<span class="literal">false</span> ) </span><br><span class="line"><span class="built_in">document</span>.body.click() <span class="comment">//模拟用户点击 </span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在上面的例子中，需要监听用户点击 document.body 的动作，但是我们是没办法预知用户将在什么时候点击的，因此我们订阅了 document.body 的 click 事件，当 body 节点被点击时，body 节点便会向订阅者发布 “Hello World” 消息。</p><h3 id="观察者模式（后端）"><a href="#观察者模式（后端）" class="headerlink" title="观察者模式（后端）"></a>观察者模式（后端）</h3><p><img src="https://img-blog.csdnimg.cn/20200906170819998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中，Subject类是主题，它把所有对观察者对象的引用文件存在了一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供了一个接口，可以增加和删除观察者对象；Observer类是抽象观察者，为所有的具体观察者定义一个接口，在得到主题的通知时更新自己；ConcreteSubject类是具体主题，将有关状态存入具体观察者对象，在具体主题内部状态改变时，给所有登记过的观察者发出通知；ConcreteObserver是具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观察者数组</span></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; oVector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oVector.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oVector.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知所有观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer : <span class="keyword">this</span>.oVector) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>     <span class="comment">//更新</span></span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">super</span>.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息，进行处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个主题</span></span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        <span class="comment">//定义一个观察者</span></span><br><span class="line">        Observer observer = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line">        <span class="comment">//观察</span></span><br><span class="line">        subject.addObserver(observer);</span><br><span class="line">        <span class="comment">//开始活动</span></span><br><span class="line">        subject.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://img-blog.csdnimg.cn/2020090617253982.png#pic_center" alt="在这里插入图片描述"></p><h5 id="观察者模式的应用"><a href="#观察者模式的应用" class="headerlink" title="观察者模式的应用"></a>观察者模式的应用</h5><p>　　<strong>1. 何时使用</strong><br>一个对象状态改变，所有的依赖对象都将得到通知<br> 　　<strong>2. 方法</strong><br>使用面向对象技术<br> 　　<strong>3. 优点</strong><br>观察者和被观察者是抽象耦合的<br>建立了一套触发机制<br> 　　<strong>4. 缺点</strong><br>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间<br>如果观察者和观察目标间有循环依赖，可能导致系统崩溃<br>没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的<br> 　　<strong>5. 使用场景</strong><br>关联行为场景<br>事件多级触发场景<br>跨系统的消息变换场景，如消息队列的处理机制<br>　　<strong>6. 应用实例</strong><br>手机丢了，委托别人给其他人发消息通知<br>通知老师/老板来了<br>拍卖，拍卖师观察最高标价，然后通知给其它竞价者竞价<br>在一个目录下建立一个文件，会同时通知目录管理器增加目录，并通知磁盘减少空间，文件是被观察者，目录管理器和磁盘管理器是观察者<br>猫叫了一声，吓着了老鼠，也惊到了主人，猫是被观察者，老鼠和人是观察者<br>　　<strong>7. 注意事项</strong><br>避免循环引用<br>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式</p><p>参考： <a href="https://www.cnblogs.com/adamjwh/p/10913660.html">https://www.cnblogs.com/adamjwh/p/10913660.html</a></p><p>参考： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&quot;&gt;&lt;a href=&quot;#观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&quot; class=&quot;headerlink&quot; title=&quot;观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&quot;&gt;&lt;/a&gt;观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。&lt;/h5&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="观察者模式" scheme="http://yoursite.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---代理模式</title>
    <link href="http://yoursite.com/2020/09/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-05T09:48:31.563Z</published>
    <updated>2020-09-05T09:49:17.065Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。"><a href="#代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。" class="headerlink" title="代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。"></a>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</h4><a id="more"></a><h3 id="代理模式-前端"><a href="#代理模式-前端" class="headerlink" title="代理模式(前端)"></a>代理模式(前端)</h3><h4 id="代理模式的定义："><a href="#代理模式的定义：" class="headerlink" title="代理模式的定义："></a>代理模式的定义：</h4><p>代理模式主要是为其他对象提供一种代理以控制对这个对象的访问，主要解决在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上，在面向对象系统中，有些对象由于某些原因(比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问)，直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// 示例代码 </span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 目标对象，是真正被代理的对象 </span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"> Subject.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 代理对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>realSubject [持有被代理的具体的目标对象] </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Proxy</span>(<span class="params">realSubject</span>)</span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.realSubject = readSubject; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="built_in">Proxy</span>.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.realSubject.request(); </span><br><span class="line"> &#125;; </span><br><span class="line">&#125;()); </span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在上面的代码中，Proxy可以控制对真正被代理对象的一个访问，在代理模式中，比较常见的就是虚拟代理，虚拟代理用于控制对那种创建开销很大的本体的访问，它会把本体的实例化推迟到有方法被调用的时候，比如说，现在我们假设PublicLibrary的实例化很慢，不能在网页加载的时候立即完成，我们可以为其创建一个虚拟代理，让它把PublicLibrary的实例化推迟到必要的时候，比如说我们在前端中经常用到的图片懒加载，就可以用虚拟代理</p><h3 id="代理模式-后端"><a href="#代理模式-后端" class="headerlink" title="代理模式(后端)"></a>代理模式(后端)</h3><h4 id="为什么要用代理模式"><a href="#为什么要用代理模式" class="headerlink" title="为什么要用代理模式"></a>为什么要用代理模式</h4><p>中介隔离作用：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。<br>开闭原则，增加功能：代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服务。真正的业务功能还是由委托类来实现，但是可以在业务功能执行的前后加入一些公共的服务。例如我们想给项目加入缓存、日志这些功能，我们就可以使用代理类来完成，而没必要打开已经封装好的委托类。</p><h4 id="分为两种：静态代理、动态代理。"><a href="#分为两种：静态代理、动态代理。" class="headerlink" title="分为两种：静态代理、动态代理。"></a>分为两种：静态代理、动态代理。</h4><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>是由程序员创建或特定工具自动生成源代码，在对其编译。在程序员运行之前，代理类.class文件就已经被创建了。动态代理是在程序运行时通过反射机制动态创建的。<br>1.静态代理     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 第一步：创建服务类接口</span><br><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 4  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 5  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Date</span>: 22:40 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 7  */</span></span><br><span class="line"> <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span>     <span class="function"><span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><p>第二步：实现服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 4  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 5  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Date</span>: 22:42 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 7  */</span></span><br><span class="line"> <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHouseImpl</span> <span class="keyword">implements</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">11</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">12</span>         System.out.println(<span class="string">&quot;我要买房&quot;</span>);</span><br><span class="line"><span class="number">13</span>     &#125;</span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure><p>第三步：创建代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 7  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Date</span>: 22:43 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 9  */</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHouseProxy</span> <span class="keyword">implements</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span>     <span class="keyword">private</span> BuyHouse buyHouse;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span>     <span class="function"><span class="keyword">public</span> <span class="title">BuyHouseProxy</span><span class="params">(<span class="keyword">final</span> BuyHouse buyHouse)</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>         <span class="keyword">this</span>.buyHouse = buyHouse;</span><br><span class="line"><span class="number">16</span>     &#125;</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">19</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">20</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">21</span>         buyHouse.buyHosue();</span><br><span class="line"><span class="number">22</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     &#125;</span><br><span class="line"><span class="number">25</span> &#125;</span><br></pre></td></tr></table></figure><p>第四步：编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> main.java.proxy.impl.BuyHouseImpl;</span><br><span class="line"><span class="keyword">import</span> main.java.proxy.impl.BuyHouseProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 22:43 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line">        buyHouse.buyHosue();</span><br><span class="line">        BuyHouseProxy buyHouseProxy = <span class="keyword">new</span> BuyHouseProxy(buyHouse);</span><br><span class="line">        buyHouseProxy.buyHosue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态代理总结："><a href="#静态代理总结：" class="headerlink" title="静态代理总结："></a>静态代理总结：</h5><p>优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。<br>缺点：我们得为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。 </p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>　　在动态代理中我们不再需要再手动的创建代理类，我们只需要编写一个动态处理器就可以了。真正的代理对象由JDK再运行时为我们动态的来创建。</p><p>第一步：编写动态处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 7  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 9  * <span class="doctag">@Date</span>: 20:34 2018/1/12 0012</span></span><br><span class="line"><span class="comment">10  */</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span>     <span class="keyword">private</span> Object object;</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(<span class="keyword">final</span> Object object)</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>         <span class="keyword">this</span>.object = object;</span><br><span class="line"><span class="number">17</span>     &#125;</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">20</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="number">21</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">22</span>         Object result = method.invoke(object, args);</span><br><span class="line"><span class="number">23</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">24</span>         <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">25</span>     &#125;</span><br><span class="line"><span class="number">26</span> &#125;</span><br></pre></td></tr></table></figure><p>第二步：编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.test;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> main.java.proxy.impl.BuyHouseImpl;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> main.java.proxy.impl.DynamicProxyHandler;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment">11  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">12  * <span class="doctag">@Date</span>: 20:38 2018/1/12 0012</span></span><br><span class="line"><span class="comment">13  */</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>         BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line"><span class="number">17</span>         BuyHouse proxyBuyHouse = (BuyHouse) Proxy.newProxyInstance(BuyHouse.class.getClassLoader(), <span class="keyword">new</span></span><br><span class="line"><span class="number">18</span>                 Class[]&#123;BuyHouse.class&#125;, <span class="keyword">new</span> DynamicProxyHandler(buyHouse));</span><br><span class="line"><span class="number">19</span>         proxyBuyHouse.buyHosue();</span><br><span class="line"><span class="number">20</span>     &#125;</span><br><span class="line"><span class="number">21</span> &#125;</span><br></pre></td></tr></table></figure><p> 注意Proxy.newProxyInstance()方法接受三个参数：</p><ul><li>ClassLoader loader:指定当前目标对象使用的类加载器,获取加载器的方法是固定的</li><li>Class&lt;?&gt;[] interfaces:指定目标对象实现的接口的类型,使用泛型方式确认类型</li><li>InvocationHandler:指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法</li></ul><h5 id="动态代理总结："><a href="#动态代理总结：" class="headerlink" title="动态代理总结："></a>动态代理总结：</h5><p>虽然相对于静态代理，动态代理大大减少了我们的开发任务，同时减少了对业务接口的依赖，降低了耦合度。但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持interface代理的桎梏，因为它的设计注定了这个遗憾。回想一下那些动态生成的代理类的继承关系图，它们已经注定有一个共同的父类叫Proxy。Java的继承机制注定了这些动态代理类们无法实现对class的动态代理，原因是多继承在Java中本质上就行不通。有很多条理由，人们可以否定对 class代理的必要性，但是同样有一些理由，相信支持class动态代理会更美好。接口和类的划分，本就不是很明显，只是到了Java中才变得如此的细化。如果只从方法的声明及是否被定义来考量，有一种两者的混合体，它的名字叫抽象类。实现对抽象类的动态代理，相信也有其内在的价值。此外，还有一些历史遗留的类，它们将因为没有实现任何接口而从此与动态代理永世无缘。如此种种，不得不说是一个小小的遗憾。但是，不完美并不等于不伟大，伟大是一种本质，Java动态代理就是佐例。</p><h4 id="CGLIB代理"><a href="#CGLIB代理" class="headerlink" title="CGLIB代理"></a>CGLIB代理</h4><pre><code>   JDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要CGLib了。CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。但因为采用的是继承，所以不能对final修饰的类进行代理。JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。</code></pre><p>第一步：创建CGLIB代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> dan.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment">11  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">12  * <span class="doctag">@Date</span>: 20:38 2018/1/16 0016</span></span><br><span class="line"><span class="comment">13  */</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>     <span class="keyword">private</span> Object target;</span><br><span class="line"><span class="number">16</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(<span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line"><span class="number">17</span>         <span class="keyword">this</span>.target = target;</span><br><span class="line"><span class="number">18</span>         Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="number">19</span>         enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());</span><br><span class="line"><span class="number">20</span>         enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="number">21</span>         <span class="keyword">return</span> enhancer.create();</span><br><span class="line"><span class="number">22</span>     &#125;</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="number">25</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">26</span>         Object result = methodProxy.invoke(object, args);</span><br><span class="line"><span class="number">27</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">28</span>         <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">29</span>     &#125;</span><br><span class="line"><span class="number">30</span> &#125;</span><br></pre></td></tr></table></figure><p>第二步：创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">package</span> dan.proxy.test;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> dan.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> dan.proxy.impl.BuyHouseImpl;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> dan.proxy.impl.CglibProxy;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 9  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Date</span>: 20:52 2018/1/16 0016</span></span><br><span class="line"><span class="comment">11  */</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="number">14</span>         BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line"><span class="number">15</span>         CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line"><span class="number">16</span>         BuyHouseImpl buyHouseCglibProxy = (BuyHouseImpl) cglibProxy.getInstance(buyHouse);</span><br><span class="line"><span class="number">17</span>         buyHouseCglibProxy.buyHosue();</span><br><span class="line"><span class="number">18</span>     &#125;</span><br><span class="line"><span class="number">19</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&quot;&gt;&lt;a href=&quot;#代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&quot; class=&quot;headerlink&quot; title=&quot;代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&quot;&gt;&lt;/a&gt;代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。&lt;/h4&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---单例模式</title>
    <link href="http://yoursite.com/2020/09/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-05T08:42:24.004Z</published>
    <updated>2020-09-05T08:47:13.198Z</updated>
    
    <content type="html"><![CDATA[<h4 id="将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。"><a href="#将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。" class="headerlink" title="将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。"></a>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。</h4><a id="more"></a><h2 id="单例模式（前端）"><a href="#单例模式（前端）" class="headerlink" title="单例模式（前端）"></a>单例模式（前端）</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>是保证一个类只有一个实例，并且提供一个访问它的全局访问点。</p><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器中的window对象、登录浮窗等。</p><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>用一个变量标识当前是否已经为某个类创建过对象，如果是，则在下一次获取这个类的实例时，直接返回之前创建的对象。</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>可以用来划分命名空间，减少全局变量的数量<br>可以被实例化，且实例化一次，再次实例化生成的也是***个实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> single = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> unique; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// 如果该实例存在，则直接返回，否则就对其实例化 </span></span><br><span class="line"> <span class="keyword">if</span>( unique === <span class="literal">undefined</span> )&#123; </span><br><span class="line"> unique = <span class="keyword">new</span> Construct(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> unique; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Construct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// ... 生成单例的构造函数的代码 </span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line"> getInstance : getInstance </span><br><span class="line"> &#125; </span><br><span class="line">&#125;)(); </span><br></pre></td></tr></table></figure><p>在上面的代码中，我们可以使用single.getInstance来获取到单例，并且每次调用均获取到同一个单例，在我们平时的开发中，我们也经常会用到这种模式，比如当我们单击登录按钮的时候，页面中会出现一个登录框，而这个浮窗是唯一的，无论单击多少次登录按钮，这个浮窗只会被创建一次，因此这个登录浮窗就适合用单例模式。</p><h2 id="单例模式（后端）"><a href="#单例模式（后端）" class="headerlink" title="单例模式（后端）"></a>单例模式（后端）</h2><p>Java开发过程中，很多场景下都会碰到或要用到单例模式，在设计模式里也是经常作为指导学习的热门模式之一，相信每位开发同事都用到过。我们总是沿着前辈的足迹去做设定好的思路，往往没去探究为何这么做，所以这篇文章对单例模式做了详解。</p><h3 id="单例模式定义："><a href="#单例模式定义：" class="headerlink" title="单例模式定义："></a>单例模式定义：</h3><p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p><h3 id="单例模式特点："><a href="#单例模式特点：" class="headerlink" title="单例模式特点："></a>单例模式特点：</h3><p>　　1、单例类只能有一个实例。<br>　　2、单例类必须自己创建自己的唯一实例。<br>　　3、单例类必须给所有其他对象提供这一实例。</p><p>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</p><h3 id="线程安全的问题"><a href="#线程安全的问题" class="headerlink" title="线程安全的问题"></a>线程安全的问题</h3><p>一方面在获取单例的时候，要保证不能产生多个实例对象，后面会详细讲到五种实现方式；</p><p>另一方面，在使用单例对象的时候，要注意单例对象内的实例变量是会被多线程共享的，推荐使用无状态的对象，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题，比如我们常用的VO，DTO等（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题）。</p><h3 id="单例模式的选择"><a href="#单例模式的选择" class="headerlink" title="单例模式的选择"></a>单例模式的选择</h3><p>还记得我们最早使用的MVC框架Struts1中的action就是单例模式的，而到了Struts2就使用了多例。在Struts1里，当有多个请求访问，每个都会分配一个新线程，在这些线程，操作的都是同一个action对象，每个用户的数据都是不同的，而action却只有一个。到了Struts2， action对象为每一个请求产生一个实例，并不会带来线程安全问题（实际上servlet容器给每个请求产生许多可丢弃的对象，但是并没有影响到性能和垃圾回收问题，有时间会做下研究）。</p><h3 id="实现单例模式的方式"><a href="#实现单例模式的方式" class="headerlink" title="实现单例模式的方式"></a>实现单例模式的方式</h3><h4 id="饿汉式单例（立即加载方式）"><a href="#饿汉式单例（立即加载方式）" class="headerlink" title="饿汉式单例（立即加载方式）"></a>饿汉式单例（立即加载方式）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饿汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式单例在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。</p><p>Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且闭着眼就认为反射机制不存在。）</p><h4 id="懒汉式单例（延迟加载方式）"><a href="#懒汉式单例（延迟加载方式）" class="headerlink" title="懒汉式单例（延迟加载方式）"></a>懒汉式单例（延迟加载方式）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该示例虽然用延迟加载方式实现了懒汉式单例，但在多线程环境下会产生多个single对象，如何改造请看以下方式:</p><h4 id="使用synchronized同步锁"><a href="#使用synchronized同步锁" class="headerlink" title="使用synchronized同步锁"></a>使用synchronized同步锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等同于 synchronized public static Singleton3 getInstance()</span></span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton3.class)&#123;</span><br><span class="line">          <span class="comment">// 注意：里面的判断是一定要加的，否则出现线程安全问题</span></span><br><span class="line">            <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">                single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    single = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p><h4 id="静态内部类实现"><a href="#静态内部类实现" class="headerlink" title="静态内部类实现"></a>静态内部类实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObject</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObject.single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。这种情况不多做说明了，使用时请注意。</p><h4 id="static静态代码块实现"><a href="#static静态代码块实现" class="headerlink" title="static静态代码块实现"></a>static静态代码块实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内部枚举类实现"><a href="#内部枚举类实现" class="headerlink" title="内部枚举类实现"></a>内部枚举类实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> EnmuSingleton&#123;</span><br><span class="line">        Singleton;</span><br><span class="line">        <span class="keyword">private</span> Singleton8 singleton;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//枚举类的构造方法在类加载是被实例化 </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnmuSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton8();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton8 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton8 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EnmuSingleton.Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton8</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton8</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考： <a href="https://www.cnblogs.com/garryfu/p/7976546.html">https://www.cnblogs.com/garryfu/p/7976546.html</a><br>参考： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a><br>参考： <a href="https://www.cnblogs.com/binaway/p/8889184.html">https://www.cnblogs.com/binaway/p/8889184.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。&quot;&gt;&lt;a href=&quot;#将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private-static类型。定义一个静态方法返回这个唯一对象。&quot; class=&quot;headerlink&quot; title=&quot;将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。&quot;&gt;&lt;/a&gt;将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。&lt;/h4&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="单例模式" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---工厂模式</title>
    <link href="http://yoursite.com/2020/09/04/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/09/04/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-04T11:02:23.572Z</published>
    <updated>2020-09-04T11:10:27.674Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式包括简单工厂，工厂方法，抽象工厂，这里分别介绍前后端工厂模式以及示例</p><a id="more"></a><h2 id="（前端）工厂模式"><a href="#（前端）工厂模式" class="headerlink" title="（前端）工厂模式"></a>（前端）工厂模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>简单工厂模式又叫静态工厂模式，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象<br><strong>简单工厂在调用return new的时候使用</strong><br>比如说，在实际的项目中，我们常常需要根据用户的权限来渲染不同的页面，高级权限的用户所拥有的页面有些是无法被低级权限的用户所查看，所以我们可以在不同权限等级用户的构造函数中，保存该用户能够看到的页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span> (<span class="params">role</span>) </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SuperAdmin</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">NormalUser</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">switch</span> (role) &#123; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;superAdmin&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SuperAdmin(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;admin&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Admin(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;user&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> NormalUser(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">default</span>: </span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;参数错误, 可选参数:superAdmin、admin、user&#x27;</span>); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;superAdmin&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;admin&#x27;</span>)  </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;user&#x27;</span>) </span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在上面的例子中，UserFactory就是一个简单工厂，在该函数中有3个构造函数分别对应不同的权限的用户，当我们调用工厂函数时，只需要传递superAdmin, admin, user这三个可选参数中的一个获取对应的实例对象</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>简单工厂的优点在于，你只需要一个正确的参数，就可以获取到你所需要的对象，而无需知道其创建的具体细节;</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>在函数内包含了所有对象的创建逻辑(构造函数)和判断逻辑的代码，每增加新的构造函数还需要修改判断逻辑代码，我们的对象不是上面的3个而是30个或更多时，这个函数会成为一个庞大的超级函数，便得难以维护，简单工厂只能作用于创建的对象数量较少，<strong>对象的创建逻辑不复杂时使用</strong>;</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全模式创建的工厂方法函数 </span></span><br><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span>(<span class="params">role</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">this</span> <span class="keyword">instanceof</span> UserFactory) &#123; </span><br><span class="line"> <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">this</span>[role](); </span><br><span class="line"> <span class="keyword">return</span> s; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> UserFactory(role); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//工厂方法函数的原型中设置所有对象的构造函数 </span></span><br><span class="line">UserFactory.prototype = &#123; </span><br><span class="line"> SuperAdmin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>] </span><br><span class="line"> &#125;, </span><br><span class="line"> Admin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>] </span><br><span class="line"> &#125;, </span><br><span class="line"> NormalUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;SuperAdmin&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;Admin&#x27;</span>)  </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;NormalUser&#x27;</span>) </span><br></pre></td></tr></table></figure><p><strong>总结</strong>：在简单工厂中，如果我们新增加一个用户类型，需要修改两个地方的代码，一个是增加新的用户构造函数，一个是在逻辑判断中增加对新的用户的判断，而在抽象工厂方法中，我们只需要在UserFactory.prototype中添加就可以啦。</p><h2 id="（后端）工厂模式"><a href="#（后端）工厂模式" class="headerlink" title="（后端）工厂模式"></a>（后端）工厂模式</h2><p>（1）简单工厂（Simple Factory）模式，又称静态工厂方法模式（Static Factory Method Pattern）。</p><p>（2）工厂方法（Factory Method）模式，又称多态性工厂（Polymorphic Factory）模式或虚拟构造子（Virtual Constructor）模式；</p><p>（3）抽象工厂（Abstract Factory）模式，又称工具箱（Kit 或Toolkit）模式。</p><h4 id="为什么要用工厂模式"><a href="#为什么要用工厂模式" class="headerlink" title="为什么要用工厂模式"></a>为什么要用工厂模式</h4><p>(1) 解耦 ：把对象的创建和使用的过程分开</p><p>(2)降低代码重复: 如果创建某个对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码。</p><p>(3) 降低维护成本 ：由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>（1）需要创建的对象较少。</p><p>（2）客户端不关心对象的创建过程。</p><h3 id="简单工厂-1"><a href="#简单工厂-1" class="headerlink" title="简单工厂"></a>简单工厂</h3><h4 id="Override是什么注解"><a href="#Override是什么注解" class="headerlink" title="@Override是什么注解"></a>@Override是什么注解</h4><p>@Override 的作bai用是：如果想重写父类的方du法，比如toString()方法的话zhi，在方法前面加上@Override 系统dao可以帮你检查方法的正确性。</p><p>（1）创建Shape接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建实现该接口的具体图形类</p><p>圆形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长方形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正方形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）创建工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (shapeType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape circle = ShapeFactory.getShape(<span class="string">&quot;CIRCLE&quot;</span>);</span><br><span class="line">        circle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape rectangle = ShapeFactory.getShape(<span class="string">&quot;RECTANGLE&quot;</span>);</span><br><span class="line">        rectangle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape square = ShapeFactory.getShape(<span class="string">&quot;SQUARE&quot;</span>);</span><br><span class="line">        square.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Circle</span><br><span class="line">Draw Circle</span><br><span class="line">Rectangle</span><br><span class="line">Draw Rectangle</span><br><span class="line">Square</span><br><span class="line">Draw Square</span><br></pre></td></tr></table></figure><p>这样的实现有个问题，如果我们新增产品类的话，就需要修改工厂类中的<code>getShape（）</code>方法，这很明显不符合 开放-封闭原则 。</p><h3 id="工厂方法-1"><a href="#工厂方法-1" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可。</p><p>(1)增加一个工厂接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）增加相关工厂类:</p><p>圆形工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长方形工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圆形工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory circlefactory = <span class="keyword">new</span> CircleFactory();</span><br><span class="line">        Shape circle = circlefactory.getShape();</span><br><span class="line">        circle.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Circle</span><br><span class="line">Draw Circle</span><br></pre></td></tr></table></figure><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。<br>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏<br>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><h4 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h4><p>和工厂方法一样客户端不需要知道它所创建的对象的类。<br>需要一组对象共同完成某种功能时，并且可能存在多组对象完成不同功能的情况。（同属于同一个产品族的产品）<br>系统结构稳定，不会频繁的增加对象。（因为一旦增加就需要修改原有代码，不符合开闭原则）<br><strong>场景：</strong><br>不知道大家玩过穿越火线或者吃鸡这类游戏了吗，游戏中存在各种枪。我们假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）</p><h4 id="抽象工厂模式实例"><a href="#抽象工厂模式实例" class="headerlink" title="抽象工厂模式实例"></a>抽象工厂模式实例</h4><p>（1）创建相关接口：</p><p>枪</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子弹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建接口对应实现类：</p><p>AK类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK</span> <span class="keyword">implements</span> <span class="title">Gun</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;shooting with AK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>M4A1类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1</span> <span class="keyword">implements</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;shooting with M4A1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AK子弹类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK_Bullet</span> <span class="keyword">implements</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Load bullets with AK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>M4A1子弹类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1</span></span></span><br><span class="line"><span class="class"><span class="title">_Bullet</span> <span class="keyword">implements</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Load bullets with M4A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）创建工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）创建具体工厂</p><p>生产AK和AK子弹的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK_Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AK();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AK_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产M4A1和M4A1子弹的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1_Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> M4A1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> M4A1_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">     Factory factory;</span><br><span class="line">     Gun gun;</span><br><span class="line">     Bullet bullet;</span><br><span class="line"></span><br><span class="line">     factory =<span class="keyword">new</span> AK_Factory();</span><br><span class="line">     bullet=factory.produceBullet();</span><br><span class="line">     bullet.load();</span><br><span class="line">     gun=factory.produceGun();</span><br><span class="line">     gun.shooting(); </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Load bullets with AK</span><br><span class="line">shooting with AK</span><br></pre></td></tr></table></figure><p>参考文章： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a><br>                   <a href="https://www.imooc.com/article/31360">https://www.imooc.com/article/31360</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工厂模式包括简单工厂，工厂方法，抽象工厂，这里分别介绍前后端工厂模式以及示例&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="工厂模式" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GIT篇---4.使用 diff 查看修改了哪些代码，分支管理(Windows系统)</title>
    <link href="http://yoursite.com/2020/08/31/git4/"/>
    <id>http://yoursite.com/2020/08/31/git4/</id>
    <published>2020-08-31T10:12:16.927Z</published>
    <updated>2020-08-31T10:16:56.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-名词定义"><a href="#1-名词定义" class="headerlink" title="1.名词定义"></a>1.名词定义</h2><a id="more"></a><p>在学习 Git 的diff命令之前，我们先来统一 一下两个名词的理解，分别是工作区和暂存区。</p><h3 id="1-1-工作区"><a href="#1-1-工作区" class="headerlink" title="1.1 工作区"></a>1.1 工作区</h3><p>工作区，指的是当前正在编辑的文件，将还没有修改的内容通过git add命令暂存起来；比如我现在修改了index.php文件中的一行代码，没有执行git add index.php命令，那么 index.php 便处于工作区状态。</p><h3 id="1-2-暂存区"><a href="#1-2-暂存区" class="headerlink" title="1.2 暂存区"></a>1.2 暂存区</h3><p>暂存区，指的是文件修改之后并且通过git add命令临时存储到版本记录里了，但还没有正式通过git commit提交的阶段；比如我现在新增一个test.php文件，使用了git add test.php命令，那么此时， test.php 文件的改动就已经进入到了暂存区。</p><h3 id="1-3-比较工作区变动"><a href="#1-3-比较工作区变动" class="headerlink" title="1.3 比较工作区变动"></a>1.3 比较工作区变动</h3><p>现在我编辑了index.php文件，并且在里面加入了内容，如果我想通过 git 命令查看增加了哪些内容，参考命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff </span><br></pre></td></tr></table></figure><h3 id="1-4-比较暂存区变动"><a href="#1-4-比较暂存区变动" class="headerlink" title="1.4  比较暂存区变动"></a>1.4  比较暂存区变动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached  diff.php</span><br></pre></td></tr></table></figure><h3 id="1-5-与指定记录比较"><a href="#1-5-与指定记录比较" class="headerlink" title="1.5 与指定记录比较"></a>1.5 与指定记录比较</h3><p>有些时候，我们可能需要代码和历史的某一个版本进行比较，这个时候你可以先通过<code>git log</code></p><h3 id="1-6-工作区比较"><a href="#1-6-工作区比较" class="headerlink" title="1.6 工作区比较"></a>1.6 工作区比较</h3><p>将要比较的 hash 值复制下来，然后执行如下所示命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure><h3 id="1-7-暂存区比较"><a href="#1-7-暂存区比较" class="headerlink" title="1.7 暂存区比较"></a>1.7 暂存区比较</h3><p>有些时候，我们想把暂存区的改动和指定记录进行对比，那么在命令中加入–cached 即可，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached <span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure><h3 id="1-8-与最新版本库比较"><a href="#1-8-与最新版本库比较" class="headerlink" title="1.8 与最新版本库比较"></a>1.8 与最新版本库比较</h3><p>很多时候，我们只需要将未正式提交的代码（包含工作区与暂存区）与最新的 commit 记录进行比较，虽然也可以通过指定 commit 的 hash 值进行，但是却很不方便，需要先获取到 hash 值，这里介绍一个简单的方法，可以通过git diff HEAD命令方式快速对比，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><p>在执行的命令中，HEAD指的是当前所在的分支名，如果你想比较其他分支也可以将 HEAD 改成其他分支名。</p><h3 id="1-9-比较两个历史记录"><a href="#1-9-比较两个历史记录" class="headerlink" title="1.9 比较两个历史记录"></a>1.9 比较两个历史记录</h3><p>有时候，可能会需要查看某一次提交记录修改了什么内容，这个时候就需要将两个历史记录进行比较；首先通过git log命令获取到需要查看的记录 hash 值，然后再找到这个记录的上一个版本的 hash 值，拼接的参考命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="built_in">hash</span>值1  <span class="built_in">hash</span>值2</span><br></pre></td></tr></table></figure><h2 id="2-分支管理"><a href="#2-分支管理" class="headerlink" title="2.分支管理"></a>2.分支管理</h2><h3 id="2-1查看分支"><a href="#2-1查看分支" class="headerlink" title="2.1查看分支"></a>2.1查看分支</h3><p>在学习分支管理之前，我们先来查看一下分支。分支分为两种，一种是本地已经存在的，还有一种是服务器上有，但本地不存在的分支，查看的方式稍有区别。</p><h3 id="2-2查看本地的分支"><a href="#2-2查看本地的分支" class="headerlink" title="2.2查看本地的分支"></a>2.2查看本地的分支</h3><p>Git 查看分支的命令为 git branch，在不带参数的情况下，默认查看到的是本地分支列表，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><h4 id="2-3查看所有分支"><a href="#2-3查看所有分支" class="headerlink" title="2.3查看所有分支"></a>2.3查看所有分支</h4><p>在 git branch 中再加入一个 -a 参数，可以理解为 all 的意思，就是查看本地的分支和远程的所有分支，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a </span><br></pre></td></tr></table></figure><h3 id="2-4新建分支"><a href="#2-4新建分支" class="headerlink" title="2.4新建分支"></a>2.4新建分支</h3><p>新建分支有两种情况，第一种是远程已经有的分支，需要把它在本地也同样创建一份；还有一种是新建一个远端和本地都不存在的分支。</p><h4 id="2-4-1导入远程分支"><a href="#2-4-1导入远程分支" class="headerlink" title="2.4.1导入远程分支"></a>2.4.1导入远程分支</h4><p>把远程分支在本地创建，可以通过 <code>git checkout</code> 分支名 命令进行，<strong>这个命令其实是切换分支用的</strong>。但当它发现你本地不存在这个分支，会自动找到远程对应的分支然后在本地进行创建，参考命令如下所示：<br>（在执行前，需要确保这个分支在远程或者本地已经存在）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>切换分支成功之后，会提示已经切换分支成功，以及提示你当前分支对应远程的分支名</p><h4 id="2-4-2-新建本地分支"><a href="#2-4-2-新建本地分支" class="headerlink" title="2.4.2 新建本地分支"></a>2.4.2 新建本地分支</h4><p>新建一个远程和本地都不存在的分支方式，和切换分支区别不大，只需要在 <code>git checkout</code> 分支名 中间加入参数 <code>-b</code> 即可。通过这种方式，创建的分支结构和内容会与当前所在的分支一模一样，也就是说，它其实就是复制了当前的分支，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>在提示中，同样可以看到会告诉你切换分支成功，但没有提示你对应远程的分支名，因为远程现在还不存在这个分支。所以你此时如果使用 <code>git push</code> 是不能直接推送的，需要在第一次推送的时候指定远程分支名，参考命令如下图所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="2-5合并分支"><a href="#2-5合并分支" class="headerlink" title="2.5合并分支"></a>2.5合并分支</h3><p>假设我们现在有三个分支，分别是:master生产环境、develop开发环境、test bug 修复分支。现在我在 test 分支中修复了 BUG，需要发布到线上生产服务器上，那么我们就可以通过合并分支的方式将test分支的代码合并到 master 分支中去。</p><h4 id="2-5-1-合并代码"><a href="#2-5-1-合并代码" class="headerlink" title="2.5.1 合并代码"></a>2.5.1 合并代码</h4><p>合并的时候， Git 会对比两个分支代码的差异，当 test 分支处于比较新的状态时候，Git 会将 test 分支的代码和提交记录复制到 master 分支中来，合并代码的参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="2-5-2-查看合并记录"><a href="#2-5-2-查看合并记录" class="headerlink" title="2.5.2 查看合并记录"></a>2.5.2 查看合并记录</h4><p>在代码合并之后，可以通过 <code>git log</code> 方式查看到合并记录，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="2-5-3-删除分支"><a href="#2-5-3-删除分支" class="headerlink" title="2.5.3  删除分支"></a>2.5.3  删除分支</h4><p>一般用来修复 BUG 的分支，我们可以把它当做是一个临时分支，当合并到 master 之后，就可以删除掉它了，这样可以减少 Git 仓库的体积。删除分支有两种方式，普通删除和强制删除。</p><h5 id="2-5-3-1-普通删除"><a href="#2-5-3-1-普通删除" class="headerlink" title="2.5.3.1 普通删除"></a>2.5.3.1 普通删除</h5><p>Git 中删除分支的命令为<code>git branch -d</code> 分支名，其中参数-d代表的是普通删除。一般情况下，删除使用普通删除即可。普通删除相对来说比较安全，避免造成数据丢失的情况，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="2-5-3-2-强制删除"><a href="#2-5-3-2-强制删除" class="headerlink" title="2.5.3.2 强制删除"></a>2.5.3.2 强制删除</h5><p>在极少数情况下你可能会遇到普通删除无法将分支删除的情况，这个时候你可以将-d替换成-D，这样就可以进行强制删除，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-名词定义&quot;&gt;&lt;a href=&quot;#1-名词定义&quot; class=&quot;headerlink&quot; title=&quot;1.名词定义&quot;&gt;&lt;/a&gt;1.名词定义&lt;/h2&gt;</summary>
    
    
    
    <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GIT篇---3.如何把修改后的代码提交到远程仓库(Windows系统)</title>
    <link href="http://yoursite.com/2020/08/31/git3/"/>
    <id>http://yoursite.com/2020/08/31/git3/</id>
    <published>2020-08-31T09:48:53.962Z</published>
    <updated>2020-08-31T10:17:03.723Z</updated>
    
    <content type="html"><![CDATA[<h6 id="将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。"><a href="#将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。" class="headerlink" title="将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。"></a>将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。</h6><a id="more"></a><h2 id="1-同步远程代码"><a href="#1-同步远程代码" class="headerlink" title="1.同步远程代码"></a>1.同步远程代码</h2><p>一个远程仓库有可能有多人有权限推送，所以存在远程代码比你本地仓库更新，因此在提交代码之前需要先拉取服务器代码，让本地仓库保持最新的版本记录；这样做的目的是为了防止当你提交代码之后，推送到远端出现代码冲突问题，拉取远程代码参考命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull </span><br></pre></td></tr></table></figure><h2 id="2-检查改动文件"><a href="#2-检查改动文件" class="headerlink" title="2.检查改动文件"></a>2.检查改动文件</h2><p>当远端最新的代码拉下来之后，我们最好（非必须，建议每次提交前检查）通过git status命令检查一下有哪些文件被改动了，参考命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>在终端执行完命令之后，有删除的、有添加的、也有修改内容的</p><ul><li>Untracked: 未跟踪,一般为新增文件，此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作.</li><li>deleted： 文件已删除，本地删除，服务器上还没有删除.</li><li>renamed：文件名称被改变<br>如果发现无意中编辑了某一个文件，但实际上并不想改变它，这里可以使用git checkout 文件名来撤销更改，参考命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout README.md</span><br></pre></td></tr></table></figure><p>撤销后，再次使用<code>git status</code>进行查看变动</p><h2 id="3-添加文件到缓存"><a href="#3-添加文件到缓存" class="headerlink" title="3.添加文件到缓存"></a>3.添加文件到缓存</h2><p>通过检查并将不需要改动的代码恢复后，就可以开始将需要提交的文件添加到暂存区中，添加文件到暂存区可以指定添加文件或目录，或者一次性添加全部改动到缓存。<br>先来看看提交指定文件或目录至缓存的格式，参考命令如下：<code>git add index.php</code><br>也可以使用刚才的命令将 app目录,提交到缓存中去，参考命令如下：<code>git add app</code><br>如果一次性添加所有文件，那么可以把命令这样写<code>git add .</code>(记住有点)</p><h2 id="4-提交代码"><a href="#4-提交代码" class="headerlink" title="4. 提交代码"></a>4. 提交代码</h2><p>当你将所需要提交的代码都添加到缓存区域后，接下来就可以将代码提交到本地仓库中，参考命令如下所示 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit . -m “这是备注信息”</span><br></pre></td></tr></table></figure><h2 id="5-推送代码"><a href="#5-推送代码" class="headerlink" title="5.推送代码"></a>5.推送代码</h2><p>当代码提交之后，在本地的工作就已经完成了，此时为了让其他人拉取你的代码，通常还需要将代码推送到远程仓库，这里我告诉大家最简单的方式，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>]]></content>
    
    
    <summary type="html">&lt;h6 id=&quot;将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&quot;&gt;&lt;a href=&quot;#将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&quot; class=&quot;headerlink&quot; title=&quot;将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&quot;&gt;&lt;/a&gt;将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。&lt;/h6&gt;</summary>
    
    
    
    <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GIT篇---2.拉取远端代码以及配置ssh公钥（包含码云和github配置）（Windows系统）</title>
    <link href="http://yoursite.com/2020/08/31/git2/"/>
    <id>http://yoursite.com/2020/08/31/git2/</id>
    <published>2020-08-31T09:36:52.809Z</published>
    <updated>2020-08-31T10:59:55.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拉取远端代码：使用Git命令下载远程仓库到本地"><a href="#拉取远端代码：使用Git命令下载远程仓库到本地" class="headerlink" title="拉取远端代码：使用Git命令下载远程仓库到本地"></a>拉取远端代码：使用Git命令下载远程仓库到本地</h2><a id="more"></a><h3 id="1-创建远程代码仓库"><a href="#1-创建远程代码仓库" class="headerlink" title="1. 创建远程代码仓库"></a>1. 创建远程代码仓库</h3><h4 id="1-1-在github或者码云注册账号并且创建仓库（实例github）"><a href="#1-1-在github或者码云注册账号并且创建仓库（实例github）" class="headerlink" title="1.1 在github或者码云注册账号并且创建仓库（实例github）"></a>1.1 在github或者码云注册账号并且创建仓库（实例github）</h4><p>注册过程不再演示</p><h5 id="1-1-1-点击new即可"><a href="#1-1-1-点击new即可" class="headerlink" title="1.1.1 点击new即可"></a>1.1.1 点击new即可<img src="https://img-blog.csdnimg.cn/20200831165911624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h5><h5 id="1-1-2-输入仓库名称及介绍点击确定即可"><a href="#1-1-2-输入仓库名称及介绍点击确定即可" class="headerlink" title="1.1.2 输入仓库名称及介绍点击确定即可"></a>1.1.2 输入仓库名称及介绍点击确定即可<img src="https://img-blog.csdnimg.cn/20200831170006169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h5><p>创建好之后 复制地址<br><img src="https://img-blog.csdnimg.cn/20200831170411722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>建立远程仓库之后，默认里面有几个文件；接下来我们通过 git 的命令将远程仓库拉取到本地，一般会提供 HTTP 协议和 SSH 两种协议提供管理，两种协议所使用的鉴权方式不同，下面我们将两种方法都实践一次；</p><h3 id="2-HTTP-S-获取远程仓库"><a href="#2-HTTP-S-获取远程仓库" class="headerlink" title="2.  HTTP(S)获取远程仓库"></a>2.  HTTP(S)获取远程仓库</h3><h4 id="2-1-首次拉取"><a href="#2-1-首次拉取" class="headerlink" title="2.1 首次拉取"></a>2.1 首次拉取</h4><p>HTTP 协议首次拉取代码的命令格式如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 版本库地址    [本地文件夹名称]</span><br></pre></td></tr></table></figure><p>假设我需要把刚才新建的仓库代码拉取到本地,并且本地的文件夹名称叫gitText(也可以不指定本地文件夹名称，默认名字为远程仓库名字)，参考命令如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/highfish920/text-git.git gitText</span><br></pre></td></tr></table></figure><p>结果：<img src="https://img-blog.csdnimg.cn/20200831170810727.png#pic_center" alt="在这里插入图片描述"><br>这里警告是指克隆了一个空的存储库（因为新建的没有东西嘛）但是本地已经有了这个文件夹<br><img src="https://img-blog.csdnimg.cn/20200831170919893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果要求输入用户名密码才可以拉取的话输入用户名密码即可</p><h4 id="2-2-更新代码"><a href="#2-2-更新代码" class="headerlink" title="2.2 更新代码"></a>2.2 更新代码</h4><p>假设远程代码有变更，你想把本地代码更新时，可以在本地的版本库目录下通过git pull命令更新，不需要再指定远程地址，参考命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="2-3-临时记住密码"><a href="#2-3-临时记住密码" class="headerlink" title="2.3 临时记住密码"></a>2.3 临时记住密码</h4><p>如果你不想每次都输入 git 的认证信息，可以设置缓存认证数据，默认记住 15 分钟，如下命令所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config –-global credential.helper cache</span><br></pre></td></tr></table></figure><p>如果你想缓存更长时间，也可以指定缓存时长，比如下面是自定义配置记住 1 小时的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper ‘cache –timeout=3600’</span><br></pre></td></tr></table></figure><h4 id="2-5-永久记住密码"><a href="#2-5-永久记住密码" class="headerlink" title="2.5 永久记住密码"></a>2.5 永久记住密码</h4><p>如果你不想每次提交代码都要输入用户名密码，也可以让 Git 永久记住密码，参考命令如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>命令执行完毕之后，会在当前用户主目录的.gitconfig文件中新增一项配置，配置如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure><p>在上面的命令中，如果没有–global，则会在当前项目下的.git/config文件增加配置</p><p>从这里可以看出， git 永久记住密码其实是根据配置文件所决定，所以你也可以直接复制上面生成的配置到配置文件中。</p><h3 id="3-SSH拉取"><a href="#3-SSH拉取" class="headerlink" title="3.SSH拉取"></a>3.SSH拉取</h3><h4 id="3-1-1-拉取代码"><a href="#3-1-1-拉取代码" class="headerlink" title="3.1.1 拉取代码"></a>3.1.1 拉取代码</h4><p>现在我们再来看看SSH方式，相比HTTP(S)来说更加安全,因为SSH方式使用的是非对称加密，采用公钥与私钥的方式，不过相对来说配置起来会麻烦一些；好处是一次配置之后，后续不需要每次都进行认证，也更加安全。<br>ssh 方式首次拉取代码的命令没有什么变化，相比来说只是远程地址有变化，如下命令所示<br><img src="https://img-blog.csdnimg.cn/20200831171337935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:highfish920/text-git.git  git-text-ssh</span><br></pre></td></tr></table></figure><p>可以看到成功了<br><img src="https://img-blog.csdnimg.cn/20200831171505877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-2-创建一个ssh-key（github）"><a href="#3-1-2-创建一个ssh-key（github）" class="headerlink" title="3.1.2 创建一个ssh key（github）"></a>3.1.2 创建一个ssh key（github）</h4><p><strong>如果没有拉取成功的原因是没有配置公钥与私钥的话</strong><br>通过 ssh 协议拉取代码首先要保证当前用户的主目录存在一个.ssh的文件夹，并且里面已经存在私钥文件，如果没有的话我们可以通过<code>ssh-keygen</code>，生成一份公钥与私钥，如下命令所示<br>直接回车，输入y，接着回车<br><img src="https://img-blog.csdnimg.cn/20200831171900256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中这两个地址分别保存了秘钥与公钥<br><img src="https://img-blog.csdnimg.cn/20200831172433386.png#pic_center" alt="在这里插入图片描述"><br>接下来复制公钥（重新生成之后会覆盖原先的公钥，需要github和码云重新配置）<br>打开github，点击头像下面的settings<br><img src="https://img-blog.csdnimg.cn/202008311727484.png#pic_center" alt="在这里插入图片描述"><br>然后点击SSH那个，点击new GPG key 粘贴公钥即可，其中的Title随便写（这里原先配置过，所以有一个）<br><img src="https://img-blog.csdnimg.cn/20200831172955638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>配置成功后在尝试拉取代码即可</p><h4 id="3-1-3-创建一个ssh-key（码云）"><a href="#3-1-3-创建一个ssh-key（码云）" class="headerlink" title="3.1.3 创建一个ssh key（码云）"></a>3.1.3 创建一个ssh key（码云）</h4><p>当确认公钥和私钥生成完毕之后，我们还需要将公钥放到远程的 git 仓库中去，在码云的版本库中，个人设置》安全》ssh公钥，在管理页面的左侧菜单中有一个添加公钥的选项，我们将上面的公钥内容复制进去即可</p><h4 id="3-1-4-更新代码"><a href="#3-1-4-更新代码" class="headerlink" title="3.1.4 更新代码"></a>3.1.4 更新代码</h4><p>ssh 方式更新代码命令和上面的 http 方式拉取代码命令一致，同样需要在 git-text-ssh目录下执行命令：git pull，然后可以看到git成功的拉取到了代码<br>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;拉取远端代码：使用Git命令下载远程仓库到本地&quot;&gt;&lt;a href=&quot;#拉取远端代码：使用Git命令下载远程仓库到本地&quot; class=&quot;headerlink&quot; title=&quot;拉取远端代码：使用Git命令下载远程仓库到本地&quot;&gt;&lt;/a&gt;拉取远端代码：使用Git命令下载远程仓库到本地&lt;/h2&gt;</summary>
    
    
    
    <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GIT篇---1.安装GIt以及GIT基本认识和配置(Windows系统)</title>
    <link href="http://yoursite.com/2020/08/31/git1/"/>
    <id>http://yoursite.com/2020/08/31/git1/</id>
    <published>2020-08-31T08:52:21.972Z</published>
    <updated>2020-08-31T10:17:16.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装-Git"><a href="#1-安装-Git" class="headerlink" title="1. 安装 Git"></a>1. 安装 Git</h2><a id="more"></a><p>在 Windows 系统中安装Git非常简单，只需要下载Git的安装包，然后安装引导点击安装即可：</p><p>Git下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>下载完安装包之后，双击 EXE 安装包，一直点击Next安装即可在安装完成之后，会在你的右键菜单栏中增加一个Git的选项，你可以在电脑桌面点击鼠标右键，会看到多出两个菜单，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200831162657644.png#pic_center" alt="在这里插入图片描述"><br>当你点击Git bash Here菜单之后，可以看到一个终端窗口，在终端里面输入命令git –version，如果可以看到 git 的版本信息，则说明安装成功，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200831165049265.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2-本地创建一个-Git-仓库"><a href="#2-本地创建一个-Git-仓库" class="headerlink" title="2.本地创建一个 Git 仓库"></a>2.本地创建一个 Git 仓库</h2><ol><li>创建本地文件夹text</li><li>进入本地文件夹目录终端输入 <code>git init</code> 初始化仓库，初始化后，会发现文件夹里面多出了一个.git的文件<br><img src="https://img-blog.csdnimg.cn/20200831163313603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>简单认识.git</li></ol><p><img src="https://img-blog.csdnimg.cn/20200831163522222.png#pic_center" alt="在这里插入图片描述"></p><ul><li>hooks 目录包含客户端或服务端的钩子脚本</li><li>objects 目录存储所有数据内容</li><li>info 目录包含一个全局性排除文件</li><li>refs 目录存储分支的提交对象的指针</li><li>description用来显示对仓库的描述信息</li><li>HEAD 文件指示目前被检出的分支</li><li>config 文件包含项目特有的配置选项</li></ul><ol start="4"><li>查看配置信息<br>在设置昵称和邮箱之前，可以先检查一下之前有没有配置过昵称和邮箱<br>查看昵称的命令如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure><p>查看邮箱的命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200831163906797.png#pic_center" alt="在这里插入图片描述"></p><p>4.1 设置配置信息<br>如果执行上面的命令没有返回相应的昵称和邮箱，说明你还没有配置昵称和邮箱。那么就需要进行配置<br>配置昵称的命令参考如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的昵称&quot;</span></span><br></pre></td></tr></table></figure><p>配置邮箱的命令参考如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>4.2 修改配置信息<br>在配置中如果不小心配置错了，或者后面想修改配置的时候，是不能通过重复执行上面的设置昵称命令，来修改昵称的，邮箱修改同理。如果你多次设置昵称，它会在命令执行后提示你无法重复配置或者可能不给你提示，但是这种情况会导致一个 key 配置了多个 value 的问题。</p><p><strong>介绍两种方法， 第一种是通过命令行，第二种是通过修改配置文件。</strong></p><p>4.2.1 <strong>命令行修改配置</strong></p><p>通过命令行修改的方式比较简单，直接执行以下的命令即可<br>修改昵称参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --replace-all user.name <span class="string">&quot;your user name&quot;</span></span><br></pre></td></tr></table></figure><p>修改邮箱地址参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --replace-all user.email<span class="string">&quot;your user email&quot;</span></span><br></pre></td></tr></table></figure><p>4.2.2 <strong>修改配置文件</strong></p><p>Windows 系统位于用户主目录下，假设你当前的用户是administrator，那么对应的配置文件的路径应该是 C:\Users\administrator.gitconfig，可以直接使用记事本修改里边的 name 或者 email。</p><p>如果之前已经配置过昵称和邮箱的情况下，当使用记事本打开配置文件之后，可以看到如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">        name = daxia</span><br><span class="line">        email = 78778443@qq.com</span><br></pre></td></tr></table></figure><p>在如果有重复的 name 或 email，可以将其删掉，只剩下一个就好。修改完，通过 git bash 输入 git config –list可以查看是否修改成功了。<br>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-安装-Git&quot;&gt;&lt;a href=&quot;#1-安装-Git&quot; class=&quot;headerlink&quot; title=&quot;1. 安装 Git&quot;&gt;&lt;/a&gt;1. 安装 Git&lt;/h2&gt;</summary>
    
    
    
    <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>单页面应用有什么SEO方案</title>
    <link href="http://yoursite.com/2020/08/30/seo/"/>
    <id>http://yoursite.com/2020/08/30/seo/</id>
    <published>2020-08-30T08:44:02.195Z</published>
    <updated>2020-08-30T08:44:34.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单页面应用有什么SEO方案"><a href="#单页面应用有什么SEO方案" class="headerlink" title="单页面应用有什么SEO方案"></a>单页面应用有什么SEO方案</h2><a id="more"></a><p>1    前端要采用history模式（HTML5 History API），一般用来写单页应用的框架都有这个模式。<br>2    要用后端做一套页面，内容和对应的前端页面一模一样，即所谓静态化，我用的sails框架即可实现这一点，主流的如Node.js的express框架也可以，php应该也行。<br>3    必须用nginx做代理跳转，将搜索引擎识别出后流量引到后端的端口上，看到预先渲染给搜索引擎看的页面，还有history模式自带的404问题也需要在nginx里将404转index.html或者rewrite才可以<br><strong>原因：</strong> 较之于传统页面，单页应用需要先下载框架（数据 / 模板），然后才能开始加载数据<br>方案：<br>1    服务器端渲染首屏（SSR基于vue的服务端下载）<br>2    让服务端把首屏的数据渲染在页面上<br>3    进行基本的css 模板 js的编译合并<br>4    减少请求次数，使用gulp工具，把 css 打包成一个文件, js打包成一个文件, 模板打包成一个js文件($templateCache) 可以和js 文件打包成一起（促使模板JS文件和JS文件一次性请求）<br>5    代码分块，如果首屏不需要的块，就不用加载了<br>6    路由组件懒加载。当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样更加高效。<br>7    如果有大量图片使用懒加载</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;单页面应用有什么SEO方案&quot;&gt;&lt;a href=&quot;#单页面应用有什么SEO方案&quot; class=&quot;headerlink&quot; title=&quot;单页面应用有什么SEO方案&quot;&gt;&lt;/a&gt;单页面应用有什么SEO方案&lt;/h2&gt;</summary>
    
    
    
    <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="SEO" scheme="http://yoursite.com/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>如何优化dom操作的性能</title>
    <link href="http://yoursite.com/2020/08/30/dom%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/08/30/dom%E4%BC%98%E5%8C%96/</id>
    <published>2020-08-30T08:40:21.977Z</published>
    <updated>2020-08-30T08:43:58.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何优化dom操作的性能"><a href="#如何优化dom操作的性能" class="headerlink" title="如何优化dom操作的性能"></a>如何优化dom操作的性能</h2><a id="more"></a><p>1    查找元素的优化。因为ID是唯一的，也有原始的方法，因此使用ID查找元素是最快的，其次的是根据类和类型查找元素，通过属性查找元素是最慢的，因此应该尽可能的通过ID或者类来查找元素，避免通过属性来查找元素<br>2    减少访问和改变DOM元素，包括添加，修改，删除DOM<br>  改变DOM就会引起浏览器渲染，而渲染是相当慢的，因此应该避免不必要的渲染</p><p>3    减少改变DOM的样式类等<br> 改变DOM元素的样式，类也会导致浏览器渲染，因此也应该减少不必要的操作<br>4    批量修改DOM时从文档流中摘除该元素 ，对其应用多重改变 ，将元素带回文档中 ， 这样可以最小化重绘和重排版 。<br>具体方法: 1 隐藏元素，进行修改，然后再显示它。 2将原始元素拷贝到一个脱离文档的节点中，修改副本，然后覆盖原始元素。<br>5    减少iframe    iframe需要消耗大量的时间，并阻塞下载，建议少用<br>6    样式放在header中，脚本放在关闭标签</body>之前样式放在header中，可以加快渲染，脚本放在关闭标签</body>之前可以加快下载速度，不免阻塞下载。<br>7    使用事件委托，减少绑定事件的数量<br>8    多次访问同一DOM，应该用局部变量缓存该DOM</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;如何优化dom操作的性能&quot;&gt;&lt;a href=&quot;#如何优化dom操作的性能&quot; class=&quot;headerlink&quot; title=&quot;如何优化dom操作的性能&quot;&gt;&lt;/a&gt;如何优化dom操作的性能&lt;/h2&gt;</summary>
    
    
    
    <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="dom" scheme="http://yoursite.com/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>CDN的用法，CDN</title>
    <link href="http://yoursite.com/2020/08/30/cdn/"/>
    <id>http://yoursite.com/2020/08/30/cdn/</id>
    <published>2020-08-30T08:39:15.088Z</published>
    <updated>2020-08-30T08:40:12.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><a id="more"></a><p>CDN即内容分发网络。CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求<br>CDN的使用，以腾讯CDN为例：<br>1    登录腾讯云CDN，选择“接入管理”，点击“添加域名”添加我们需要加速的域。<br>2    进入“添加域名”界面，在域名那里填好你要加速的域名。源站IP那里可以填自己服务器的IP。如果你用的是虚拟主机，可以填空间商给你的域名。配置完成后点下一步！<br>3    进入“基本配置”界面，填写相关要求，在缓存时间那里，腾讯CDN默认的是将你所有的文件缓存30天，你可以根据自身情况修改天数。填写好后点击下一步。<br>4    下一步也差不多，填写相关要求，没问题点击提交就好。</p><p>CDN的适用场景：<br>解决因分布、带宽、服务器性能带来的访问延迟问题,适用于网站站点/应用加速、点播、直播、视音频点播、大文件下载分发加速、移动应用加速等场景</p><h2 id="CDN的用法"><a href="#CDN的用法" class="headerlink" title="CDN的用法"></a>CDN的用法</h2><p>1    把css放在head中加载，这个能让页面更早的开始渲染。避免把css放在页面尾部，否则可能会出现闪屏，如果css加载的很慢，DOM结构先出来，css后出来，然后页面样式突然发生变化，就造成了闪屏。<br>2    把js放在body末尾加载，因为js它本身会阻塞HTML的解析以及css的渲染。<br>3    不要使用css的表达式，css的表达式一方面是兼容性问题，虽然看起来比较强大，但是实际性能开销很大，因为它实际的执行频率是远远超出预期的，如果使用了css的表达式，可能导致页面卡顿。</p><p>4    用外链的方式引用css和js，可以有效的减少HTML的体积，并且外链了之后，css和js作为静态资源可以给他设置合适的缓存的响应头；能够合理的利用浏览器的缓存。<br>5    压缩js和css，在生产环境里面删除这一类文件不必要的注释、空白，并且对js进行变量名压缩，混淆压缩，对css进行属性的合并，然后进行选择符的合并。<br>6    不重复加载js，因为在IE里面，还是会有多个请求，不能发挥缓存优势，并且你重复加载js，意味着要更长的js执行时间。<br>7    让Ajax请求可缓存，GZIP、内容压缩都可以适用。<br>8    用GET方式发起Ajax请求，因为GET方式可以缓存，如果是获取信息的，那么GET方式是更语义化的。<br>9    组件延迟加载，保障页面关键的静态资源优先加载，因为并发数限制，还有一些延迟加载的典型手段叫做“lazyload”。<br>10    减少DOM节点数，DOM节点这个规则是非常容易理解，就是如果你的DOM结构非常的复杂，那么浏览器在解析的时候，进行布局、渲染时计算量更大，那么少一点的话，浏览器的开销会少一些，渲染布局的速度就会快一些。<br>11    避免在页面中使用frame类（包括iframe和frameset），因为iframe它会阻塞父文档的onload，即使它是一个空白的也会比较耗时。<br>12    要减少COOKIE的体积，因为COOKIE在每一次请求，就是跟主文档相关的，只要是同域的，COOKIE的全部内容都可以带上。<br>13    使用无cookie域名加载静态资源，可以减少静态资源加载时的网络传输量，静态资源加载通常是不需要cookie的。<br>14    减少js中的DOM访问，还有对于你查找到的元素，缓存在js的变量中，后面就不需要在去查找DOM树了，还有节点增加是合理利用DocumentFragment，然后在把DocumentFragment放在实际的DOM树里面，然后还有一个是不要用js去频繁修改样式。<br>15    使用更多的事件监听机制，基于事件冒泡的委托机制，你可以有效减少绑定的数量。<br>16    使用常见的图片优化手段，对于代码来说，图片的体积很大，常用的图片压缩工具有“PNGCrush”“JPEGTRAN”“PNGQUANT”。<br>17    不要在HTML中缩放图片，你实际上在页面上用到多大图片，那你就提供适当尺寸即可，不然它只会徒增渲染的开销。<br>18    不要把图片SRC置空，因为在主文档的浏览器里面都会引发额外的请求。<br>19    任何资源尽量在25k以内，因为iPhone无法缓存25k以上的资源。<br>20    预渲染，预渲染比预下载更进一步，不仅仅下载页面，而且还会预先将它渲染出来，目前在Chrome（9.0.597.0）中有实现，不过需要在about:flags中将’Web Page Prerendering’开启。<br>21    DNS优化；CDN优化；http优化；减少域名解析时间；增多域名提高并发</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CDN&quot;&gt;&lt;a href=&quot;#CDN&quot; class=&quot;headerlink&quot; title=&quot;CDN&quot;&gt;&lt;/a&gt;CDN&lt;/h2&gt;</summary>
    
    
    
    <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="CDN" scheme="http://yoursite.com/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>基本数据结构：（数组、 对列、 链表、堆、二叉树、嘻哈表等等），8种排序算法，原理，以及适用的场景和复杂度，费波拉切数列的实现方法</title>
    <link href="http://yoursite.com/2020/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2020/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-08-30T08:35:33.303Z</published>
    <updated>2020-08-30T08:35:46.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）"><a href="#数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）" class="headerlink" title="数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）"></a>数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）</h2><a id="more"></a><p> <img src="https://img-blog.csdnimg.cn/20200830163134546.png#pic_center" alt="在这里插入图片描述"></p><p>链表：存储的数据在地址空间上可连续，可不连续，链表中的每一个节点都包括数据和指向下一个地址的指针，查找数据的时间复杂度为O(n)，方便数据的增删。<br> <img src="https://img-blog.csdnimg.cn/20200830163128881.png#pic_center" alt="在这里插入图片描述"></p><p>栈：栈是一种先入后出的逻辑结构，每次加入新的元素和拿走元素都在顶部操作。<br> <img src="https://img-blog.csdnimg.cn/20200830163122153.png#pic_center" alt="在这里插入图片描述"></p><p>对列：是一种先入后出的逻辑结构，对于元素的操作分别在队头和队尾，元素的插入在队尾，元素的删除在队头。<br> <img src="https://img-blog.csdnimg.cn/2020083016311541.png#pic_center" alt="在这里插入图片描述"></p><p>二叉树：每个节点至多只有两个子树的结构，在父节点中有指向左右子树的指针。<br>二叉树的 先序遍历：根–左–右。中序遍历：左–根–右。后序遍历：左–右–根。<br>查找二叉树：左子树的值小于根节点的值，右子树的值大于根节点的值，在插入数据时，从根节点开始往下比较，小于比较值则放在左边，大于比较值放在右边。插入一个值的时间复杂度是O(logn)。<br>平衡二叉树：左右子树的高度差的绝对值不超过1。<br> <img src="https://img-blog.csdnimg.cn/20200830163108278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="8种排序算法，原理，以及适用的场景和复杂度"><a href="#8种排序算法，原理，以及适用的场景和复杂度" class="headerlink" title="8种排序算法，原理，以及适用的场景和复杂度"></a>8种排序算法，原理，以及适用的场景和复杂度</h2><p><img src="https://img-blog.csdnimg.cn/20200830163305556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里就体现2个常问的问题：冒泡排序的原理：<br>S1：从待排序序列的起始位置开始，从前往后依次比较各个位置和其后一位置的大小并执行S2。<br>S2：如果当前位置的值大于其后一位置的值，就把他俩的值交换（完成一次全序列比较后，序列最后位置的值即此序列最大值，所以其不需要再参与冒泡）。<br>S3：将序列的最后位置从待排序序列中移除。若移除后的待排序序列不为空则继续执行S1，否则冒泡结束。<br>在举个栗子<br><img src="https://img-blog.csdnimg.cn/20200830163319253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>快速排序：快速排序是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此实现整个数据变成有序序列<br>在举个栗子：<br><img src="https://img-blog.csdnimg.cn/20200830163333141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="费波拉切数列的实现方法"><a href="#费波拉切数列的实现方法" class="headerlink" title="费波拉切数列的实现方法"></a>费波拉切数列的实现方法</h2><p><img src="https://img-blog.csdnimg.cn/20200830163357899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）&quot;&gt;&lt;a href=&quot;#数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）&quot; class=&quot;headerlink&quot; title=&quot;数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）&quot;&gt;&lt;/a&gt;数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）&lt;/h2&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Vue，Angular，jquery--使用框架，zepto和jquery是什么关系，jquery源码如何实现选择器，为什么$取得的对象要设计成数组的形式，jquery如何绑定事件，有几种类型和区别，MVVM,MVC,MVP，Vue和Angular的双向数据绑定原理，Vue和Angular的组件通信以及路由原理？Vue和Angular的组件通信以及路由原理？</title>
    <link href="http://yoursite.com/2020/08/29/%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2020/08/29/%E6%A1%86%E6%9E%B6/</id>
    <published>2020-08-29T08:54:40.397Z</published>
    <updated>2020-08-30T08:35:29.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用框架"><a href="#使用框架" class="headerlink" title="使用框架"></a>使用框架</h2><a id="more"></a><p>UI框架    bootstrap、Mui、layui<br>js框架    vue、angular、react</p><h2 id="zepto和jquery是什么关系"><a href="#zepto和jquery是什么关系" class="headerlink" title="zepto和jquery是什么关系"></a>zepto和jquery是什么关系</h2><p>二者都是js库，zepto是jQuery的轻量级替代品，它与jquery有着类似的api，zepto主要是用在移动端，不支持IE浏览器，jquery主要用在PC端，jQuery 版本 2 以上不支持 IE6，7，8 浏览器</p><h2 id="jquery源码如何实现选择器，为什么-取得的对象要设计成数组的形式"><a href="#jquery源码如何实现选择器，为什么-取得的对象要设计成数组的形式" class="headerlink" title="jquery源码如何实现选择器，为什么$取得的对象要设计成数组的形式"></a>jquery源码如何实现选择器，为什么$取得的对象要设计成数组的形式</h2><p>jquery内部采用了一种“类数组对象”的方式作为存储结构，既可以像对象一样处理jQuery操作，也可以像数组一样使用push、pop、shift、sort、each、map等类数组的方法操作jquery</p><h2 id="jquery如何绑定事件，有几种类型和区别"><a href="#jquery如何绑定事件，有几种类型和区别" class="headerlink" title="jquery如何绑定事件，有几种类型和区别"></a>jquery如何绑定事件，有几种类型和区别</h2><p>jquery绑定事件的方法分别是：bind(),live(),delegate()和on()，<br>像bind(),live(),delegate(),随着jquery版本的更新，已经被移除，注意：bind()是在3.0版本之后被移除的，现在用的最多的是on()，on()既可以绑定单事件，也可以绑定多事件，还可以进行事件委托<br>区别就是：bind()的事件绑定是只对当前页面选中的元素有效，对动态创建的元素bind()事件，是没有办法达到效果的，而其余三个可以</p><h2 id="MVVM-MVC-MVP"><a href="#MVVM-MVC-MVP" class="headerlink" title="MVVM,MVC,MVP"></a>MVVM,MVC,MVP</h2><p>MVC：先介绍M:Model(模型)，V:View(视图) ，C：Controller（控制器),View层是展示html页面的，Controller层是业务逻辑，Model层是数据保存，视图的改变会通过控制器要求数据层改变状态，然后反馈给视图层。<br>MVVM：是将Controller改为VM，是Model-View-ViewModel的缩写，视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。<br>MVP：MVP模式是将Controller改为Presenter，View和Model之间不发生联系，都通过Presenter传递，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller</p><h2 id="Vue和Angular的双向数据绑定原理"><a href="#Vue和Angular的双向数据绑定原理" class="headerlink" title="Vue和Angular的双向数据绑定原理"></a>Vue和Angular的双向数据绑定原理</h2><p>Vue 双向数据绑定的原理：<br>vue将普通的对象的属性通过Object.defineProperty转换为ES5特性之一的 getter/setter，模板中每个指令/数据绑定都有一个对应的 watcher 对象, 当修改对象值的时，首先会触发属性的setter，在setter被调用时，会触发 watcher 重新计算 ，也就会导致它的关联指令更新 DOM<br><img src="https://img-blog.csdnimg.cn/2020082916492742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>Angular双向数据绑定的原理：<br>angular.js是通过脏值监测的方式查看数据是否变更，最简单的方法是通过setInterval()定时循环检测数据变动</p><h2 id="Vue和Angular的组件通信以及路由原理？"><a href="#Vue和Angular的组件通信以及路由原理？" class="headerlink" title="Vue和Angular的组件通信以及路由原理？"></a>Vue和Angular的组件通信以及路由原理？</h2><p>vue得组件通信，</p><ol><li>父组件传递数据给子组件<br>举个栗子<br><img src="https://img-blog.csdnimg.cn/20200829165250837.png#pic_center" alt="在这里插入图片描述"></li></ol><p>子组件通过props来接收数据:<br>方式1：<br>props: [‘childMsg’]<br>子组件与父组件通信</p><p>  <img src="https://img-blog.csdnimg.cn/20200829165259558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200829165305575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020082916531122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>Angular组件间通信<br>  Angular组件之间的通信方式分为三种：<br>1）    父组件向子组件通信（输入属性）分为两步：<br>        1、在子组件上定义自己要接受父组件输入的参数：<br>        <img src="https://img-blog.csdnimg.cn/20200829165325179.png#pic_center" alt="在这里插入图片描述"></p><pre><code>             2、在父组件的HTML模板中声明要输入的数据：             ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829165340141.png#pic_center)    子</code></pre><p>2）    子组件向父组件通信（输出属性）<br>          1、在子组件中设置要输出的类型：<br>          <img src="https://img-blog.csdnimg.cn/20200829165346505.png#pic_center" alt="在这里插入图片描述"></p><pre><code>        2、在html模板中设置事件：    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829165403486.png#pic_center)</code></pre><p>3、 在父组件的控制器中接收输出属性<br> <img src="https://img-blog.csdnimg.cn/20200829165408915.png#pic_center" alt="在这里插入图片描述"></p><pre><code> 3) 使用中间人模式通信        所谓中间人模式就是：当A =》 C 通信时，先将A =》B，B=》C,         B就是所谓中间人模式；         按照情况一般分为两种：         1、兄弟组件通信            这里我们选择父组件做为中间人，先是使用输出属性，再使用输入属性就OK了         2、非兄弟组件通信            选择一个依赖注入service做为中间人，然后进行通信。</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用框架&quot;&gt;&lt;a href=&quot;#使用框架&quot; class=&quot;headerlink&quot; title=&quot;使用框架&quot;&gt;&lt;/a&gt;使用框架&lt;/h2&gt;</summary>
    
    
    
    <category term="框架-类库" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6-%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="框架-类库" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6-%E7%B1%BB%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>java之-深拷贝、浅拷贝</title>
    <link href="http://yoursite.com/2020/08/28/java-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/28/java-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-08-28T09:32:33.389Z</published>
    <updated>2020-08-28T09:33:51.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java之-深拷贝、浅拷贝"><a href="#java之-深拷贝、浅拷贝" class="headerlink" title="java之-深拷贝、浅拷贝"></a>java之-深拷贝、浅拷贝</h2><a id="more"></a><p>文章转载自CodeSheep羊叔<br><a href="https://github.com/hansonwang99/JavaCollection">https://github.com/hansonwang99/JavaCollection</a></p><p>为了便于下文的讲述和举例，我们这里先定义两个类：Student和Major，分别表示「学生」以及「所学的专业」，二者是包含关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生的所学专业</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Major</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String majorName; <span class="comment">// 专业名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> majorId;     <span class="comment">// 专业代号</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学生</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;      <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Major major;  <span class="comment">// 所学专业</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200828172327769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>赋值 vs 浅拷贝 vs 深拷贝</p><p>对象赋值<br>赋值是日常编程过程中最常见的操作，最简单的比如：<br>Student codeSheep = new Student();<br>Student codePig = codeSheep;<br>严格来说，这种不能算是对象拷贝，因为拷贝的仅仅只是引用关系，并没有生成新的实际对象：<br><img src="https://img-blog.csdnimg.cn/2020082817233960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>浅拷贝<br>浅拷贝属于对象克隆方式的一种，重要的特性体现在这个 「浅」 字上。<br>比如我们试图通过studen1实例，拷贝得到student2，如果是浅拷贝这种方式，大致模型可以示意成如下所示的样子：<br><img src="https://img-blog.csdnimg.cn/20200828172351451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>很明显，值类型的字段会复制一份，而引用类型的字段拷贝的仅仅是引用地址，而该引用地址指向的实际对象空间其实只有一份。<br>一图胜前言，我想上面这个图已经表现得很清楚了。<br>深拷贝<br>深拷贝相较于上面所示的浅拷贝，除了值类型字段会复制一份，引用类型字段所指向的对象，会在内存中也创建一个副本，就像这个样子：<br><img src="https://img-blog.csdnimg.cn/2020082817242772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>原理很清楚明了，下面来看看具体的代码实现吧。<br>浅拷贝代码实现</p><p>还以上文的例子来讲，我想通过student1拷贝得到student2，浅拷贝的典型实现方式是：让被复制对象的类实现Cloneable接口，并重写clone()方法即可。<br>以上面的Student类拷贝为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;      <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Major major;  <span class="comment">// 所学专业</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们写个测试代码，一试便知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Major m = <span class="keyword">new</span> Major(<span class="string">&quot;计算机科学与技术&quot;</span>,<span class="number">666666</span>);</span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student( <span class="string">&quot;CodeSheep&quot;</span>, <span class="number">18</span>, m );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 由 student1 拷贝得到 student2</span></span><br><span class="line">        Student student2 = (Student) student1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println( student1 == student2 );</span><br><span class="line">        System.out.println( student1 );</span><br><span class="line">        System.out.println( student2 );</span><br><span class="line">        System.out.println( <span class="string">&quot;\n&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改student1的值类型字段</span></span><br><span class="line">        student1.setAge( <span class="number">35</span> );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改student1的引用类型字段</span></span><br><span class="line">        m.setMajorName( <span class="string">&quot;电子信息工程&quot;</span> );</span><br><span class="line">        m.setMajorId( <span class="number">888888</span> );</span><br><span class="line"></span><br><span class="line">        System.out.println( student1 );</span><br><span class="line">        System.out.println( student2 );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到如下结果：<br><img src="https://img-blog.csdnimg.cn/20200828172454426.png#pic_center" alt="在这里插入图片描述"></p><p>从结果可以看出：<br>student1==student2打印false，说明clone()方法的确克隆出了一个新对象；<br>修改值类型字段并不影响克隆出来的新对象，符合预期；<br>而修改了student1内部的引用对象，克隆对象student2也受到了波及，说明内部还是关联在一起的<br>深拷贝代码实现</p><p>深度遍历式拷贝<br>虽然clone()方法可以完成对象的拷贝工作，但是注意：clone()方法默认是浅拷贝行为，就像上面的例子一样。若想实现深拷贝需覆写 clone()方法实现引用对象的深度遍历式拷贝，进行地毯式搜索。<br>所以对于上面的例子，如果想实现深拷贝，首先需要对更深一层次的引用类Major做改造，让其也实现Cloneable接口并重写clone()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Major</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次我们还需要在顶层的调用类中重写clone方法，来调用引用类型字段的clone()方法实现深度拷贝，对应到本文那就是Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Student student = (Student) <span class="keyword">super</span>.clone();</span><br><span class="line">        student.major = (Major) major.clone(); <span class="comment">// 重要！！！</span></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候上面的测试用例不变，运行可得结果：<br><img src="https://img-blog.csdnimg.cn/20200828172513124.png#pic_center" alt="在这里插入图片描述"></p><p>很明显，这时候student1和student2两个对象就完全独立了，不受互相的干扰。<br>利用反序列化实现深拷贝<br>记得在前文《序列化/反序列化，我忍你很久了》中就已经详细梳理和总结了「序列化和反序列化」这个知识点了。<br>利用反序列化技术，我们也可以从一个对象深拷贝出另一个复制对象，而且这货在解决多层套娃式的深拷贝问题时效果出奇的好。<br>所以我们这里改造一下Student类，让其clone()方法通过序列化和反序列化的方式来生成一个原对象的深拷贝副本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;      <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Major major;  <span class="comment">// 所学专业</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将对象本身序列化到字节流</span></span><br><span class="line">            ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream objectOutputStream =</span><br><span class="line">                    <span class="keyword">new</span> ObjectOutputStream( byteArrayOutputStream );</span><br><span class="line">            objectOutputStream.writeObject( <span class="keyword">this</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 再将字节流通过反序列化方式得到对象副本</span></span><br><span class="line">            ObjectInputStream objectInputStream =</span><br><span class="line">                    <span class="keyword">new</span> ObjectInputStream( <span class="keyword">new</span> ByteArrayInputStream( byteArrayOutputStream.toByteArray() ) );</span><br><span class="line">            <span class="keyword">return</span> (Student) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这种情况下要求被引用的子类（比如这里的Major类）也必须是可以序列化的，即实现了Serializable接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Major</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候测试用例完全不变，直接运行，也可以得到如下结果：</p><p>很明显，这时候student1和student2两个对象也是完全独立的，不受互相的干扰，深拷贝完成。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;java之-深拷贝、浅拷贝&quot;&gt;&lt;a href=&quot;#java之-深拷贝、浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;java之-深拷贝、浅拷贝&quot;&gt;&lt;/a&gt;java之-深拷贝、浅拷贝&lt;/h2&gt;</summary>
    
    
    
    <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
    <category term="java拷贝" scheme="http://yoursite.com/tags/java%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
</feed>
