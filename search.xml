<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>七行情诗</title>
    <url>/2020/08/13/%E4%B8%83%E8%A1%8C%E6%83%85%E8%AF%97/</url>
    <content><![CDATA[<h1 id="centerfont-colorlightblue酒满fontcenter"><a class="markdownIt-Anchor" href="#centerfont-colorlightblue酒满fontcenter"></a> <center><font color=lightblue>酒满</font></center></h1>
<h2 id="centerfont-colorlightblue青青眼眉淡始觉甜fontcenter"><a class="markdownIt-Anchor" href="#centerfont-colorlightblue青青眼眉淡始觉甜fontcenter"></a> <center><font color=lightblue>青青眼眉，淡始觉甜</font></center></h2>
<h2 id="centerfont-colorlightblue这一番心事付与春意深fontcenter"><a class="markdownIt-Anchor" href="#centerfont-colorlightblue这一番心事付与春意深fontcenter"></a> <center><font color=lightblue>这一番心事，付与春意深</font></center></h2>
<h2 id="centerfont-colorlightblue你笑里藏着醇酒fontcenter"><a class="markdownIt-Anchor" href="#centerfont-colorlightblue你笑里藏着醇酒fontcenter"></a> <center><font color=lightblue>你笑里，藏着醇酒</font></center></h2>
<h2 id="centerfont-colorlightblue掠过一盏桃花暖开满树海棠fontcenter"><a class="markdownIt-Anchor" href="#centerfont-colorlightblue掠过一盏桃花暖开满树海棠fontcenter"></a> <center><font color=lightblue>掠过一盏桃花，暖开满树海棠</font></center></h2>
<p><em><p align="right" >—愿你我的相遇让这一切变得更加美好</p></em></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合Mybatis</title>
    <url>/2021/04/16/Spring%E6%95%B4%E5%90%88Mybatis%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="spring整合mybatis"><a class="markdownIt-Anchor" href="#spring整合mybatis"></a> Spring整合Mybatis</h2>
<a id="more"></a>
<p>本文讲述Spring整合Mybatis ，先写一个Mybatis的案例，然后由Mybatis过渡到Spring的方式，并且测试事务是否整合成功<br />
工具：idea</p>
<p>第一步：在pom.xml里面导入相应的依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">      spring-core  spring-aop  spring-context spring-jdbc spring-test</span><br><span class="line">      mybatis-***.jar</span><br><span class="line">      mysql.jar  druid.jar</span><br><span class="line">      mybatis-spring.jar  spring框架整合mybatis工具包</span><br><span class="line">      junit.jar  测试</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.3.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 加入数据库驱动 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 阿里数据源 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.1.15&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.18.18&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 切面的依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.9.5&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 整合jdbc  提供了事务管理工具类 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.3.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mybatis核心包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- spring整合mybatis工具包    --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 添加分页插件  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>第二步：新建数据库Account<br />
<img src="https://img-blog.csdnimg.cn/20210416173537300.png" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/2021041617355042.png" alt="在这里插入图片描述" /><br />
第三步：创建Account实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.offcn.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> gaoyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String aname;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Integer aid, String aname, Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aid = aid;</span><br><span class="line">        <span class="keyword">this</span>.aname = aname;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aid = aid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAname</span><span class="params">(String aname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aname = aname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;aid=&quot;</span> + aid +</span><br><span class="line">                <span class="string">&quot;, aname=&#x27;&quot;</span> + aname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第四步：创建接口文件 AccountDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.offcn.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.offcn.bean.Account;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> gaoyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span>  <span class="title">saveInfo</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第五步：编写AccountMapper.xml文件，书写sql代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;!--动态代理--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.offcn.dao.AccountDao&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    增--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;saveInfo&quot;</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">account</span><span class="params">(aid,aname,money)</span> <span class="title">values</span><span class="params">(#&#123;aid&#125;,#&#123;aname&#125;,#&#123;money&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure>
<p>第六步：写mybatis的配置文件mybatis-config.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;properties resource=<span class="string">&quot;db.properties&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;environments <span class="keyword">default</span>=<span class="string">&quot;mysqlenvironment&quot;</span>&gt;&lt;!-- 数据库--&gt;</span><br><span class="line">&lt;!-- 和数据库交互的一种环境id当前环境的唯一标记--&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;mysqlenvironment&quot;</span>&gt; &lt;!--数据库--&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">              事务管理器</span><br><span class="line">              JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">            连接池</span><br><span class="line">             POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，</span><br><span class="line">             避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</span><br><span class="line">             --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">               数据库的链接条件配置</span><br><span class="line">               allowMultiQueries=<span class="keyword">true</span> 当前的属性是mysql允许远程执行</span><br><span class="line">               多条sql语句并且每个语句的分割符是;</span><br><span class="line">               ?allowMultiQueries=<span class="keyword">true</span> 为了保证更新成功加的一句话</span><br><span class="line">&lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql:///0113db?allowMultiQueries=true&quot;</span>/&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">        加载我们的书写了sql配置文件</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;AccountMapper.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>数据库连接配置文件db.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">///mybatis?allowMultiQueries=true</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>接着创建测试文件AccountTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.offcn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.offcn.bean.Account;</span><br><span class="line"><span class="keyword">import</span> com.offcn.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> gaoyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//使用MyBatis提供的工具完成配置文件的读取</span></span><br><span class="line">        String filePath = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//读取配置文件 构建一个输入流</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(filePath);</span><br><span class="line">        <span class="comment">//使用输入流对象构建mybatis框架的核心类 SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂生产解析器</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//通过session获取的接口代理对象</span></span><br><span class="line">        AccountDao mapper = sqlSession.getMapper(AccountDao.class);</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">3</span>, <span class="string">&quot;小李&quot;</span>, <span class="number">233.0</span>);</span><br><span class="line">        mapper.saveInfo(account);</span><br><span class="line">        <span class="comment">//提交事务  非常重要 update  delete  insert 必须提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到此的目录结构为<br />
<img src="https://img-blog.csdnimg.cn/20210416193122196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
这是Mybatis的做法，然后整合Spring</p>
<p>第一步：创建beans.xml文件，把mybatis-config.xml里面的内容进行整合</p>
<ul>
<li>读取db.properties配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--读取db.properties配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:db.properties&quot;&gt;&lt;/context:property-placeholder&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用连接条件将文件加载到数据库（mybatis-config.xml的数据库连接条件配置文件就不用写了）</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--    使用连接条件将文件加载到数据库--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;ds&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>用数据源配置事务管理器(mybatis-config.xml的整个environment标签就不在用了)</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--   事务管理配置--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;manager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=&quot;manager&quot;&gt;&lt;/tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>管理Mybatis核心对象  sqlSessionFactory(因为要用mybatis-spring.jar里面的工具类)</li>
</ul>
<p>管理myBatis核心对象sqlSessionfactory<br />
这样test测试文件里面的配置就被整合到了这里，这个标签源码里面将他们进行了整合，都变成了一个个的属性，采用setter注入的方法<br />
在把config里面的剩下的mapper拿过来，这样config里面就没有东西了<br />
classPath表示类路径</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--    </span><br><span class="line">--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="line">&lt;!--        构建工厂必须使用数据源--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!--        加载AccountMapper.xml内容--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:AccountMapper.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>到这里mybatis-config.xml这个文件就可以删除（当然也可以不删除，如果加载缓存在这个文件里面的话）<br />
到这里整个beans.xml文件内容如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    					http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">    					http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--读取db.properties配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:db.properties&quot;&gt;&lt;/context:property-placeholder&gt;</span><br><span class="line">&lt;!--    使用连接条件将文件加载到数据库--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;ds&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--   事务管理配置--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;manager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=&quot;manager&quot;&gt;&lt;/tx:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    管理myBatis核心对象sqlSessionfactory</span><br><span class="line">        这样test测试文件里面的配置就被整合到了这里，这个标签源码里面将他们进行了整合，都变成了一个个的属性，采用setter注入的方法</span><br><span class="line">        在把config里面的剩下的mapper拿过来，这样config里面就没有东西了</span><br><span class="line">        classPath表示类路径</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="line">&lt;!--        构建工厂必须使用数据源--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!--        加载AccountMapper.xml内容--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:AccountMapper.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果要加载mybatis的核心，比如二级缓存啊啥的，也可以加载进来<br />
<img src="https://img-blog.csdnimg.cn/20210416195725183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>如果要加入分页插件的话先引入相关jar包，然后进行配置<br />
<img src="https://img-blog.csdnimg.cn/20210416195819113.png" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20210416200056587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>如果要想进行包扫描<br />
<img src="https://img-blog.csdnimg.cn/20210416200216938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
还想加啥属性就是接着写property这个标签就好了</p>
</li>
<li>
<p>生成接口代理对象  起点工厂  中间封装  最后代理对象<br />
接着新开一个bean标签  MapperScanner扫描  直接写class就行</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;/bean&gt;</span><br><span class="line">  &lt;!--    生成接口代理对象MapperScannerConfigurer，mapper接口扫描配置 --&gt;</span><br><span class="line">      &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br><span class="line">  &lt;!--        中间封装的  把上面的名字给下面的value--&gt;</span><br><span class="line">  &lt;!--       接口位置--&gt;</span><br><span class="line">      &lt;property name=&quot;basePackage&quot; value=&quot;com.offcn.dao&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;!--        工厂名字--&gt;</span><br><span class="line">      &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;factoryBean&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>下面这个value的值就是上面bean的name值<br />
<img src="https://img-blog.csdnimg.cn/2021041620114887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/2021041620150678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p>现在整个beans.xml的文件内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    					http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">    					http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--读取db.properties配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:db.properties&quot;&gt;&lt;/context:property-placeholder&gt;</span><br><span class="line">&lt;!--    使用连接条件将文件加载到数据库--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;ds&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--   事务管理配置--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;manager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=&quot;manager&quot;&gt;&lt;/tx:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    管理myBatis核心对象sqlSessionfactory</span><br><span class="line">        这样test测试文件里面的配置就被整合到了这里，这个标签源码里面将他们进行了整合，都变成了一个个的属性，采用setter注入的方法</span><br><span class="line">        在把config里面的剩下的mapper拿过来，这样config里面就没有东西了</span><br><span class="line">        classPath表示类路径</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;bean name=<span class="string">&quot;factoryBean&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="line">&lt;!--        构建工厂必须使用数据源--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!--        加载AccountMapper.xml内容--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:AccountMapper.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!--        加载mybatis二级缓存--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!--分页插件--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;plugins&quot;</span>&gt;</span><br><span class="line">            &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!--        包扫描--&gt;</span><br><span class="line">        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.offcn.bean&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--    生成接口代理对象MapperScannerConfigurer，mapper接口扫描配置 --&gt;</span><br><span class="line">        &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br><span class="line">    &lt;!--        中间封装的  把上面的名字给下面的value--&gt;</span><br><span class="line">    &lt;!--       接口位置--&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.offcn.dao&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--        工厂名字--&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;factoryBean&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p>进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.offcn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.offcn.bean.Account;</span><br><span class="line"><span class="keyword">import</span> com.offcn.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> gaoyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实例化容器</span></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器里面获取接口代理对象</span></span><br><span class="line">        AccountDao accountDao = (AccountDao) context.getBean(<span class="string">&quot;accountDao&quot;</span>);</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">4</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">56.3</span>);</span><br><span class="line">        accountDao.saveInfo(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到现在的目录文件结构为<br />
<img src="https://img-blog.csdnimg.cn/2021041620282287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p>检查事务是否成功<br />
创建对应的包<br />
<img src="https://img-blog.csdnimg.cn/2021041620374279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
AccountService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.offcn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.offcn.bean.Account;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> gaoyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span>  <span class="title">saveInfo</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.offcn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.offcn.bean.Account;</span><br><span class="line"><span class="keyword">import</span> com.offcn.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> gaoyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveInfo</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = accountDao.saveInfo(account);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> i&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果想要用事务的话价格注解就可以<br />
<img src="https://img-blog.csdnimg.cn/2021041620401653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<ul>
<li>beans.xml里面扫描添加的注解工具类<br />
<img src="https://img-blog.csdnimg.cn/20210416204219570.png" alt="在这里插入图片描述" /></li>
<li>最后进行测试<br />
<img src="https://img-blog.csdnimg.cn/20210416204744662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
报错说明控制住了<br />
<img src="https://img-blog.csdnimg.cn/20210416204806592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li>
</ul>
<p>现在把错误放开检查是否成功<br />
在AccountServiceImpl里面<br />
<img src="https://img-blog.csdnimg.cn/20210416204901951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
在进行测试成功插入，事务控制成功<br />
事务是加给Service的，不是加给dao的，所以注解要写在service里面</p>
<p>至此整合完毕，并且事务测试成功</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC入门案例</title>
    <url>/2021/04/16/SpringMVC%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="springmvc入门案例"><a class="markdownIt-Anchor" href="#springmvc入门案例"></a> SpringMVC入门案例</h2>
<a id="more"></a>
<p>第一步：创建项目（maven的模块项目模式）</p>
<p>第二步：导入依赖：<br />
父工程：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.offcn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springmvcdemo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;springMVC01&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;offcn.spring.version&gt;5.3.4&lt;/offcn.spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;offcn.spring.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;offcn.spring.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;offcn.spring.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>子模块</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springmvcdemo&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.offcn&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;springMVC01&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>第三步：.创建web模块  在web.xml里面进行配置（拦截请求作用）<br />
<em><strong>前端控制器</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;3.1&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 前端控制器</span><br><span class="line">        只负责请求的转发和结果的接受</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!--        /代表所有请求   写/代表所有都拦住了   这就是前端控制器--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第四步：在resoures下面写springmvc.xml配置文件</p>
<p><em><strong>配置处理器映射器</strong></em><br />
和<br />
<em><strong>配置处理器适配器</strong></em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    					http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">    					http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd &quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置处理器映射器 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!--配置处理器适配器--&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p>第五步：创建包 写自己的代码  写控制器方法  （相当于在servlet里面编写的业务方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.offcn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> gaoyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;控制器方法执行&quot;</span>);</span><br><span class="line">            ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>访问路径 加注解RequeatMappering<br />
<img src="https://img-blog.csdnimg.cn/20210416212932510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
第六步：在springmvc.xml里面  <em><strong>配置视图解析器</strong></em><br />
两个属性前缀和后缀   路径就是  /xxx.jsp  运行之后找这个路径进行访问<br />
<img src="https://img-blog.csdnimg.cn/20210416213235295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
第七步：在web.xml里面初始化配置文件<br />
<img src="https://img-blog.csdnimg.cn/20210416213900559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
第八步：springmvc.xml里面扫描Controller<br />
<img src="https://img-blog.csdnimg.cn/20210416214017492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p>第九步：创建页面<br />
<img src="https://img-blog.csdnimg.cn/20210416213530583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
index.jsp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![在这里插入代码片](https:<span class="comment">//img-blog.csdnimg.cn/20210416213546616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>b.jsp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   b.jsp</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行顺序;执行index.jsp,点击a标签first，点击之后 找first的RequestMappering里面的first,然后找到b.jsp页面</p>
<p>运行出现index.jsp页面点击first跳转到b.jsp页面并且控制台打印控制方法器<br />
执行<br />
至此入门案例成功</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>封装的日期工具类</title>
    <url>/2021/03/29/%E6%97%A5%E6%9C%9F%E5%B7%A5%E5%85%B7%E7%B1%BB%20/</url>
    <content><![CDATA[<h1 id="封装的日期工具类"><a class="markdownIt-Anchor" href="#封装的日期工具类"></a> 封装的日期工具类</h1>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ujiuye.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-DD HH:mm:ss&quot;</span>);</span><br><span class="line">	<span class="comment">//日期转化为字符串</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToString</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dateFormat.format(date);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//字符串转化为日期</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">stringToDate</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> dateFormat.parse(str);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>封装的数据库连接池工具类</title>
    <url>/2021/03/29/%E5%B0%81%E8%A3%85%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<p>以下是DBCP，C3P0，Druid封装的工具类和配置文件，其中配置文件放在src目录下即可<br />
DBCP</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ujiuye.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ujiuye.dbcp.DBCPDemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPUtils</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建properties文件对象</span></span><br><span class="line">			Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">			<span class="comment">//通过流的方式获取properties文件</span></span><br><span class="line">			<span class="comment">//DBCPDemo2.class.getClassLoader()获取当前类的类加载</span></span><br><span class="line">			<span class="comment">//.getResourceAsStream(&quot;dbcpconfig.properties&quot;);</span></span><br><span class="line">			InputStream inputStream = DBCPDemo.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;);</span><br><span class="line">			<span class="comment">//加载properties文件</span></span><br><span class="line">			properties.load(inputStream);</span><br><span class="line">			<span class="comment">//创建数据源</span></span><br><span class="line">			dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取连接</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Connection conn = dataSource.getConnection();</span><br><span class="line">			<span class="keyword">return</span> conn;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//归还连接</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs, PreparedStatement psvm, Connection conn)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(psvm != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				psvm.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">dbcpconfig.properties</span><br><span class="line"></span><br><span class="line">​```java</span><br><span class="line">	#连接设置</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/day09_jdbc</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 初始化连接 --&gt;</span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">#最大连接数量</span><br><span class="line">maxActive=<span class="number">50</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 最大空闲连接 --&gt;</span><br><span class="line">maxIdle=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 最小空闲连接 --&gt;</span><br><span class="line">minIdle=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span><br><span class="line">maxWait=<span class="number">60000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] </span><br><span class="line">#注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。</span><br><span class="line">connectionProperties=useUnicode=<span class="keyword">true</span>;characterEncoding=gbk</span><br><span class="line"></span><br><span class="line">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span><br><span class="line">defaultAutoCommit=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span><br><span class="line">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span><br><span class="line">defaultTransactionIsolation=READ_UNCOMMITTED</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">C3P0</span><br><span class="line"></span><br><span class="line">​```java</span><br><span class="line"><span class="keyword">package</span> com.ujiuye.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3p0Utils</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建数据源对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建连接池   为了DBUtils工具提前准备</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取连接</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Connection conn = dataSource.getConnection();</span><br><span class="line">			<span class="keyword">return</span> conn;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>c3p0-config.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">	&lt;!-- 默认配置，如果没有指定则使用这个配置 --&gt;</span><br><span class="line">	&lt;<span class="keyword">default</span>-config&gt;</span><br><span class="line">		&lt;!-- 四项基本配置 --&gt;</span><br><span class="line">		&lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">		&lt;property name=<span class="string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="comment">//127.0.0.1:3306/day09_jdbc&lt;/property&gt;</span></span><br><span class="line">		&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出</span><br><span class="line">  			SQLException,如设为<span class="number">0</span>则无限期等待。单位毫秒。Default: <span class="number">0</span> --&gt;</span><br><span class="line">		&lt;property name=&quot;checkoutTimeout&quot;&gt;30000&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!--隔多少秒检查连接池的空闲连接，<span class="number">0</span>表示不检查--&gt;</span><br><span class="line">		&lt;property name=&quot;idleConnectionTestPeriod&quot;&gt;30&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 初始化连接数 --&gt;</span><br><span class="line">		&lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 连接的最大空闲时间，默认为<span class="number">0</span>秒、不会关闭任何连接。设置<span class="number">30</span>秒，<span class="number">30</span>秒到期后，</span><br><span class="line">			连接若未使用就会被关闭 --&gt;</span><br><span class="line">		&lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 池中最多的连接存放数目 --&gt;</span><br><span class="line">		&lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 池中最少的连接存放数目 --&gt;</span><br><span class="line">		&lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;maxStatements&quot;&gt;200&lt;/property&gt;</span><br><span class="line">		&lt;user-overrides user=<span class="string">&quot;test-user&quot;</span>&gt;</span><br><span class="line">			&lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">			&lt;property name=&quot;minPoolSize&quot;&gt;1&lt;/property&gt;</span><br><span class="line">			&lt;property name=&quot;maxStatements&quot;&gt;0&lt;/property&gt;</span><br><span class="line">		&lt;/user-overrides&gt;</span><br><span class="line">	&lt;/default-config&gt;</span><br><span class="line">	&lt;!-- 命名的配置 --&gt;</span><br><span class="line">	&lt;named-config name=<span class="string">&quot;offcn&quot;</span>&gt;</span><br><span class="line">		&lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">		&lt;property name=<span class="string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="comment">//127.0.0.1:3306/day09_jdbc&lt;/property&gt;</span></span><br><span class="line">		&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;acquireIncrement&quot;&gt;5&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;initialPoolSize&quot;&gt;20&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;maxPoolSize&quot;&gt;40&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;maxStatements&quot;&gt;0&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;maxStatementsPerConnection&quot;&gt;5&lt;/property&gt;</span><br><span class="line">	&lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Druid</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ujiuye.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取DRUID数据库连接池数据源</span></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态方法  对数据源初始化</span></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//			因为现在的项目类型为动态web工程</span></span><br><span class="line">			<span class="comment">//			当项目发布到tomcat服务器上之后，目录结构就会发生相应的改变，那此时src文件夫就没有了、所有路径就错了!!!</span></span><br><span class="line">			<span class="comment">//			我们应该换一种方式去读取配置文件，我们采用类加载器自带的输入流对象去读取配置文件因为类加载器自带的输入流对象，可以默认读取到项目工程根目录src下的资源! !!|</span></span><br><span class="line">			InputStream fileInputStream = DruidUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="line">			<span class="comment">//			FileInputStream fileInputStream = new FileInputStream(&quot;src/druid.properties&quot;);</span></span><br><span class="line">			properties.load(fileInputStream);</span><br><span class="line">			dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取数据源方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>druid.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/day09_jdbc</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">maxWait=<span class="number">3000</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>分页工具类封装</title>
    <url>/2021/03/29/%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="分页工具类封装"><a class="markdownIt-Anchor" href="#分页工具类封装"></a> 分页工具类封装</h1>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">​```java</span><br><span class="line"><span class="keyword">package</span> com.ujiuye.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分页工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTool</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> currentPage;<span class="comment">//当前页</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> pageSize;<span class="comment">//每页显示的条数  自定义大小</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> startIndex;<span class="comment">//起始索引   startIndex = (currentPage-1)*pageSize</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> totalCount;<span class="comment">//总条数  查询数据库得到select count(*) from 表名;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> totalPage;<span class="comment">//总页数 计算: (totalCount%pageSize == 0) ? (totalCount/pageSize):(totalCount/pageSize+1)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> prePage;<span class="comment">//上一页 currentPage-1</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> nextPage;<span class="comment">//下一页 currentPage+1</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PageTool</span><span class="params">(String currentPage, <span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">		<span class="comment">//自定义显示的条数</span></span><br><span class="line">		<span class="keyword">this</span>.pageSize = <span class="number">3</span>;</span><br><span class="line">		initCurrentPage(currentPage);<span class="comment">//当前页</span></span><br><span class="line">		initTotalPage();</span><br><span class="line">		initStartIndex();</span><br><span class="line">		initPrePage();</span><br><span class="line">		initNextPage();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//给当前页进行初始化</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCurrentPage</span><span class="params">(String currentPage)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(currentPage == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.currentPage = <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//赋值第几页</span></span><br><span class="line">			<span class="keyword">this</span>.currentPage = Integer.valueOf(currentPage);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//计算总页数</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//计算</span></span><br><span class="line">		<span class="keyword">this</span>.totalPage = (totalCount%pageSize == <span class="number">0</span>) ? (totalCount/pageSize):(totalCount/pageSize+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//上一页</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPrePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(currentPage == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">//赋值第一页</span></span><br><span class="line">			<span class="keyword">this</span>.prePage = <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.prePage = currentPage - <span class="number">1</span>;<span class="comment">//2</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//下一页</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNextPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(currentPage == totalPage) &#123;</span><br><span class="line">			<span class="comment">//赋值第一页</span></span><br><span class="line">			<span class="keyword">this</span>.nextPage = totalPage;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.nextPage = currentPage + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//起始索引</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initStartIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//计算</span></span><br><span class="line">		<span class="keyword">this</span>.startIndex = (currentPage-<span class="number">1</span>) * pageSize;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> currentPage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pageSize;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStartIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> startIndex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartIndex</span><span class="params">(<span class="keyword">int</span> startIndex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.startIndex = startIndex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> totalCount;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> totalPage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(<span class="keyword">int</span> totalPage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> prePage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrePage</span><span class="params">(<span class="keyword">int</span> prePage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.prePage = prePage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> nextPage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextPage</span><span class="params">(<span class="keyword">int</span> nextPage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.nextPage = nextPage;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接池</title>
    <url>/2021/03/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="连接池原理"><a class="markdownIt-Anchor" href="#连接池原理"></a> 连接池原理</h1>
<a id="more"></a>
<p>数据库连接池负责分配、管理和释放数据库连接，它的核心思想就是连接复用,通过建立一个数据库连接池，这个池中有若干个连接对象，当用户想要连接数据库，就要先从连接池中获取连接对象，然后操作数据库。一旦连接池中的连接对象被用院了，判断连接对象的个数是否已达上限，如果没有可以再创建新的连接对象，如果已达上限，用户必须处于等待状态，等待其他用户释放连接对象，直到连接池中有被释放的连接对象了，这时候等待的用户才能获取连接对象，从而操作数据库。这样就可以使连接池中的连接得到高效、安全的复用，避免了数据库连接频繁创建、关闭的开销。这项技术明显提高对数据库操作的性能。</p>
<ul>
<li>
<p>无连接池<br />
<img src="https://img-blog.csdnimg.cn/20210321210928832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>有连接池</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210321210941390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="连接池优点"><a class="markdownIt-Anchor" href="#连接池优点"></a> 连接池优点</h2>
<p>程序启动的时候就已经创建好了连接，不需用户请求的时候创建<br />
用户关闭时不会销毁连接，需要将连接归还，就可以达到复用的效果<br />
如果超过了使用的连接会进行上限的判断，如果没有达到最大值，可以继续创建<br />
如果有空闲连接，会默认的进行销毁（释放）一些连接，让系统达到最优</p>
<h1 id="手动实现连接池原理"><a class="markdownIt-Anchor" href="#手动实现连接池原理"></a> 手动实现连接池原理</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">手动实现连接池 （了解） </span><br><span class="line">步骤：</span><br><span class="line">创建一个连接池类，需要借助于封装的jdbcUtils工具类</span><br><span class="line">初始化连接数量</span><br><span class="line">创建一个集合，存储多个连接对象</span><br><span class="line">创建一个从池子里面获取连接的方法</span><br><span class="line">创建一个向连接池里面归还连接的方法</span><br><span class="line">测试</span><br><span class="line"><span class="comment">//连接池类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化连接数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> initSize = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个集合, 存储多个连接对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Connection&gt; list = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initSize; i++) &#123;</span><br><span class="line">                <span class="comment">//借助于JDBCUtils工具类获取连接</span></span><br><span class="line">                Connection conn = JDBCUtils.getConnection();</span><br><span class="line">                list.add(conn);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化连接的数量为: &quot;</span> + initSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnFromPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//从集合中取出连接</span></span><br><span class="line">Connection connection = list.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//还要取走的连接移除</span></span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;用户正在使用&quot;</span> + connection + <span class="string">&quot;连接, 当前池子中剩余连接为: &quot;</span> + list.size());</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归还连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs, PreparedStatement psvm, Connection conn)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                            rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(psvm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                    psvm.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//conn.close();</span></span><br><span class="line">                    <span class="comment">//归还</span></span><br><span class="line">                    list.add(conn);</span><br><span class="line">                  System.out.println(<span class="string">&quot;用户正在归还&quot;</span> + conn +<span class="string">&quot;连接, 当前池子中剩余连接为:&quot;</span> + list.size());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">           </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">测试类:</span><br><span class="line"><span class="keyword">package</span> com.ujiuye.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.ujiuye.pool.MyDataPool;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myDataPoolTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//直接获取连接</span></span><br><span class="line">            Connection conn = MyDataPool.getConnFromPool();</span><br><span class="line">            <span class="comment">//归还连接</span></span><br><span class="line">            MyDataPool.closeAll(<span class="keyword">null</span>, <span class="keyword">null</span>, conn);</span><br><span class="line">            System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">            Connection conn1 = MyDataPool.getConnFromPool();</span><br><span class="line">            String sql = <span class="string">&quot;select * from user where uid = ?&quot;</span>;</span><br><span class="line">            PreparedStatement psvm = conn1.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//设置参数</span></span><br><span class="line">            psvm.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            ResultSet rs = psvm.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> uid = rs.getInt(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">                        String username = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                        String password = rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                        System.out.println(uid + <span class="string">&quot;\t&quot;</span> + username + <span class="string">&quot;\t&quot;</span> + password);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//归还</span></span><br><span class="line">            MyDataPool.closeAll(rs, psvm, conn1);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试类:</span><br><span class="line"><span class="keyword">package</span> com.ujiuye.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.ujiuye.pool.MyDataPool;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myDataPoolTest</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">//直接获取连接</span></span><br><span class="line">                        Connection conn = MyDataPool.getConnFromPool();</span><br><span class="line">                        <span class="comment">//归还连接</span></span><br><span class="line">                        MyDataPool.closeAll(<span class="keyword">null</span>, <span class="keyword">null</span>, conn);</span><br><span class="line">                        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">                        Connection conn1 = MyDataPool.getConnFromPool();</span><br><span class="line">                        String sql = <span class="string">&quot;select * from user where uid = ?&quot;</span>;</span><br><span class="line">                        PreparedStatement psvm = conn1.prepareStatement(sql);</span><br><span class="line"><span class="comment">//设置参数</span></span><br><span class="line"> psvm.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"> <span class="comment">//执行</span></span><br><span class="line">ResultSet rs = psvm.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">int</span> uid = rs.getInt(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">String username = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password = rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"> System.out.println(uid + <span class="string">&quot;\t&quot;</span> + username + <span class="string">&quot;\t&quot;</span> + password);</span><br><span class="line">                        &#125;</span><br><span class="line"><span class="comment">//归还</span></span><br><span class="line">MyDataPool.closeAll(rs, psvm, conn1);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="dbcp连接池"><a class="markdownIt-Anchor" href="#dbcp连接池"></a> DBCP连接池</h1>
<p>DBCP也是一个开源的连接池，直接进行使用步骤介绍</p>
<ol>
<li>导包 <code>commons-dbcp-1.4.jar和commons-pool-1.5.6.jar</code></li>
<li>编写数据库连接的配置文件<br />
配置文件名称：*.properties<br />
配置文件位置：建议放在src下<br />
需求：测试连接池查询商品的名字。<br />
<code>配置文件dbcpconfig.properties</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#连接设置</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/day09_jdbc</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 初始化连接 --&gt;</span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">#最大连接数量</span><br><span class="line">maxActive=<span class="number">50</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 最大空闲连接 --&gt;</span><br><span class="line">maxIdle=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 最小空闲连接 --&gt;</span><br><span class="line">minIdle=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span><br><span class="line">maxWait=<span class="number">60000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] </span><br><span class="line">#注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。</span><br><span class="line">connectionProperties=useUnicode=<span class="keyword">true</span>;characterEncoding=gbk</span><br><span class="line"></span><br><span class="line">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span><br><span class="line">defaultAutoCommit=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span><br><span class="line">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span><br><span class="line">defaultTransactionIsolation=READ_UNCOMMITTED</span><br></pre></td></tr></table></figure>
<p><strong>方式一：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建properties文件对象</span></span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="comment">//通过流的方式获取properties文件</span></span><br><span class="line">		FileReader reader = <span class="keyword">new</span> FileReader(<span class="string">&quot;src/dbcpconfig.properties&quot;</span>);</span><br><span class="line">		<span class="comment">//加载properties文件</span></span><br><span class="line">		properties.load(reader);</span><br><span class="line">		<span class="comment">//创建数据源</span></span><br><span class="line">		DataSource datasource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line"><span class="comment">//		System.out.println(datasource);</span></span><br><span class="line">		<span class="comment">//通过数据源获取连接</span></span><br><span class="line">		Connection conn = datasource.getConnection();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//执行sql进行预编译</span></span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(<span class="string">&quot;select * from product&quot;</span>);</span><br><span class="line">		<span class="comment">//执行</span></span><br><span class="line">		ResultSet rs = psvm.executeQuery();</span><br><span class="line">		<span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">			<span class="keyword">int</span> pid = rs.getInt(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">			String pname = rs.getString(<span class="string">&quot;pname&quot;</span>);</span><br><span class="line">			<span class="keyword">double</span> price = rs.getDouble(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">			System.out.println(pid+pname+price);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		rs.close();</span><br><span class="line">		psvm.close();</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方式二：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPDemo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建properties文件对象</span></span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="comment">//通过流的方式获取properties文件</span></span><br><span class="line"><span class="comment">//		DBCPDemo2.class.getClassLoader() 获取当前类的类加载</span></span><br><span class="line">		InputStream inputStream = DBCPDemo2.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;);</span><br><span class="line">		<span class="comment">//加载properties文件</span></span><br><span class="line">		properties.load(inputStream);</span><br><span class="line">		<span class="comment">//创建数据源                                             数据源工厂                                          创建数据源                   从properties里面获取</span></span><br><span class="line">		DataSource datasource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line"><span class="comment">//		System.out.println(datasource);</span></span><br><span class="line">		<span class="comment">//通过数据源获取连接</span></span><br><span class="line">		Connection conn = datasource.getConnection();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//执行sql进行预编译</span></span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(<span class="string">&quot;select * from product&quot;</span>);</span><br><span class="line">		<span class="comment">//执行</span></span><br><span class="line">		ResultSet rs = psvm.executeQuery();</span><br><span class="line">		<span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">			<span class="keyword">int</span> pid = rs.getInt(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">			String pname = rs.getString(<span class="string">&quot;pname&quot;</span>);</span><br><span class="line">			<span class="keyword">double</span> price = rs.getDouble(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">			System.out.println(pid+pname+price);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		rs.close();</span><br><span class="line">		psvm.close();</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210321204433974.png" alt="在这里插入图片描述" /></p>
<h1 id="c3p0连接池"><a class="markdownIt-Anchor" href="#c3p0连接池"></a> C3P0连接池</h1>
<ol>
<li>导包 <code>c3p0-0.9.1.2和mchange-commons-java-0.2.3.4</code></li>
<li>倒入配置文件，放在src下(在使用c3p0连接获取数据源时,会自动读取配置文件，无需读取操作)</li>
</ol>
<p><code>c3p0-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 四项基本配置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/day09_jdbc<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出</span></span><br><span class="line"><span class="comment">  			SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--隔多少秒检查连接池的空闲连接，0表示不检查--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idleConnectionTestPeriod&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 初始化连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 连接的最大空闲时间，默认为0秒、不会关闭任何连接。设置30秒，30秒到期后，</span></span><br><span class="line"><span class="comment">			连接若未使用就会被关闭 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 池中最多的连接存放数目 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 池中最少的连接存放数目 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">user-overrides</span> <span class="attr">user</span>=<span class="string">&quot;test-user&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">user-overrides</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 命名的配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;offcn&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/day09_jdbc<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoC3p0</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建数据源对象</span></span><br><span class="line">		ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">		<span class="comment">//获取连接 </span></span><br><span class="line">		Connection conn = dataSource.getConnection();</span><br><span class="line">		<span class="comment">//System.out.println(conn);//com.mchange.v2.c3p0.impl.NewProxyConnection@224aed64</span></span><br><span class="line">		<span class="comment">//执行sql进行预编译  不用createStatement是为了解决sql注入问题</span></span><br><span class="line">        PreparedStatement psvm = conn.prepareStatement(<span class="string">&quot;select * from product&quot;</span>);</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        ResultSet rs = psvm.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        	<span class="keyword">int</span> pid = rs.getInt(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">        	String pname = rs.getString(<span class="string">&quot;pname&quot;</span>);</span><br><span class="line">        	<span class="keyword">double</span> price = rs.getDouble(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        	System.out.println(pid+pname+price);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以对其进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3p0Utils</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建数据源对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建连接池   为了DBUtils工具提前准备</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取连接</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Connection conn = dataSource.getConnection();</span><br><span class="line">			<span class="keyword">return</span> conn;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="druid连接池"><a class="markdownIt-Anchor" href="#druid连接池"></a> Druid连接池</h1>
<ol>
<li>导包 druid-1.0.9</li>
<li>倒入配置文件  放在src下面<br />
<code>druid.properties</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/jdbc</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"># 初始化连接数</span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line">#最大连接数</span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line">#超时时间</span><br><span class="line">maxWait=<span class="number">3000</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>写一个工具类对配置文件进行读取操作</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//在静态代码块里面完成对数据源的初始化</span></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="comment">//拿到数据源对象</span></span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="comment">//获取配置文件</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/druid.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//加载通过数据源进去</span></span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            <span class="comment">//druid下面的方法</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取数据源方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>测试<br />
<strong>第一种：手动</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 有了数据源之后</span></span><br><span class="line"><span class="comment">		 * 要么手动获取连接 就是 调用getConnection()的方法获取</span></span><br><span class="line"><span class="comment">		 * 要么就是创建QueryRunner时指定获取连接</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//增加</span></span><br><span class="line">		DataSource dataSource = DRUIDUtils.getDataSource();</span><br><span class="line">		Connection connection = dataSource.getConnection();</span><br><span class="line">		QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">		<span class="keyword">int</span> row = queryRunner.update(connection,<span class="string">&quot;insert into user values(null,?,?,?)&quot;</span>,<span class="string">&quot;都是&quot;</span>,<span class="string">&quot;145&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">		System.out.println(row&gt;<span class="number">0</span>?<span class="string">&quot;添加成功&quot;</span>:<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		<span class="comment">//因为不是手动创建的，而是调用的连接池里面的，所以释放资源是放回连接池当中，而不是销毁</span></span><br><span class="line">		org.apache.commons.dbutils.DbUtils.close(connection);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>第二种：自动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 有了数据源之后</span></span><br><span class="line"><span class="comment">		 * 要么手动获取连接 就是 调用getConnection()的方法获取</span></span><br><span class="line"><span class="comment">		 * 要么就是创建QueryRunner时指定获取连接</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//第二种自动的</span></span><br><span class="line">		QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line">		String sql = <span class="string">&quot;select * from product where pid = ?&quot;</span>;</span><br><span class="line">		Product product = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Product&gt;(Product.class),<span class="number">2</span>);</span><br><span class="line">		System.out.println(product);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2>
<p>使用<code>Properties</code>获取文件对象的时候<br />
DBCP和Druid都需要读取配置文件，C3P0会自动读取配置文件（前提是放在src下）,获取的时候用get方法获取就好<br />
用<code>QueryRunner</code>方法获取对象的时候<br />
Druid，c3p0，DBCP都可创建实体类进行操作</p>
<h2 id="dbcp连接池与c3p0连接池的区别"><a class="markdownIt-Anchor" href="#dbcp连接池与c3p0连接池的区别"></a> DBCP连接池与C3P0连接池的区别:</h2>
<ol>
<li>DBCP连接池使用效率高, 而C3P0效率相比较偏低;</li>
<li>C3P0安全性较高, 而DBCP安全性偏低, 容易丢失连接;</li>
</ol>
<h4 id="需要的jar包"><a class="markdownIt-Anchor" href="#需要的jar包"></a> 需要的jar包</h4>
<p>链接：<a href="https://pan.baidu.com/s/1_nqg99Fb83FA1KaFXsip_g">https://pan.baidu.com/s/1_nqg99Fb83FA1KaFXsip_g</a><br />
提取码：1314<br />
复制这段内容后打开百度网盘手机App，操作更方便哦</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>浅尝JDBC</title>
    <url>/2021/03/21/%E6%B5%85%E5%B0%9DJDBC/</url>
    <content><![CDATA[<h1 id="jdbc简介"><a class="markdownIt-Anchor" href="#jdbc简介"></a> JDBC简介</h1>
<a id="more"></a>
<h2 id="jdbc定义"><a class="markdownIt-Anchor" href="#jdbc定义"></a> JDBC定义：</h2>
<pre><code>简单地说，JDBC就是为多种关系数据库提供统一访问同时也是程序与数据库连接的一个中间件,起着桥梁的作用。
</code></pre>
<h1 id="客户端连接服务端"><a class="markdownIt-Anchor" href="#客户端连接服务端"></a> 客户端连接服务端</h1>
<h3 id="无jdbc"><a class="markdownIt-Anchor" href="#无jdbc"></a> 无jdbc</h3>
<ul>
<li>没有jdbc的时候，数据库有自己的连接驱动的方式<br />
<img src="https://img-blog.csdnimg.cn/20210321193239687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<strong>缺点:</strong><br />
1.不知道不同数据库的解析方式和操作方式<br />
2.代码量大,比较繁琐后期维护麻烦<br />
3.由于解析方式不同和操作方式不同,每个数据库都要协一套代码<br />
4.数据库与数据库之间的切换比较麻烦</li>
</ul>
<h3 id="有jdbc"><a class="markdownIt-Anchor" href="#有jdbc"></a> 有jdbc</h3>
<ul>
<li>使用jdbc的时候<br />
<img src="https://img-blog.csdnimg.cn/20210321193402418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
我们只需要编写一套程序可以连接不同的数据库而且数据库之间切换比较方便</li>
</ul>
<h3 id="jdbc常见的类和接口"><a class="markdownIt-Anchor" href="#jdbc常见的类和接口"></a> jdbc常见的类和接口</h3>
<p>一个类：<br />
DriverManager类：驱动管理器类 专门注册驱动的<br />
三个接口:</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述和作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Connection接口</td>
<td>连接对象      就是建立与数据库之间的连接</td>
</tr>
<tr>
<td>Statement接口</td>
<td>SQl编译器    像数据库发送并执行sql语句的</td>
</tr>
<tr>
<td>ResultSet接口</td>
<td>查询结果集   执行查询操作的时候返回的结果集行进行处理</td>
</tr>
</tbody>
</table>
<h3 id="入门案例"><a class="markdownIt-Anchor" href="#入门案例"></a> 入门案例</h3>
<p>接下来写一个简单地入门案例<br />
使用jdbc操作数据库有六步，需要记住</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>注册驱动</td>
</tr>
<tr>
<td>2</td>
<td>获取连接对象</td>
</tr>
<tr>
<td>3</td>
<td>创建执行sql语句的连接对象</td>
</tr>
<tr>
<td>4</td>
<td>执行sql语句</td>
</tr>
<tr>
<td>5</td>
<td>处理结果集</td>
</tr>
<tr>
<td>6</td>
<td>释放资源</td>
</tr>
</tbody>
</table>
<p>代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.注册驱动 里面放mysql驱动的全限定路径</span></span><br><span class="line">		Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">		<span class="comment">//2.获取连接对象  用的DriverManager类</span></span><br><span class="line">		Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/day08_jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">//		System.out.println(conn);//com.mysql.jdbc.JDBC4Connection@377dca04</span></span><br><span class="line">		<span class="comment">//3.创建执行sql语句的连接对象</span></span><br><span class="line">		Statement st = conn.createStatement();</span><br><span class="line">		<span class="comment">//4.执行sql语句</span></span><br><span class="line">		String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">		ResultSet rs = st.executeQuery(sql);</span><br><span class="line">		<span class="comment">//5.处理结果集</span></span><br><span class="line">		<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">			String username = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">			System.out.println(username);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//6.释放资源</span></span><br><span class="line">		rs.close();</span><br><span class="line">		st.close();</span><br><span class="line">		conn.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="jdbc实现增删改查"><a class="markdownIt-Anchor" href="#jdbc实现增删改查"></a> jdbc实现增删改查</h1>
<p>其中增删改使用的方法是<code>executeUpdate</code>，查询使用的方法是<code>executeQuery</code></p>
<h2 id="增"><a class="markdownIt-Anchor" href="#增"></a> 增</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增加</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUSer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//6步</span></span><br><span class="line">		<span class="comment">//注册驱动</span></span><br><span class="line">		Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">		<span class="comment">//创建连接对象</span></span><br><span class="line">		Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/day08_jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		<span class="comment">//创建执行sql语句连接对象</span></span><br><span class="line">		Statement st = conn.createStatement();</span><br><span class="line">		<span class="comment">//执行sql语句</span></span><br><span class="line">		String sql = <span class="string">&quot;insert into user values (null,&#x27;小李&#x27;,&#x27;123&#x27;)&quot;</span>;</span><br><span class="line">		<span class="comment">//因为是控制的行数，所以返回的是int类型</span></span><br><span class="line">		<span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span> (i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//更新成功</span></span><br><span class="line">			System.out.println(<span class="string">&quot;成功添加了&quot;</span>+i+<span class="string">&quot;行数据&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		st.close();</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删"><a class="markdownIt-Anchor" href="#删"></a> 删</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">		<span class="meta">@Test</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByUid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			<span class="comment">//6步</span></span><br><span class="line">			<span class="comment">//注册驱动</span></span><br><span class="line">			Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">			<span class="comment">//创建连接对象</span></span><br><span class="line">			Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/day08_jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">			<span class="comment">//创建执行sql语句连接对象</span></span><br><span class="line">			Statement st = conn.createStatement();</span><br><span class="line">			<span class="comment">//执行sql语句</span></span><br><span class="line">			String sql = <span class="string">&quot;delete from user where uid = 4&quot;</span>;</span><br><span class="line">			<span class="comment">//因为是控制的行数，所以返回的是int类型</span></span><br><span class="line">			<span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">			<span class="comment">//判断</span></span><br><span class="line">			<span class="keyword">if</span> (i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="comment">//更新成功</span></span><br><span class="line">				System.out.println(<span class="string">&quot;成功删除了&quot;</span>+i+<span class="string">&quot;行数据&quot;</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			st.close();</span><br><span class="line">			conn.close();</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h2 id="改"><a class="markdownIt-Anchor" href="#改"></a> 改</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line">		<span class="meta">@Test</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByUid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			<span class="comment">//6步</span></span><br><span class="line">			<span class="comment">//注册驱动</span></span><br><span class="line">			Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">			<span class="comment">//创建连接对象</span></span><br><span class="line">			Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/day08_jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">			<span class="comment">//创建执行sql语句连接对象</span></span><br><span class="line">			Statement st = conn.createStatement();</span><br><span class="line">			<span class="comment">//执行sql语句</span></span><br><span class="line">			String sql = <span class="string">&quot;update user set username = &#x27;小王&#x27; where uid = 3&quot;</span>;</span><br><span class="line">			<span class="comment">//因为是控制的行数，所以返回的是int类型</span></span><br><span class="line">			<span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">			<span class="comment">//判断</span></span><br><span class="line">			<span class="keyword">if</span> (i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="comment">//更新成功</span></span><br><span class="line">				System.out.println(<span class="string">&quot;成功修改了&quot;</span>+i+<span class="string">&quot;行数据&quot;</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			st.close();</span><br><span class="line">			conn.close();</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查"><a class="markdownIt-Anchor" href="#查"></a> 查</h2>
<p>查询先创建一个实体类 <code>User</code> 和表名一样，而且查询的结果需要放在一个集合当中进行遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ujiuye.pojo;</span><br><span class="line"><span class="comment">//类名和表名一样</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> uid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.uid = uid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;User [uid=&quot;</span> + uid + <span class="string">&quot;, username=&quot;</span> + username + <span class="string">&quot;, password=&quot;</span> + password + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> uid, String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.uid = uid;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询</span></span><br><span class="line">		<span class="meta">@Test</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByUid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			<span class="comment">//6步</span></span><br><span class="line">			<span class="comment">//注册驱动</span></span><br><span class="line">			Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">			<span class="comment">//创建连接对象</span></span><br><span class="line">			Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/day08_jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">			<span class="comment">//创建执行sql语句连接对象</span></span><br><span class="line">			Statement st = conn.createStatement();</span><br><span class="line">			<span class="comment">//执行sql语句</span></span><br><span class="line">			String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">			<span class="comment">//因为是控制的行数，所以返回的是int类型</span></span><br><span class="line">			ResultSet rs = st.executeQuery(sql);</span><br><span class="line">			<span class="comment">//创建集合</span></span><br><span class="line">			ArrayList&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">			<span class="comment">//处理结果集</span></span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> uid = rs.getInt(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">                        String username = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                        String password = rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                        User user = <span class="keyword">new</span> User(uid, username, password);</span><br><span class="line">                        list.add(user);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">				System.out.println(user);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			rs.close();</span><br><span class="line">			st.close();</span><br><span class="line">			conn.close();</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h1 id="sql注入问题"><a class="markdownIt-Anchor" href="#sql注入问题"></a> sql注入问题</h1>
<p>在查询的时候使用<code>createStatement</code>来执行sql语句的连接对象的时候就会出现<code>sql</code>注入问题<br />
通过一个案例来引出<code>sql</code>注入问题<br />
先对jdbc重复要写的步骤进行抽取，抽取为<code>JDBCUtils</code>类<br />
其中<code>rs, psvm, conn</code>是查询，执行sql语句和获取sql连接对象，如果没有某个值就用<code>null</code>代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ujiuye.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="comment">//注册驱动</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建连接对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///day08_jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> conn;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//释放资源</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs, Statement st, Connection conn)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(st != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				st.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放资源</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs, PreparedStatement psvm, Connection conn)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(psvm != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				psvm.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着写主要逻辑内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//第一步：输入用户名和密码</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">		String username = sc.nextLine();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">		String password = sc.nextLine();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//第二步:和数据库做对比</span></span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		Statement cs = conn.createStatement();</span><br><span class="line">		ResultSet rs = cs.executeQuery(<span class="string">&quot;select * from user where username = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;欢迎：&quot;</span>+ rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;账号或者密码错误&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>在以上案例当中，如果正确输入用户名，但是在输入密码的时候后面跟上<code>'or' 1=1</code>就会导致登录也会成功，这就和我们预期的效果不一样了，这就称之为sql注入问题<br />
<strong>为什么会出现sql注入问题</strong><br />
当我们使用<code>statement</code>接口时, 会将控制台输入的字符串与<code>sql</code>语句进行拼接, 拼接时把字符串中的or当做了逻辑运算符进行处理, 此时, <code>or</code>后边的<code>1=1</code>是恒成立的, 所以就失去了账号和密码登录的功能, 无论你的账号和密码怎么输入, 都是可以正常登录。<br />
<strong>解决SQL注入问题:</strong><br />
需要将statement接口更换为<code>preparedstatement</code>接口。因为用<code>preparedstatemen</code>t会将<code>sql</code>语句预编译，所以就不会有<code>or</code>的问题。<br />
用<code>preparedstatement</code>的时候直接在执行sql语句的连接对象的时候就把sql语句写了，并且用?占位，然后再用set方法进行赋值，<code>1代表第一个?,2代表第二个?</code>，然后执行<code>executeQuery</code>方法进行查询，获取的时候用<code>next</code>的方法进行判断，如有用get方法获取到并输出，并且<code>next</code>就会去判断下一个位置有没有值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//第一步：输入用户名和密码</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">		String username = sc.nextLine();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">		String password = sc.nextLine();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//第二步:和数据库做对比</span></span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">//		Statement cs = conn.createStatement();</span></span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(<span class="string">&quot;select * from user where username = ? and password = ? &quot;</span>);</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		psvm.setString(<span class="number">1</span>, username);</span><br><span class="line">		psvm.setString(<span class="number">2</span>, password);</span><br><span class="line"><span class="comment">//		ResultSet rs = cs.executeQuery(&quot;select * from user where username = &#x27;&quot;+username+&quot;&#x27; and password = &#x27;&quot;+password+&quot;&#x27; &quot;);</span></span><br><span class="line">		ResultSet rs = psvm.executeQuery();</span><br><span class="line">		<span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;欢迎：&quot;</span>+ rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;账号或者密码错误&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		JDBCUtils.closeAll(rs, psvm, conn);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="preparedstatement常见方法的使用"><a class="markdownIt-Anchor" href="#preparedstatement常见方法的使用"></a> PreparedStatement常见方法的使用</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>setInt(int index,int value)</td>
<td>为？占位符，赋予int值</td>
</tr>
<tr>
<td>setString(int index,String value)</td>
<td>为？占位符，赋予String值</td>
</tr>
<tr>
<td>executeQuery()</td>
<td>执行查询的SQL语句</td>
</tr>
<tr>
<td>executeUpdate()</td>
<td>执行更新的SQL语句。</td>
</tr>
</tbody>
</table>
<h1 id="preparedstatement的增删改查操作"><a class="markdownIt-Anchor" href="#preparedstatement的增删改查操作"></a> PreparedStatement的增删改查操作</h1>
<h2 id="增-2"><a class="markdownIt-Anchor" href="#增-2"></a> 增</h2>
<ul>
<li>增加一条数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//注册驱动和获取连接</span></span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		String sql = <span class="string">&quot;insert into user values(?,?,?)&quot;</span>;</span><br><span class="line">		<span class="comment">//获取预处理对象</span></span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(sql);</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		psvm.setString(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">		psvm.setString(<span class="number">2</span>, <span class="string">&quot;热巴&quot;</span>);</span><br><span class="line">		psvm.setString(<span class="number">3</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">		<span class="comment">//执行</span></span><br><span class="line">		<span class="keyword">int</span> i = psvm.executeUpdate();</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		JDBCUtils.closeAll(<span class="keyword">null</span>, psvm, conn);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>新增多条</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增多条</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUsers2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		String sql = <span class="string">&quot;insert into user values(?,?,?)&quot;</span>;</span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(sql);</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		psvm.setString(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">		psvm.setString(<span class="number">2</span>, <span class="string">&quot;小短腿&quot;</span>);</span><br><span class="line">		psvm.setString(<span class="number">3</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">		psvm.addBatch();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		psvm.setString(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">		psvm.setString(<span class="number">2</span>, <span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">		psvm.setString(<span class="number">3</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">		psvm.addBatch();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//批量执行</span></span><br><span class="line">		psvm.executeBatch();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="改-2"><a class="markdownIt-Anchor" href="#改-2"></a> 改</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserByUid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		String sql = <span class="string">&quot;update user set username = ? where uid = ?&quot;</span>;</span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(sql);</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		psvm.setString(<span class="number">1</span>, <span class="string">&quot;houyi&quot;</span>);</span><br><span class="line">		psvm.setInt(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">		<span class="comment">//执行</span></span><br><span class="line">		<span class="keyword">int</span> i = psvm.executeUpdate();</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		JDBCUtils.closeAll(<span class="keyword">null</span>, psvm, conn);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="删-2"><a class="markdownIt-Anchor" href="#删-2"></a> 删</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserByUid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		String sql = <span class="string">&quot;delete from user where uid = ?&quot;</span>;</span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(sql);</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		psvm.setInt(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">		<span class="comment">//执行</span></span><br><span class="line">		<span class="keyword">int</span> i = psvm.executeUpdate();</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		JDBCUtils.closeAll(<span class="keyword">null</span>, psvm, conn);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="查-2"><a class="markdownIt-Anchor" href="#查-2"></a> 查</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">		PreparedStatement psvm = conn.prepareStatement(sql);</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		<span class="comment">//执行</span></span><br><span class="line">		ResultSet rs = psvm.executeQuery();</span><br><span class="line">		<span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">			<span class="keyword">int</span> uid = rs.getInt(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">			String username = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">			String password = rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">			System.out.println(uid + <span class="string">&quot;\t&quot;</span> + username + <span class="string">&quot;\t&quot;</span> + password);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		JDBCUtils.closeAll(rs, psvm, conn);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="需要的jar包"><a class="markdownIt-Anchor" href="#需要的jar包"></a> 需要的jar包</h4>
<p>链接：<a href="https://pan.baidu.com/s/1_nqg99Fb83FA1KaFXsip_g">https://pan.baidu.com/s/1_nqg99Fb83FA1KaFXsip_g</a><br />
提取码：1314<br />
复制这段内容后打开百度网盘手机App，操作更方便哦</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hashMap 与 hashTable 的区别</title>
    <url>/2021/03/20/hashCode%E5%92%8ChashTable%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="hashmap-与-hashtable-的区别"><a class="markdownIt-Anchor" href="#hashmap-与-hashtable-的区别"></a> hashMap 与 hashTable 的区别</h2>
<a id="more"></a>
<ol>
<li>
<p>hashMap 不是synchronized [ˈsɪŋkrənaɪzd] 的，也就是线程不安全。而hashTable是synchronized的，是线程安全的。 如果存在多个线程同时读写同一个hashMap，那么需要手动加锁才能保证线程安全，而hashTable的方法本身就有锁，不需要手动加锁。</p>
<p>​	   也正是因为hashTable的方法本身有锁，所以hashTable的读取速度比hashMap要慢。如果是单线程，推荐使用hashMap 。如果是多线程，为了保证线程安全，推荐使用hashTable（在java5以后，hashTable逐渐被舍弃，可以使用ConcurrentHashMap完成与hashTable相同的功能）。</p>
</li>
<li>
<p>hashMap中 ， Key 和 Value 都可以是null ， 在hashTable中，Key和value都不能是null。</p>
</li>
<li>
<p>hashMap 的默认容量是16 ， hashTable的默认容量是11 。 两者的填充因子默认都是0.75。hashMap要求底层的数组容量必须是2的整数次幂， hashTable不要求。在数据量达到超过阀值时，二者都会自动扩展，hashMap会自动扩展到原容量的2倍， hashTable会自动扩展到原容量的2倍+1。</p>
</li>
<li>
<p>是否包含contains方法。 hashMap把contains方法去掉了， 改成了 containsKey() 和 containsValue()方法。  hashTable有 contains() 、containsKey()、containsValue()方法 ， 其中 contains()和containsValue()功能相同。</p>
</li>
<li>
<p>哈希值的使用是不同的，HashTable的hash值是直接使用对象中的hashCode方法，而HashMap则是重新计算对象的HashCode；并且用与代替求模。</p>
</li>
<li>
<p>HashMap继承自AbstractMap类</p>
<p><img src="https://img-blog.csdnimg.cn/20210320111949957.png" alt="在这里插入图片描述" /></p>
<p>Hashtable继承自Dictionary [ˈdɪkʃənri] 类</p>
<p><img src="https://img-blog.csdnimg.cn/20210320112002535.png" alt="在这里插入图片描述" /></p>
<p>但二者都实现了Map接口。</p>
<ol start="7">
<li>三者效率的比较：<br />
由于安全机制的原因，HashMap的效率比HashTable，CurrentHashMap的效率高；但是由于CurrentHashMap加锁的高效性,HashTable是整个加锁，他的效率比HashTable高； 总的来说 HashMap&gt;CurrentHashMap&gt;HashTable;</li>
</ol>
</li>
</ol>
<p>参考文章：<a href="https://blog.csdn.net/u010476994/article/details/80049715">https://blog.csdn.net/u010476994/article/details/80049715</a></p>
<p>​			  	<a href="https://blog.csdn.net/qq_29882585/article/details/52198014">https://blog.csdn.net/qq_29882585/article/details/52198014</a></p>
<p>​				  <a href="https://blog.nowcoder.net/n/40d21b0208a64bd5881070d4ade47be1">https://blog.nowcoder.net/n/40d21b0208a64bd5881070d4ade47be1</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>对于java中String的理解</title>
    <url>/2021/01/24/string/</url>
    <content><![CDATA[<h1 id="对于java中string的理解"><a class="markdownIt-Anchor" href="#对于java中string的理解"></a> 对于java中String的理解</h1>
<a id="more"></a>
<h2 id="1创建字符串"><a class="markdownIt-Anchor" href="#1创建字符串"></a> 1.创建字符串</h2>
<ul>
<li>
<p>使用关键字创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;Runoob&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用构造方法来创建 <code>String</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str2=<span class="keyword">new</span> string(<span class="string">&quot;Runoob&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="两种创建方式区别"><a class="markdownIt-Anchor" href="#两种创建方式区别"></a> 两种创建方式区别</h3>
<p>String创建的字符串存储在公共池中，而new创建的字符串对象在堆上:</p>
<p>string简单理解就是将其转换为字符串:例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">char</span>[] helloArray = &#123; <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line">      String helloString = <span class="keyword">new</span> String(helloArray);  </span><br><span class="line">      System.out.println( helloString ); <span class="comment">//runoob 此时就是应用第二种创建方式将单个字符转换为了字符串</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong><code>String</code>类是不可改变的，所以你一旦创建了 <code>String</code>对象，那它的值就无法改变了。</p>
<p>由于String被声明为final，所以不可变，具体参考：<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%9F%BA%E7%A1%80.md#%E4%BA%8Cstring">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java 基础.md#二string</a></p>
<p>如果需要对字符串做很多修改，那么应该选择使用 <a href="https://www.runoob.com/java/java-stringbuffer.html">StringBuffer &amp; StringBuilder 类</a>。</p>
<h2 id="2string中的方法"><a class="markdownIt-Anchor" href="#2string中的方法"></a> 2.String中的方法</h2>
<ul>
<li>
<p>获取字符串长度 <code>字符串.length();</code></p>
</li>
<li>
<p>获取角标  <code>字符串.charAt(索引)</code>获取的是对应的数值</p>
</li>
<li>
<p>截取(1)   <code>字符串.substring(索引)</code>从这个数开始往后的内容进行截取，不包含本数</p>
</li>
<li>
<p>截取(2)   <code>字符串.substring(索引1,索引2)</code>截取到哪一位  从1位置开始到2位置之前     含头不含尾</p>
</li>
<li>
<p>索引 <code>字符串.indexOf</code>返回具体那个数的索引</p>
</li>
<li>
<p>大写 <code>字符串.toUpperCase()</code></p>
</li>
<li>
<p>小写 <code>字符串.toLowerCase()</code></p>
</li>
<li>
<p>连接字符串两种方法</p>
<p>​    a：<code>string1.concat(string2);</code>使用<code>concat()</code>来连接，但是少用</p>
<p>​	b:  使用+号来连接，<code>&quot;Hello,&quot; + &quot; runoob&quot; + &quot;!&quot;</code>输出 ```“Hello, runoob!”``</p>
<p>所以如果想要使一个数变成字符串，那么拼接上一个<code>&quot;&quot;</code>， 如：<code>数+&quot;&quot;</code>即可</p>
</li>
<li>
<p>比较字符串 <code>equals</code>和<code>==</code>的区别(使用equals和hashCode方法一般要进行重写，重写之后比较的是内容，否则是其地址值的比较)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s2);</span><br><span class="line">System.out.println(s2.equals(<span class="string">&quot;abc&quot;</span>));<span class="comment">//true 因为equals方法重写了，所以比较的是内容</span></span><br><span class="line">System.out.println(s2==<span class="string">&quot;abc&quot;</span>);<span class="comment">//比较的是地址值</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>查看是否包含 <code>contains</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s5 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> contains = s5.contains(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(contains); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>忽略大小写比较 <code>equalsIgnoreCase</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> c = <span class="string">&quot;abc&quot;</span>.equalsIgnoreCase(<span class="string">&quot;ABc&quot;</span>);</span><br><span class="line">System.out.println(c);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>以什么开头 <code>startsWith</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s5 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> startsWith = s5.startsWith(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(startsWith);<span class="comment">//true	</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>以什么结尾</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s5 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> endsWith = s5.endsWith(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">System.out.println(endsWith);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>是不是空字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s5 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> empty = s5.isEmpty();</span><br><span class="line">System.out.println(empty);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3tostring"><a class="markdownIt-Anchor" href="#3tostring"></a> 3.toString()</h2>
<p>因为<code>toString</code>方法是<code>Object</code>里面已经有了的方法，而所有类都是继承<code>Object</code>，所以“所有对象都有这个方法”。</p>
<p>它通常只是为了方便输出，比如System.out.println(xx)，括号里面的“xx”如果不是<code>String</code>类型的话，就自动调用xx的<code>toString()</code>方法。</p>
<p>总而言之，它只是<code>sun</code>公司开发<code>java</code>的时候为了方便所有类的字符串操作而特意加入的一个方法</p>
<p>toString()应用的时候也要重写，否则得到的是地址值，重写后得到的是属性值</p>
<p>就是想要输出成<code>String</code>类型但是这个东西本身不是String’类型就要调用<code>toString()</code>方法【eclipse里面重写 tostring快捷键 alt+shift+s s】</p>
<p>Arrays.toString 是将数组转为字符串</p>
<p>toString是转换为字符串</p>
<p>参考：<a href="https://www.cnblogs.com/huan-guo/p/8404891.html">https://www.cnblogs.com/huan-guo/p/8404891.html</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生命周期</title>
    <url>/2020/11/27/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="vue生命周期"><a class="markdownIt-Anchor" href="#vue生命周期"></a> vue生命周期</h2>
<a id="more"></a>
<p>vue生命周期分为<strong>八个阶段</strong>，分别为</p>
<ul>
<li>beforeCreate（创建前）,</li>
<li>created（创建后）,</li>
<li>beforeMount(载入前),</li>
<li>mounted（载入后）,</li>
<li>beforeUpdate（更新前）,</li>
<li>updated（更新后）,</li>
<li>beforeDestroy（销毁前）,</li>
<li>destroyed（销毁后）<br />
附一张图<br />
<img src="https://img-blog.csdnimg.cn/20201126231058432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
</ul>
<p>具体代码</p>
<ul>
<li>创建前 beforeCreate<br />
<img src="https://img-blog.csdnimg.cn/20201126232118641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20201126232133670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>created（创建后)<br />
<img src="https://img-blog.csdnimg.cn/2020112700020082.png#pic_center" alt="在这里插入图片描述" /></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020112700025549.png#pic_center" alt="在这里插入图片描述" /></p>
<ul>
<li>beforeMount(载入前)<br />
<img src="https://img-blog.csdnimg.cn/20201127000113679.png#pic_center" alt="在这里插入图片描述" /></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201127000104334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<ul>
<li>mounted（载入后）<br />
<img src="https://img-blog.csdnimg.cn/20201126235948907.png#pic_center" alt="在这里插入图片描述" /></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201127000013339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<ul>
<li>
<p>beforeUpdate（更新前）<br />
updated（更新后）<br />
更新不做显示<br />
<img src="https://img-blog.csdnimg.cn/202011262353553.png#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20201126235402564.png#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>beforeDestroy（销毁前）<br />
<img src="https://img-blog.csdnimg.cn/20201126235900872.png#pic_center" alt="在这里插入图片描述" /></p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020112623580578.png#pic_center" alt="在这里插入图片描述" /></p>
<ul>
<li>destroyed（销毁后）<br />
<img src="https://img-blog.csdnimg.cn/20201126235836102.png#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20201126235842327.png#pic_center" alt="在这里插入图片描述" /></li>
</ul>
<p><strong>vue中内置的方法 属性和vue生命周期的运行顺序（methods、computed、data、watch、props)</strong><br />
根据翻看vue源码可知：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>)</span>&#123;</span><br><span class="line">vm._watchers = []</span><br><span class="line"><span class="keyword">const</span> opts = vm.$options</span><br><span class="line"><span class="keyword">if</span> (opts.props) initProps(vm,opts.props)</span><br><span class="line"><span class="keyword">if</span> (opts.methods) initMethods(vm,opts.methods)</span><br><span class="line"><span class="keyword">if</span> (opts.data)&#123;</span><br><span class="line">initData(vm)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)&#125;</span><br><span class="line"><span class="keyword">if</span> (opts.computed) initComputed(vm,opts.computed)</span><br><span class="line"><span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">initWatch(vm,opts.watch)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>props =&gt; methods =&gt;data =&gt; computed =&gt; watch;</p>
<p>参考：<a href="https://www.jianshu.com/p/410b6099be69">https://www.jianshu.com/p/410b6099be69</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域,同源策略</title>
    <url>/2020/11/25/%E8%B7%A8%E5%9F%9F%20%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="跨域-同源策略"><a class="markdownIt-Anchor" href="#跨域-同源策略"></a> 跨域 同源策略</h2>
<a id="more"></a>
<h3 id="什么是浏览器同源策略"><a class="markdownIt-Anchor" href="#什么是浏览器同源策略"></a> 什么是浏览器同源策略</h3>
<p>同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p>
<p>它的核心就在于它认为自任何站点装载的信赖内容是不安全的。当被浏览器半信半疑的脚本运行在沙箱时，它们应该只被允许访问来自同一站点的资源，而不是那些来自其它站点可能怀有恶意的资源。</p>
<p>所谓同源是指：域名、协议、端口相同。</p>
<p>下表是相对于 <code>http://www.laixiangran.cn/home/index.html</code> 的同源检测结果：<br />
<img src="https://img-blog.csdnimg.cn/20201125231018169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>另外，同源策略又分为以下两种：</p>
<ul>
<li>DOM 同源策略：禁止对不同源页面 DOM 进行操作。这里主要场景是 <code>iframe</code> 跨域的情况，不同域名的 <code>iframe</code> 是限制互相访问的。</li>
<li><code>XMLHttpRequest</code> 同源策略：禁止使用 XHR 对象向不同源的服务器地址发起 HTTP 请求。</li>
</ul>
<h3 id="为什么要有跨域限制"><a class="markdownIt-Anchor" href="#为什么要有跨域限制"></a> 为什么要有跨域限制</h3>
<p>因为存在浏览器同源策略，所以才会有跨域问题。那么浏览器是出于何种原因会有跨域的限制呢。其实不难想到，跨域限制主要的目的就是为了用户的上网安全。</p>
<p>如果浏览器没有同源策略，会存在什么样的安全问题呢。下面从 DOM 同源策略和 <code>XMLHttpRequest</code> 同源策略来举例说明：</p>
<p><strong>如果没有 DOM 同源策略，也就是说不同域的 iframe 之间可以相互访问，那么黑客可以这样进行攻击：</strong></p>
<ol>
<li>做一个假网站，里面用 iframe 嵌套一个银行网站 <a href="http://mybank.com">http://mybank.com</a>。</li>
<li>把 iframe 宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</li>
<li>这时如果用户输入账号密码，我们的主网站可以跨域访问到 <code>http://mybank.com</code> 的 dom 节点，就可以拿到用户的账户密码了。</li>
</ol>
<p><strong>如果 XMLHttpRequest 同源策略，那么黑客可以进行 CSRF（跨站请求伪造） 攻击：</strong></p>
<ol>
<li>用户登录了自己的银行页面 <code>http://mybank.com</code>，<code>http://mybank.com</code> 向用户的 cookie 中添加用户标识。</li>
<li>用户浏览了恶意页面 <a href="http://evil.com">http://evil.com</a>，执行了页面中的恶意 AJAX 请求代码。</li>
<li><code>http://evil.com</code> 向 <code>http://mybank.com</code> 发起 AJAX HTTP 请求，请求会默认把 <code>http://mybank.com</code>对应 cookie 也同时发送过去。</li>
<li>银行页面从发送的 cookie 中提取用户标识，验证用户无误，response 中返回请求数据。此时数据就泄露了。</li>
<li>而且由于 Ajax 在后台执行，用户无法感知这一过程。<br />
因此，有了浏览器同源策略，我们才能更安全的上网。</li>
</ol>
<h3 id="跨域的解决方法"><a class="markdownIt-Anchor" href="#跨域的解决方法"></a> 跨域的解决方法</h3>
<p>从上面我们了解到了浏览器同源策略的作用，也正是有了跨域限制，才使我们能安全的上网。但是在实际中，有时候我们需要突破这样的限制，因此下面将介绍几种跨域的解决方法。</p>
<p><strong>CORS（跨域资源共享）</strong><br />
<code>CORS</code>（<code>Cross-origin resource sharing</code>，跨域资源共享）是一个 W3C 标准，定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。CORS 背后的基本思想，就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>
<p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p>
<p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p>
<p>浏览器将CORS请求分成两类：简单请求（<code>simple request</code>）和非简单请求（<code>not-so-simple request</code>）。</p>
<p>只要同时满足以下两大条件，就属于简单请求。</p>
<ol>
<li>请求方法是以下三种方法之一：</li>
</ol>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<ol start="2">
<li>HTTP的头信息不超出以下几种字段：</li>
</ol>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain<br />
凡是不同时满足上面两个条件，就属于非简单请求。</li>
</ul>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<p><strong>简单请求</strong></p>
<ol>
<li>在请求中需要附加一个额外的 Origin 头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部信息来决定是否给予响应。例如：Origin: <a href="http://www.laixiangran.cn">http://www.laixiangran.cn</a></li>
<li>如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源信息（如果是公共资源，可以回发 * ）。例如：<code>Access-Control-Allow-Origin：http://www.laixiangran.cn</code></li>
<li>没有这个头部或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器会处理请求。注意，请求和响应都不包含 cookie 信息。</li>
<li>如果需要包含 cookie 信息，ajax 请求需要设置 xhr 的属性 <code>withCredentials</code> 为 <code>true</code>，服务器需要设置响应头部 <code>Access-Control-Allow-Credentials: true</code>。<br />
<strong>非简单请求</strong><br />
浏览器在发送真正的请求之前，会先发送一个 Preflight 请求给服务器，这种请求使用 OPTIONS 方法，发送下列头部：</li>
</ol>
<ul>
<li>Origin：与简单的请求相同。</li>
<li>Access-Control-Request-Method: 请求自身使用的方法。</li>
<li>Access-Control-Request-Headers: （可选）自定义的头部信息，多个头部以逗号分隔。<br />
例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Origin: http:<span class="comment">//www.laixiangran.cn</span></span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: NCZ</span><br></pre></td></tr></table></figure>
<p>发送这个请求后，服务器可以决定是否允许这种类型的请求。服务器通过在响应中发送如下头部与浏览器进行沟通：</p>
<ul>
<li>Access-Control-Allow-Origin：与简单的请求相同。</li>
<li>Access-Control-Allow-Methods: 允许的方法，多个方法以逗号分隔。</li>
<li>Access-Control-Allow-Headers: 允许的头部，多个方法以逗号分隔。</li>
<li>Access-Control-Max-Age: 应该将这个 Preflight 请求缓存多长时间（以秒表示）。<br />
例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//www.laixiangran.cn</span></span><br><span class="line">Access-Control-Allow-Methods: GET, POST</span><br><span class="line">Access-Control-Allow-Headers: NCZ</span><br><span class="line">Access-Control-Max-Age: <span class="number">1728000</span></span><br></pre></td></tr></table></figure>
<p>一旦服务器通过 Preflight 请求允许该请求之后，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样了。</p>
<p><strong>优点</strong></p>
<ul>
<li>CORS 通信与同源的 AJAX 通信没有差别，代码完全一样，容易维护。</li>
<li>支持所有类型的 HTTP 请求。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>存在兼容性问题，特别是 IE10 以下的浏览器。</li>
<li>第一次发送非简单请求时会多一次请求。</li>
</ul>
<p><strong>JSONP 跨域</strong><br />
由于 script 标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以通过动态创建 script 标签，然后利用 src 属性进行跨域，这也就是 JSONP 跨域的基本原理。</p>
<p>直接通过下面的例子来说明 JSONP 实现跨域的流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义一个 回调函数 handleResponse 用来接收返回的数据</span></span><br><span class="line"><span class="function">function <span class="title">handleResponse</span><span class="params">(data)</span> </span>&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse</span></span><br><span class="line"><span class="keyword">var</span> body = document.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> script = document.gerElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.src = <span class="string">&#x27;http://www.laixiangran.cn/json?callback=handleResponse&#x27;</span>;</span><br><span class="line">body.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过 script.src 请求 `http://www.laixiangran.cn/json?callback=handleResponse`，</span></span><br><span class="line"><span class="comment">// 4. 后端能够识别这样的 URL 格式并处理该请求，然后返回 handleResponse(&#123;&quot;name&quot;: &quot;laixiangran&quot;&#125;) 给浏览器</span></span><br><span class="line"><span class="comment">// 5. 浏览器在接收到 handleResponse(&#123;&quot;name&quot;: &quot;laixiangran&quot;&#125;) 之后立即执行 ，也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了。</span></span><br></pre></td></tr></table></figure>
<p><strong>优点</strong></p>
<ul>
<li>使用简便，没有兼容性问题，目前最流行的一种跨域方法。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>只支持 GET 请求。</li>
<li>由于是从其它域中加载代码执行，因此如果其他域不安全，很可能会在响应中夹带一些恶意代码。</li>
<li>要确定 JSONP 请求是否失败并不容易。虽然 HTML5 给 script 标签新增了一个 onerror 事件处理程序，但是存在兼容性问题。</li>
</ul>
<p><strong>图像 Ping 跨域</strong></p>
<p>由于 img 标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以通过 img 标签的 src 属性进行跨域，这也就是图像 Ping 跨域的基本原理。</p>
<p>直接通过下面的例子来说明图像 Ping 实现跨域的流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 onload 及 onerror 事件可以知道响应是什么时候接收到的，但是不能获取响应文本</span></span><br><span class="line">img.onload = img.onerror = function() &#123;</span><br><span class="line">    console.log(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求数据通过查询字符串形式发送</span></span><br><span class="line">img.src = <span class="string">&#x27;http://www.laixiangran.cn/test?name=laixiangran&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>优点</strong></p>
<ul>
<li>用于实现跟踪用户点击页面或动态广告曝光次数有较大的优势。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>只支持 GET 请求。</li>
<li>只能浏览器与服务器的单向通信，因为浏览器不能访问服务器的响应文本。</li>
</ul>
<p><strong>服务器代理</strong></p>
<ul>
<li>浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。<br />
服务器代理是万能的。</li>
</ul>
<p><strong>document.domain 跨域</strong></p>
<p>对于主域名相同，而子域名不同的情况，可以使用 document.domain 来跨域。这种方式非常适用于 iframe 跨域的情况。</p>
<p>比如，有一个页面，它的地址是 <a href="http://www.laixiangran.cn/a.html%EF%BC%8C%E5%9C%A8%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%80%E4%B8%AA">http://www.laixiangran.cn/a.html，在这个页面里面有一个</a> iframe，它的 src 是 <a href="http://laixiangran.cn/b.html%E3%80%82%E5%BE%88%E6%98%BE%E7%84%B6%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%8E%E5%AE%83%E9%87%8C%E9%9D%A2%E7%9A%84">http://laixiangran.cn/b.html。很显然，这个页面与它里面的</a> iframe 框架是不同域的，所以我们是无法通过在页面中书写 js 代码来获取 iframe 中的东西的。</p>
<p>这个时候，document.domain 就可以派上用场了，我们只要把 <a href="http://www.laixiangran.cn/a.html">http://www.laixiangran.cn/a.html</a> 和 <a href="http://laixiangran.cn/b.html">http://laixiangran.cn/b.html</a> 这两个页面的 document.domain 都设成相同的域名就可以了。但要注意的是，document.domain 的设置是有限制的，我们只能把 document.domain 设置成自身或更高一级的父域，且主域必须相同。例如：<a href="http://a.b.laixiangran.cn">a.b.laixiangran.cn</a> 中某个文档的 document.domain 可以设成 <a href="http://a.b.laixiangran.cn">a.b.laixiangran.cn</a>、<a href="http://b.laixiangran.cn">b.laixiangran.cn</a> 、<a href="http://laixiangran.cn">laixiangran.cn</a> 中的任意一个，但是不可以设成 <a href="http://c.a.b.laixiangran.cn">c.a.b.laixiangran.cn</a> ，因为这是当前域的子域，也不可以设成 <a href="http://baidu.com">baidu.com</a>，因为主域已经不相同了。</p>
<p>例如，在页面 <a href="http://www.laixiangran.cn/a.html">http://www.laixiangran.cn/a.html</a> 中设置document.domain：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> id=<span class="string">&quot;myIframe&quot;</span> onload=<span class="string">&quot;test()&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.domain = <span class="string">&#x27;laixiangran.cn&#x27;</span>; <span class="comment">// 设置成主域</span></span><br><span class="line">    <span class="function">function <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        console.log(document.getElementById(<span class="string">&#x27;myIframe&#x27;</span>).contentWindow);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在页面 <code>http://laixiangran.cn/b.html</code> 中也设置 <code>document.domain</code>，而且这也是必须的，虽然这个文档的 domain 就是 <a href="http://laixiangran.cn">laixiangran.cn</a>，但是还是必须显式地设置 <code>document.domain</code> 的值：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.domain = <span class="string">&#x27;laixiangran.cn&#x27;</span>; <span class="comment">// document.domain 设置成与主页面相同</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>这样，<code>http://www.laixiangran.cn/a.html</code> 就可以通过 js 访问到 <code>http://laixiangran.cn/b.html</code> 中的各种属性和对象了。</p>
<p><strong><a href="http://window.name">window.name</a> 跨域</strong><br />
window 对象有个 name 属性，该属性有个特征：即在一个窗口（window）的生命周期内，窗口载入的所有的页面（不管是相同域的页面还是不同域的页面）都是共享一个 <a href="http://window.name">window.name</a> 的，每个页面对 <a href="http://window.name">window.name</a> 都有读写的权限，<a href="http://window.name">window.name</a> 是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p>
<p>通过下面的例子介绍如何通过 <a href="http://window.name">window.name</a> 来跨域获取数据的。</p>
<p>页面 <code>http://www.laixiangran.cn/a.html</code> 的代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> id=<span class="string">&quot;myIframe&quot;</span> onload=<span class="string">&quot;test()&quot;</span> style=<span class="string">&quot;display: none;&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 2. iframe载入 &quot;http://laixiangran.cn/b.html 页面后会执行该函数</span></span><br><span class="line">    <span class="function">function <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> iframe = document.getElementById(<span class="string">&#x27;myIframe&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重置 iframe 的 onload 事件程序，</span></span><br><span class="line">        <span class="comment">// 此时经过后面代码重置 src 之后，</span></span><br><span class="line">        <span class="comment">// http://www.laixiangran.cn/a.html 页面与该 iframe 在同一个源了，可以相互访问了</span></span><br><span class="line">        iframe.onload = function() &#123;</span><br><span class="line">            <span class="keyword">var</span> data = iframe.contentWindow.name; <span class="comment">// 4. 获取 iframe 里的 window.name</span></span><br><span class="line">            console.log(data); <span class="comment">// hello world!</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 重置一个与 http://www.laixiangran.cn/a.html 页面同源的页面</span></span><br><span class="line">        iframe.src = <span class="string">&#x27;http://www.laixiangran.cn/c.html&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>页面 <code>http://laixiangran.cn/b.html</code> 的代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 给当前的 window.name 设置一个 http://www.laixiangran.cn/a.html 页面想要得到的数据值 </span></span><br><span class="line">    window.name = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>location.hash 跨域</strong><br />
location.hash 方式跨域，是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。</p>
<p>页面 <code>http://www.laixiangran.cn/a.html</code> 的代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> id=<span class="string">&quot;myIframe&quot;</span> onload=<span class="string">&quot;test()&quot;</span> style=<span class="string">&quot;display: none;&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 2. iframe载入 &quot;http://laixiangran.cn/b.html 页面后会执行该函数</span></span><br><span class="line">    <span class="function">function <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 获取通过 http://laixiangran.cn/b.html 页面设置 hash 值</span></span><br><span class="line">        <span class="keyword">var</span> data = window.location.hash;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>页面 <code>http://laixiangran.cn/b.html</code> 的代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 设置父页面的 hash 值</span></span><br><span class="line">    parent.location.hash = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>postMessage 跨域</strong><br />
<code>window.postMessage(message，targetOrigin)</code> 方法是 HTML5 新引进的特性，可以使用它来向其它的 window 对象发送消息，无论这个 window 对象是属于同源或不同源。这个应该就是以后解决 dom 跨域通用方法了。</p>
<p>调用 postMessage 方法的 window 对象是指要接收消息的那一个 window 对象，该方法的第一个参数 message 为要发送的消息，类型只能为字符串；第二个参数 targetOrigin 用来限定接收消息的那个 window 对象所在的域，如果不想限定域，可以使用通配符 *。</p>
<p>需要接收消息的 window 对象，可是通过监听自身的 message 事件来获取传过来的消息，消息内容储存在该事件对象的 data 属性中。</p>
<p>页面 <code>http://www.laixiangran.cn/a.html</code> 的代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> id=<span class="string">&quot;myIframe&quot;</span> onload=<span class="string">&quot;test()&quot;</span> style=<span class="string">&quot;display: none;&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. iframe载入 &quot;http://laixiangran.cn/b.html 页面后会执行该函数</span></span><br><span class="line">    <span class="function">function <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 2. 获取 http://laixiangran.cn/b.html 页面的 window 对象，</span></span><br><span class="line">        <span class="comment">// 然后通过 postMessage 向 http://laixiangran.cn/b.html 页面发送消息</span></span><br><span class="line">        <span class="keyword">var</span> iframe = document.getElementById(<span class="string">&#x27;myIframe&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> win = iframe.contentWindow;</span><br><span class="line">        win.postMessage(<span class="string">&#x27;我是来自 http://www.laixiangran.cn/a.html 页面的消息&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>页面 <code>http://laixiangran.cn/b.html</code> 的代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 注册 message 事件用来接收消息</span></span><br><span class="line">    window.onmessage = function(e) &#123;</span><br><span class="line">        e = e || event; <span class="comment">// 获取事件对象</span></span><br><span class="line">        console.log(e.data); <span class="comment">// 通过 data 属性得到发送来的消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/laixiangran/p/9064769.html">https://www.cnblogs.com/laixiangran/p/9064769.html</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>对于递归的理解</title>
    <url>/2020/11/10/%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h5 id="对于递归的理解"><a class="markdownIt-Anchor" href="#对于递归的理解"></a> 对于递归的理解</h5>
<a id="more"></a>
<p>参考：<a href="https://www.zhihu.com/question/31412436">https://www.zhihu.com/question/31412436</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>linux--linux--mysql登录错误--mysqladmin connect to server at &#39;localhost&#39; failed</title>
    <url>/2020/11/07/linux10/</url>
    <content><![CDATA[<h4 id="linuxlinuxmysql登录错误mysqladmin-connect-to-server-at-localhost-failed"><a class="markdownIt-Anchor" href="#linuxlinuxmysql登录错误mysqladmin-connect-to-server-at-localhost-failed"></a> Linux–linux–mysql登录错误–mysqladmin: connect to server at ‘localhost’ failed</h4>
<a id="more"></a>
<p>一、mysql登录错误（有关mysql密码登录问题都可用此方法重置密码解决）</p>
<p>mysqladmin: connect to server at ‘localhost’ failed<br />
error: ‘Access denied for user ‘root’@‘localhost’ (using password: YES)’</p>
<p>解决办法：破解mysql密码</p>
<p>#&gt; service mysqld stop<br />
#&gt;mysqld_safe --skip-grant-tables &amp; mysql -uroot -p 回车进入<br />
&gt;use mysql;<br />
&gt; update user set password=PASSWORD(“123456”)where user=“root”;<br />
更改密码为123456<br />
&gt; flush privileges; 更新权限<br />
&gt; quit 退出</p>
<p>service mysqld restart<br />
mysql -uroot -p新密码进入</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle 11g已经安装好了但没有scott用户，如何创建新的scott用户？</title>
    <url>/2020/10/12/oracle2/</url>
    <content><![CDATA[<h4 id="oracle-11g已经安装好了但没有scott用户如何创建新的scott用户"><a class="markdownIt-Anchor" href="#oracle-11g已经安装好了但没有scott用户如何创建新的scott用户"></a> oracle 11g已经安装好了但没有scott用户，如何创建新的scott用户？</h4>
<p>首先 用system用户登陆。<br />
导入scott.sql脚本（可以在oracle的安装目录的查找），例如我本机的路径，导入就可以写成：<br />
@G:\app\85463\product\11.2.0\dbhome_1\RDBMS\ADMIN\scott.sql<br />
其次 输入：<br />
alter user scott account unlock; 解锁用户<br />
alter user scott identified by oracle; 修改scott密码<br />
退出在用scott用户登陆<br />
show user (看看当前用户是否是scott)<br />
select * from emp;<br />
检查是否有表<br />
用PLSQL Developer查看结果<br />
PLSQL Developer<img src="https://img-blog.csdnimg.cn/20201012211735475.png#pic_center" alt="在这里插入图片描述" /><br />
scott用户创建成功</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>linux--MapReduce经典案例--数据去重</title>
    <url>/2020/10/11/linux8/</url>
    <content><![CDATA[<h4 id="mapreduce经典案例数据去重"><a class="markdownIt-Anchor" href="#mapreduce经典案例数据去重"></a> MapReduce经典案例–数据去重</h4>
<a id="more"></a>
<p>项目完整代码以及两个test文件以及maven环境所需jar包：<br />
链接：<a href="https://pan.baidu.com/s/10MEBxCfy_ShTaCf_RhGzMw">https://pan.baidu.com/s/10MEBxCfy_ShTaCf_RhGzMw</a><br />
提取码：1314<br />
<img src="https://img-blog.csdnimg.cn/20201011093239110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<ol>
<li>首先要在windows上搭建开发环境 见https://blog.csdn.net/weixin_42693712/article/details/108796708</li>
<li>打开本机eclipse，创建一个maven工程</li>
</ol>
<ul>
<li>选择file-&gt;new-&gt;maven project创建maven工程，选择create a simple project选项，点击next GroupId写com.itcast,Artifact写HadoopDemo，其他默认就好</li>
<li>编辑pom.xml添加依赖，依赖添加成功后，在maven Dependenciens下面自动会有jar包</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">	xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">	xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">	&lt;groupId&gt;com.itcast&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;HadoopDemo&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;RELEASE&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;jdk.tools&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jdk.tools&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.8&lt;/version&gt;</span><br><span class="line">			&lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">			&lt;systemPath&gt;$&#123;JAVA_HOME&#125;/lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在src下建立com.itcast.hdfsdemo包，建立HDFS_CRUD类以初始化客户端对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.hdfsdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.tools.JavaFileManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.BlockLocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.LocatedFileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.RemoteIterator;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> com.sun.javadoc.DocErrorReporter;</span><br><span class="line"><span class="keyword">import</span> com.sun.javadoc.ProgramElementDoc;</span><br><span class="line"><span class="keyword">import</span> com.sun.javadoc.SourcePosition;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.doclets.internal.toolkit.Content;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.doclets.internal.toolkit.WriterFactory;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.doclets.internal.toolkit.util.MessageRetriever;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFS_CRUD</span> </span>&#123;</span><br><span class="line">	FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">//要访问hdfs的url</span></span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration(); </span><br><span class="line">		<span class="comment">//执行hdfs</span></span><br><span class="line">		conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>,<span class="string">&quot;hdfs://gaoyu:9000&quot;</span>);</span><br><span class="line">		<span class="comment">//进行客户端设置</span></span><br><span class="line">		System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">		<span class="comment">//静态方法获取客户端对象</span></span><br><span class="line">		fs = FileSystem.get(conf);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddFileToHdfs</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		<span class="comment">//将上传的文件保存在本地路劲</span></span><br><span class="line">		Path src = <span class="keyword">new</span> Path(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">		<span class="comment">//要上川岛hdfs目标路劲</span></span><br><span class="line">		Path dst = <span class="keyword">new</span> Path(<span class="string">&quot;/testFile&quot;</span>);</span><br><span class="line">		<span class="comment">//上传文件方法</span></span><br><span class="line">		fs.copyFromLocalFile(src, dst);</span><br><span class="line">		<span class="comment">//关闭资源</span></span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDownloadFileTolocal</span><span class="params">()</span> <span class="keyword">throws</span> IllegalMonitorStateException,IOException</span>&#123;</span><br><span class="line">		<span class="comment">//下载文件</span></span><br><span class="line">		fs.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">&quot;/testFile&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;D://&quot;</span>));</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建删除重命名文件</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMkdirAndDeleteAndRename</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">//创建目录</span></span><br><span class="line">		fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">&quot;/a/b/c&quot;</span>));</span><br><span class="line">		fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">&quot;/a2/b2/c2&quot;</span>));</span><br><span class="line">		<span class="comment">//重命名文件或文件夹</span></span><br><span class="line">		fs.rename(<span class="keyword">new</span> Path(<span class="string">&quot;/a&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;/a3&quot;</span>));</span><br><span class="line">		<span class="comment">//删除文件夹</span></span><br><span class="line">		fs.delete(<span class="keyword">new</span> Path(<span class="string">&quot;/a2&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListFiles</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,IllegalArgumentException,IOException</span>&#123;</span><br><span class="line">		<span class="comment">//获取迭代器对象</span></span><br><span class="line">		RemoteIterator&lt;LocatedFileStatus&gt;listFiles = fs.listFiles(<span class="keyword">new</span> Path(<span class="string">&quot;/&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">while</span>(listFiles.hasNext()) &#123;</span><br><span class="line">			LocatedFileStatus fileStatus = listFiles.next();</span><br><span class="line">			<span class="comment">//打印当前文件名</span></span><br><span class="line">			System.out.println(fileStatus.getPath().getName());</span><br><span class="line">			<span class="comment">//打印当前文件块大小</span></span><br><span class="line">			System.out.println(fileStatus.getBlockSize());</span><br><span class="line">			<span class="comment">//打印当前文件权限</span></span><br><span class="line">			System.out.println(fileStatus.getPermission());</span><br><span class="line">			<span class="comment">//打印当前文件内容长度</span></span><br><span class="line">			System.out.println(fileStatus.getLen());</span><br><span class="line">			<span class="comment">//获取文件块信息</span></span><br><span class="line">			BlockLocation[] blockLocations = fileStatus.getBlockLocations();</span><br><span class="line">			<span class="keyword">for</span>(BlockLocation b1 : blockLocations) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;block-length:&quot;</span>+b1.getLength()+<span class="string">&quot;--&quot;</span>+<span class="string">&quot;block-offset:&quot;</span>+b1.getOffset());</span><br><span class="line">				String[] hosts = b1.getHosts();</span><br><span class="line">				<span class="keyword">for</span>(String host : hosts) &#123;</span><br><span class="line">					System.out.println(host);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;-------------分割线--------------------&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><em><strong>注意：</strong></em><br />
gaoyu:9000s是自己设置的在core-site.xml中，自行查看<br />
<img src="https://img-blog.csdnimg.cn/2020101109084582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
其中output在本地目录下不用创建，会自动生成，input目录需要自行创建在相应路劲下，我的是在D:\Dedup\input目录下，和代码中位置需要一直一致<img src="https://img-blog.csdnimg.cn/20201011091125870.png#pic_center" alt="在这里插入图片描述" /><img src="https://img-blog.csdnimg.cn/20201011090713887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<ul>
<li>创建cn.itcast.mr.dedup包，在该路径下编写自定义Mapper类DedupMapper，自定义Reducer类DedupReducer以及运行主类DedupDriver</li>
</ul>
<p>DedupMapper 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mr.dedup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DedupMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Text field = <span class="keyword">new</span> Text();</span><br><span class="line">	<span class="comment">// &lt;0,2018-3-3 c&gt;&lt;11,2018-3-4 d&gt;</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		field = value;</span><br><span class="line">		context.write(field, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// &lt;2018-3-3 c,null&gt; &lt;2018-3-4 d,null&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>DedupReducer类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mr.dedup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DedupReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">NullWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// &lt;2018-3-3 c,null&gt; &lt;2018-3-4 d,null&gt;&lt;2018-3-4 d,null&gt;</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;NullWritable&gt; values, Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		context.write(key, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>DedupRunner类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mr.dedup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DedupRunner</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">		job.setJarByClass(DedupRunner.class);</span><br><span class="line">		job.setMapperClass(DedupMapper.class);</span><br><span class="line">		job.setReducerClass(DedupReducer.class);</span><br><span class="line"></span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(NullWritable.class);</span><br><span class="line"></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(<span class="string">&quot;D:\\Dedup\\input&quot;</span>));</span><br><span class="line">		<span class="comment">// 指定处理完成之后的结果所保存的位置</span></span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">&quot;D:\\Dedup\\output&quot;</span>));</span><br><span class="line"></span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>代码编写完毕后，打开虚拟机开启所有服务进程<code>start-all.sh</code></li>
<li>然后运行主类DedupRunner，在output目录下查看结果<img src="https://img-blog.csdnimg.cn/20201011091709803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
查看文件part-r-00000发现已经成功<img src="https://img-blog.csdnimg.cn/20201011091828934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse&amp;IDEA中Maven和Git快速配置及使用</title>
    <url>/2020/10/03/Eclipse&amp;IDEA%E4%B8%ADMaven%E5%92%8CGit%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="eclipseidea中maven和git快速配置及使用"><a class="markdownIt-Anchor" href="#eclipseidea中maven和git快速配置及使用"></a> Eclipse&amp;IDEA中Maven和Git快速配置及使用</h4>
<a id="more"></a>
<p>见资料：<br />
链接：<a href="https://pan.baidu.com/s/1kzd4_sKwkq9sRTs45HE91Q">https://pan.baidu.com/s/1kzd4_sKwkq9sRTs45HE91Q</a><br />
提取码：1314</p>
<p>视频：<a href="https://www.bilibili.com/video/BV1Te411W7N6?p=1">https://www.bilibili.com/video/BV1Te411W7N6?p=1</a></p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>ECharts数据可视化项目</title>
    <url>/2020/09/26/echarts/</url>
    <content><![CDATA[<h4 id="学习视频httpswwwbilibilicomvideobv1v7411r7mpp1"><a class="markdownIt-Anchor" href="#学习视频httpswwwbilibilicomvideobv1v7411r7mpp1"></a> 学习视频：<a href="https://www.bilibili.com/video/BV1v7411R7mp?p=1">https://www.bilibili.com/video/BV1v7411R7mp?p=1</a></h4>
<p>个人博客：<a href="https://highfish920.github.io/">https://highfish920.github.io/</a><br />
代码地址：<a href="https://github.com/highfish920/ECharts-">https://github.com/highfish920/ECharts-</a></p>
<a id="more"></a>
<p>项目展示<img src="https://img-blog.csdnimg.cn/20200926220304486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>ECharts</category>
      </categories>
      <tags>
        <tag>ECharts</tag>
      </tags>
  </entry>
  <entry>
    <title>linux--基于linux搭建hadoop开发环境</title>
    <url>/2020/09/25/linux7/</url>
    <content><![CDATA[<h4 id=""><a class="markdownIt-Anchor" href="#"></a> </h4>
<a id="more"></a>
<p>下载对应jar包，地址http://mirrors.neusoft.edu.cn/eclipse/technology/epp/downloads/release/2018-09/R/<br />
网盘：链接：<a href="https://pan.baidu.com/s/1aGlgu5tWf0XIO9H0hxqB0A">https://pan.baidu.com/s/1aGlgu5tWf0XIO9H0hxqB0A</a><br />
提取码：1314</p>
<ol>
<li>将下载的jar包上传至虚拟机，解压eclipse<br />
<img src="https://img-blog.csdnimg.cn/20200925195621994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925195643797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925195706597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
查看<img src="https://img-blog.csdnimg.cn/20200925195759298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>将eclipse执行文件连接到用户目录<br />
<img src="https://img-blog.csdnimg.cn/20200925202814127.png#pic_center" alt="在这里插入图片描述" /></li>
</ol>
<p>创建一个启动项，添加代码<br />
<img src="https://img-blog.csdnimg.cn/20200925200251247.png#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925200903935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
安装图形化界面<br />
安装桌面组件</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">yum groupinstall -<span class="symbol">y</span>   <span class="string">&quot;Desktop&quot;</span>   <span class="string">&quot;Desktop Platform&quot;</span>   <span class="string">&quot;Desktop Platform Development&quot;</span> <span class="string">&quot;Fonts&quot;</span> <span class="string">&quot;General Purpose Desktop&quot;</span> <span class="string">&quot;Graphical Administration Tools&quot;</span> <span class="string">&quot;Graphics Creation Tools&quot;</span> <span class="string">&quot;Input Methods&quot;</span> <span class="string">&quot;X Window System&quot;</span> <span class="string">&quot;Chinese Support [zh]&quot;</span> <span class="string">&quot;Internet Browser&quot;</span></span><br></pre></td></tr></table></figure>
<p>编辑/etc/inittab文件，修改启级别为5，</p>
<p>将    id:3:initdefault:    改为     id:5:initdefault:<br />
重启 reboot<br />
su root 切换到root下 cd退回 init 3到终端  init 5到图形化界面</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux--基于windows开发hadoop应用程序</title>
    <url>/2020/09/25/linux6/</url>
    <content><![CDATA[<h4 id="所需jar包-链接httpspanbaiducoms1dv0coclamzlm5nc89zjemq"><a class="markdownIt-Anchor" href="#所需jar包-链接httpspanbaiducoms1dv0coclamzlm5nc89zjemq"></a> 所需jar包 链接：<a href="https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ">https://pan.baidu.com/s/1dV0cocLamZlm5NC89ZjEmQ</a></h4>
<p>提取码：dasa</p>
<a id="more"></a>
<h2 id="基于windows开发hadoop应用程序"><a class="markdownIt-Anchor" href="#基于windows开发hadoop应用程序"></a> 基于windows开发hadoop应用程序</h2>
<h3 id="1-搭建hdfs环境"><a class="markdownIt-Anchor" href="#1-搭建hdfs环境"></a> 1. 搭建hdfs环境</h3>
<p>1.1 解压hadoop.tar.gz到一个目录下<br />
<img src="https://img-blog.csdnimg.cn/20200925145031660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925150058725.png#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925150216104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>1.2 配置环境变量<br />
<img src="https://img-blog.csdnimg.cn/20200925145243614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/2020092514532527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
1.3 path里面<br />
<img src="https://img-blog.csdnimg.cn/20200925145424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
1.4 打开eclipse的plugins目录<br />
<img src="https://img-blog.csdnimg.cn/20200925150940174.png#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925151007157.png#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925153239948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>1.5 导入后重新启动eclipse</p>
<p>按下图操作<br />
<img src="https://img-blog.csdnimg.cn/20200925153522594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
切换到map/reduce，点击小象</p>
<p><img src="https://img-blog.csdnimg.cn/20200925161248798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<code>vi mapred-site.xml</code><br />
<img src="https://img-blog.csdnimg.cn/20200925161334337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<code>vi core-site.xml</code><br />
<img src="https://img-blog.csdnimg.cn/20200925161500860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
配置完如果还报错不用管，忽略即可<br />
类似于这样的错误<br />
<img src="https://img-blog.csdnimg.cn/20200925163409183.png#pic_center" alt="在这里插入图片描述" /></p>
<p>1.6 输入网址（<a href="http://192.168.50.146:50070/explorer.html#/%EF%BC%89%E6%9F%A5%E7%9C%8B%E5%B7%B2%E7%BB%8F%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6">http://192.168.50.146:50070/explorer.html#/）查看已经显示文件</a><br />
<img src="https://img-blog.csdnimg.cn/20200925154405737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
配置完成查看eclipse里面的树已经显示(第一次不显示，需要新建项目后显示，所以不显示也不要着急)<br />
这是显示的树<br />
<img src="https://img-blog.csdnimg.cn/20200925163537583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<h2 id="2基于windows开发hadoop应用程序"><a class="markdownIt-Anchor" href="#2基于windows开发hadoop应用程序"></a> 2.基于windows开发hadoop应用程序</h2>
<p><img src="https://img-blog.csdnimg.cn/20200925163720993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925163741142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
2.1 添加外部扩展jar包，在自己的linux下（这3个jar包）<br />
<img src="https://img-blog.csdnimg.cn/20200925163945279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
可以先复制到自己的机器上在添加<br />
<img src="https://img-blog.csdnimg.cn/20200925164336508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
同理添加以下jar包<br />
<img src="https://img-blog.csdnimg.cn/20200925165034182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925165216497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925165427140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925165619666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
导入成功<br />
<img src="https://img-blog.csdnimg.cn/20200925165645162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
2.2 右键项目新建class<br />
<img src="https://img-blog.csdnimg.cn/20200925165812811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
类里面的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span> </span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                    )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line">      <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">        word.set(itr.nextToken());</span><br><span class="line">        context.write(word, one);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span> </span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, </span></span></span><br><span class="line"><span class="function"><span class="params">                       Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                       )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">        sum += val.get();</span><br><span class="line">      &#125;</span><br><span class="line">      result.set(sum);</span><br><span class="line">      context.write(key, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class="line">    <span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">      System.exit(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Job job = Job.getInstance(conf, <span class="string">&quot;word count&quot;</span>);</span><br><span class="line">    job.setJarByClass(MyWordCount.class);</span><br><span class="line">    job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">    job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">    job.setReducerClass(IntSumReducer.class);</span><br><span class="line">    job.setOutputKeyClass(Text.class);</span><br><span class="line">    job.setOutputValueClass(IntWritable.class);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    FileOutputFormat.setOutputPath(job,</span><br><span class="line">      <span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200925170402278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925170413332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925170425100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>将导出的jar包放到hadoop目录用户下<br />
（在/home/gaoyu（建立的什么就是什么，可能是hadoop）下新建wordcount文件夹，然后将jar包放进去）<br />
<img src="https://img-blog.csdnimg.cn/20200925171356575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
拖进去<br />
<img src="https://img-blog.csdnimg.cn/20200925171517586.png#pic_center" alt="在这里插入图片描述" /><br />
登录hadoop集群的主机，进入刚才的gaoyu目录下，创建两个txt文件，创建txt文件的时候一定要先回车，在按ctrl+c才能保存</p>
<p><img src="https://img-blog.csdnimg.cn/20200925172520635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200925172537186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
将这两个文件移动到wordcount目录下<br />
<img src="https://img-blog.csdnimg.cn/20200925172751123.png#pic_center" alt="在这里插入图片描述" /><br />
并且修改所有属主和属组为gaoyu（有的是hadoop）<br />
<img src="https://img-blog.csdnimg.cn/20200925173743975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>切换回gaoyu（hadoop）目录，创建input目录，如果存在则不用创建<br />
<img src="https://img-blog.csdnimg.cn/20200925173927981.png#pic_center" alt="在这里插入图片描述" /><br />
切回root <code>su root</code></p>
<p>上传新建的两个文件swpt1和2到input文件下，并查看<br />
<img src="https://img-blog.csdnimg.cn/20200925174233254.png#pic_center" alt="在这里插入图片描述" /><br />
删除output目录，以及input目录下其他文件<br />
<code>hdfs dfs -rmr /output</code><br />
<img src="https://img-blog.csdnimg.cn/20200925174441451.png#pic_center" alt="在这里插入图片描述" /><br />
<code>hdfs dfs -rm /input/LICENSE.txt</code><br />
<img src="https://img-blog.csdnimg.cn/20200925174530281.png#pic_center" alt="在这里插入图片描述" /><br />
删除成功</p>
<h2 id="3运行mywordcount"><a class="markdownIt-Anchor" href="#3运行mywordcount"></a> 3.运行MyWordCount</h2>
<p><img src="https://img-blog.csdnimg.cn/20200925185532528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
查看网页结果<br />
<img src="https://img-blog.csdnimg.cn/20200925185638896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在编写css文件的时候，less插件保存成wxss或者css方法</title>
    <url>/2020/09/23/css1/</url>
    <content><![CDATA[<h4 id="1-先安装easy-less-插件"><a class="markdownIt-Anchor" href="#1-先安装easy-less-插件"></a> 1. 先安装easy less 插件</h4>
<a id="more"></a>
<ol start="2">
<li>打开设置》扩展设置》settings.json<br />
<img src="https://img-blog.csdnimg.cn/20200923100300104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="3." /><br />
这个地方，如果想要自动保存less后保存为wxss或者css文件就可以在这里修改</li>
</ol>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle11g数据库卸载</title>
    <url>/2020/09/21/oracle%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="oracle11g数据库卸载"><a class="markdownIt-Anchor" href="#oracle11g数据库卸载"></a> Oracle11g数据库卸载</h4>
<a id="more"></a>
<ol>
<li>找到安装目录，找到卸载程序<br />
<img src="https://img-blog.csdnimg.cn/20200921211522448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200921211538989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>点击卸载产品，选择数据库，点击删除<br />
如果点击删除出现警告<br />
以cmd管理员运行 把提示的代码粘贴进去回车（最后一个输入y，其他不修改）</li>
<li>查看服务是否存在，应该是没有了</li>
<li>进入注册表 <code>regedit</code> 删除注册表 带有oracle的都删了</li>
<li>删除目录 C盘和安装盘<br />
<img src="https://img-blog.csdnimg.cn/20200921212123555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200921212150219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
最后一步重启即可<br />
实在不行就重装系统吧</li>
</ol>
<p>安装oracle 11g网址：<a href="https://editor.csdn.net/md/?articleId=108717666">https://editor.csdn.net/md/?articleId=108717666</a></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle11g数据库安装</title>
    <url>/2020/09/21/oracle%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="oracle11g数据库安装"><a class="markdownIt-Anchor" href="#oracle11g数据库安装"></a> Oracle11g数据库安装</h4>
<a id="more"></a>
<hr />
<p>title: Oracle11g数据库安装<br />
tag: Oracle<br />
categories:</p>
<ul>
<li>Oracle</li>
</ul>
<hr />
<h4 id="oracle11g数据库安装-2"><a class="markdownIt-Anchor" href="#oracle11g数据库安装-2"></a> Oracle11g数据库安装</h4>
<!-- more -->
<p>软件下载地址：链接：<a href="https://pan.baidu.com/s/1NTbQ_mY7SoIhhEbpBr5Nnw">https://pan.baidu.com/s/1NTbQ_mY7SoIhhEbpBr5Nnw</a><br />
提取码：dasa<br />
oracle11g安装包，以及配套plsql（在资料里面），以及安装说明书<br />
链接：<a href="https://pan.baidu.com/s/16CoguszWLh6qBJDsXGckgg">https://pan.baidu.com/s/16CoguszWLh6qBJDsXGckgg</a><br />
提取码：1314</p>
<p>下载完成并且解压是两个文件夹，复制其中一个文件夹的database文件夹粘贴到另一个文件夹下合并文件夹</p>
<p>安装前准备</p>
<ul>
<li>关闭本机防火墙和电脑管家，360等软件</li>
<li>断开网络</li>
</ul>
<p>开始安装：</p>
<ol>
<li>双击setup.exe<br />
<img src="https://img-blog.csdnimg.cn/20200921195809960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>取消勾选，下一步<br />
<img src="https://img-blog.csdnimg.cn/20200921200709204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>选是<br />
<img src="https://img-blog.csdnimg.cn/20200921200821793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>选择安装并配置数据库<br />
<img src="https://img-blog.csdnimg.cn/20200921200937658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>选择服务器类型，下一步<br />
<img src="https://img-blog.csdnimg.cn/20200921201032529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>选择第一个<br />
<img src="https://img-blog.csdnimg.cn/20200921201132859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>选择高级安装<br />
<img src="https://img-blog.csdnimg.cn/20200921201159468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>选择语言<br />
<img src="https://img-blog.csdnimg.cn/20200921201243582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>安企业版本<br />
<img src="https://img-blog.csdnimg.cn/20200921201324795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>安装目录<br />
<img src="https://img-blog.csdnimg.cn/2020092120162461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>默认一般仓库<br />
<img src="https://img-blog.csdnimg.cn/20200921201706973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>指定数据库名<br />
<img src="https://img-blog.csdnimg.cn/20200921202307740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>选择字符集，样本数据（千万别着急下一步）<br />
<img src="https://img-blog.csdnimg.cn/20200921202439404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200921202555341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="13." /></li>
<li>下一步<br />
<img src="https://img-blog.csdnimg.cn/20200921202651563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
下一步<br />
<img src="https://img-blog.csdnimg.cn/20200921202717600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
下一步<br />
<img src="https://img-blog.csdnimg.cn/20200921202733865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>输入相同口令：oracleadmin<br />
<img src="https://img-blog.csdnimg.cn/20200921203322537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200921203335377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>完成<br />
<img src="https://img-blog.csdnimg.cn/20200921203436169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>检查中，如果出现错误提示，忽略即可<br />
下载安装<br />
<img src="https://img-blog.csdnimg.cn/20200921204406732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
等待<img src="https://img-blog.csdnimg.cn/20200921204425913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
</ol>
<p>会出现一个页面点击确定<br />
然后又出现一个页面，选择口令管理<br />
<img src="https://img-blog.csdnimg.cn/20200921204623192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
口令包括：</p>
<ul>
<li>超级管理员 sys / change_on_install</li>
<li>普通管理员 system / manager</li>
<li>普通用户 scott / tiger 需要解锁</li>
<li>大数据用户（样本数据库才有） sh / sh 需要解锁</li>
<li>如果没有解锁密码就是上面配置的oracleadmin</li>
</ul>
<p>下面对应（口令和确认口令是一样的）<br />
sys / change_on_install<br />
system / manager<br />
<img src="https://img-blog.csdnimg.cn/20200921205251976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
找到scott取消对勾，输入密码tiger<br />
<img src="https://img-blog.csdnimg.cn/202009212055417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
找到SH取消对勾输入密码sh<br />
<img src="https://img-blog.csdnimg.cn/20200921205636202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
点击确定》是》确定<br />
此时oracle软件和数据库安装完成<br />
点击关闭<br />
<img src="https://img-blog.csdnimg.cn/20200921205834956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<ol start="17">
<li>打开服务（确保开机速度）<br />
查看<br />
<img src="https://img-blog.csdnimg.cn/20200921210227554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
把所有的自动改为手动<br />
<img src="https://img-blog.csdnimg.cn/20200921210431873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
但是每次开启的时候只需要开启两个服务即可<br />
OracleOraDb11g_home1TNSListener   监听服务<br />
OracleServiceORCL     数据库实例服务</li>
</ol>
<p>windows+R 输入 sqlplus 即可启动 输入<br />
超级管理员 sys / change_on_install<br />
普通管理员 system / manager<br />
普通用户 scott / tiger<br />
大数据用户（样本数据库才有） sh / sh<br />
任何一个即可</p>
<p>卸载地址： <a href="https://blog.csdn.net/weixin_42693712/article/details/108719409">https://blog.csdn.net/weixin_42693712/article/details/108719409</a></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-安装hadoop集群（伪分布）</title>
    <url>/2020/09/19/linux5/</url>
    <content><![CDATA[<h4 id="1-安装hadoop"><a class="markdownIt-Anchor" href="#1-安装hadoop"></a> 1. 安装hadoop</h4>
<a id="more"></a>
<h3 id="安装hadoop集群"><a class="markdownIt-Anchor" href="#安装hadoop集群"></a> 安装hadoop集群</h3>
<h4 id="1-安装hadoop-2"><a class="markdownIt-Anchor" href="#1-安装hadoop-2"></a> 1. 安装hadoop</h4>
<p>将压缩包复制到/usr目录下<br />
<img src="https://img-blog.csdnimg.cn/20200916181653488.png#pic_center" alt="在这里插入图片描述" /><br />
解压 <code>tar -zxvf 压缩包名字 -C /usr</code></p>
<h4 id="2修改配置文件"><a class="markdownIt-Anchor" href="#2修改配置文件"></a> 2.修改配置文件</h4>
<p>2.1 查看所有文件<br><br />
<img src="https://img-blog.csdnimg.cn/20200916182622807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
2.2 修改<code>hadoop.env.sh</code><br />
进入<code>/usr/hadoop/etc/hadoop</code>目录下<br />
<img src="https://img-blog.csdnimg.cn/20200916191519637.png#pic_center" alt="在这里插入图片描述" /></p>
<p>配置<br />
<img src="https://img-blog.csdnimg.cn/20200916202052584.png#pic_center" alt="在这里插入图片描述" /></p>
<p>2.3 配置<code>core-site</code><br />
进入<code>/usr/hadoop/etc/hadoop</code>目录下<br />
<code>vi core-site.xml</code><br />
<img src="https://img-blog.csdnimg.cn/20200916201335778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/hadoop/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs:<span class="comment">//gaoyu:9000&lt;/value&gt;</span></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>2.4<br />
配置hdfs.site<br />
进入<code>/usr/hadoop/etc/hadoop</code>目录下<br />
<code>vi hdfs-site.xml</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;gaoyu:50070&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;gaoyu2:50090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/hadoop/name&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.data.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/hadoop/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>2.5  配置mapred-site.xml<br />
复制模板<br />
进入<code>/usr/hadoop/etc/hadoop</code>目录下<br />
<code>mv mapred-site.xml.template mapred-site.xml</code><br />
修改配置<br />
<code>vi mapred-site.xml</code><br />
<img src="https://img-blog.csdnimg.cn/20200919152452915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
2.6 <a href="http://xn--yarn-env-vz2ve12k.sh">配置yarn-env.sh</a><br />
进入<code>/usr/hadoop/etc/hadoop</code>目录下<br />
<code>vi yarn-env.sh</code><br />
<img src="https://img-blog.csdnimg.cn/20200919152749131.png#pic_center" alt="在这里插入图片描述" /><br />
2.7 配置yarn-site.xml<br />
进入<code>/usr/hadoop/etc/hadoop</code>目录下<br />
<code>vi yarn-site.xml</code><br />
<img src="https://img-blog.csdnimg.cn/20200919152957416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>2.5 配置slaves<br />
<code>vi slaves</code><br />
<br><br />
<img src="https://img-blog.csdnimg.cn/20200916202751615.png#pic_center" alt="在这里插入图片描述" /><br />
2.6 配置hadoop环境变量<br />
进入<code>/usr/hadoop/etc/hadoop</code>目录下<br />
<code>vi /etc/profile</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#hadoop environment</span><br><span class="line">export HADOOP_HOME=/usr/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">export HADOOP CONF DIR=/usr/hadoop/etc/hadoop/</span><br></pre></td></tr></table></figure>
<p>刷新：<code>source /etc/profile</code><br />
3. 复制文件到其他机器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /usr/hadoop gaoyu1:/usr/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /usr/hadoop gaoyu2:/usr/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile gaoyu1:/etc</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile gaoyu2:/etc</span><br></pre></td></tr></table></figure>
<p>在三台机器上分别操作（root下）<br />
<img src="https://img-blog.csdnimg.cn/20200922102536516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p><code>useradd hadoop</code><br />
<code>groupadd hadoop</code><br />
<code>gpasswd -a hadoop hadoop</code><br />
<code>chown -R hadoop:hadoop /use/hadoop</code><br />
<code>ll /usr</code><br />
其他两台照做一遍</p>
<p>4.格式化hdfs<img src="https://img-blog.csdnimg.cn/20200916214504660.png#pic_center" alt="在这里插入图片描述" /><br />
5.启动hdfs<br />
<code>start-all.sh</code><br />
<img src="https://img-blog.csdnimg.cn/20200916222525347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
关闭：<code>stop-all.sh</code><br />
查看：<img src="https://img-blog.csdnimg.cn/20200916222856304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200919150346397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux克隆虚拟机以及配置各台虚拟机，包括修改id，ssh免密登录，使用别名登录等</title>
    <url>/2020/09/16/linux4/</url>
    <content><![CDATA[<h5 id="本文配置为hadoop搭建集群做准备接上篇-linux配置java环境变量httpshighfish920githubio20200916linux3"><a class="markdownIt-Anchor" href="#本文配置为hadoop搭建集群做准备接上篇-linux配置java环境变量httpshighfish920githubio20200916linux3"></a> 本文配置为hadoop搭建集群做准备，接上篇 linux配置java环境变量https://highfish920.github.io/2020/09/16/linux3/</h5>
<a id="more"></a>
<h3 id="1克隆虚拟机"><a class="markdownIt-Anchor" href="#1克隆虚拟机"></a> 1.克隆虚拟机</h3>
<h4 id="11-选住要克隆的虚拟机-右键管理克隆br在这里插入图片描述"><a class="markdownIt-Anchor" href="#11-选住要克隆的虚拟机-右键管理克隆br在这里插入图片描述"></a> 1.1 选住要克隆的虚拟机  右键》管理》克隆<br><img src="https://img-blog.csdnimg.cn/20200916160911927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></h4>
<p>因为虚拟机是开着的所以无法克隆，所以先关闭虚拟机</p>
<h4 id="12关闭后再次选择克隆即可br在这里插入图片描述"><a class="markdownIt-Anchor" href="#12关闭后再次选择克隆即可br在这里插入图片描述"></a> 1.2关闭后再次选择克隆即可<br><img src="https://img-blog.csdnimg.cn/20200916161035587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></h4>
<p><img src="https://img-blog.csdnimg.cn/20200916161209120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
选择完整克隆<br><img src="https://img-blog.csdnimg.cn/20200916161313436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
设置名字和路劲<br><img src="https://img-blog.csdnimg.cn/20200916161410439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
点击完成<br><br />
<img src="https://img-blog.csdnimg.cn/20200916161533695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
在克隆一台<br><br />
<img src="https://img-blog.csdnimg.cn/20200916161803308.png#pic_center" alt="在这里插入图片描述" /><br />
接下来启动三台虚拟机</p>
<h3 id="2配置克隆的虚拟机"><a class="markdownIt-Anchor" href="#2配置克隆的虚拟机"></a> 2.配置克隆的虚拟机</h3>
<p>2.1 开启hadoop2<br><br />
<img src="https://img-blog.csdnimg.cn/2020091616235625.png#pic_center" alt="在这里插入图片描述" /><br />
2.2 输入 <code>vi /etc/udev/rules.d/70-persistent-net.rules</code><br><br />
<img src="https://img-blog.csdnimg.cn/20200916163200349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
修改：删除第一个，第二个把eth1改为eth0<br />
<img src="https://img-blog.csdnimg.cn/20200916163127599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
2.3 修改ip地址<br />
输入<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code><br />
<br><br />
<img src="https://img-blog.csdnimg.cn/20200916163720605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
删除HWADDR，修改ip<br><br />
<img src="https://img-blog.csdnimg.cn/2020091616382131.png#pic_center" alt="在这里插入图片描述" /><br />
2.4 同理将hadoop3修改，这里修改的ip为192.168.50.148<br />
<img src="https://img-blog.csdnimg.cn/20200916165218690.png#pic_center" alt="在这里插入图片描述" /><br />
修改完输入 <code>reboot</code> 重启生效</p>
<p>测试ping百度也都成功<img src="https://img-blog.csdnimg.cn/20200916170304980.png#pic_center" alt="在这里插入图片描述" /></p>
<h3 id="3关闭防火墙"><a class="markdownIt-Anchor" href="#3关闭防火墙"></a> 3.关闭防火墙</h3>
<p>3.1 使用MobaXterm 登录三台虚拟机<br />
<img src="https://img-blog.csdnimg.cn/20200916170759199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
点击这个可以同时操作<br />
<img src="https://img-blog.csdnimg.cn/20200916171015979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>3.2 	查看状态 <code>service iptables status</code><br />
<img src="https://img-blog.csdnimg.cn/20200916171352391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>3.3 关闭防火墙<code>service iptables stop</code><br />
<img src="https://img-blog.csdnimg.cn/20200916171323630.png#pic_center" alt="在这里插入图片描述" /><br />
命令：<br />
<img src="https://img-blog.csdnimg.cn/20200916171407423.png#pic_center" alt="在这里插入图片描述" /><br />
3.4 彻底关闭防火墙以及查看<br />
<code>chkconfig iptables off</code><br />
<code>chkconfig --list iptables</code><br />
<img src="https://img-blog.csdnimg.cn/20200916171554193.png#pic_center" alt="在这里插入图片描述" /></p>
<h4 id="4关闭selinux同样是三台一起操作"><a class="markdownIt-Anchor" href="#4关闭selinux同样是三台一起操作"></a> 4.关闭selinux(同样是三台一起操作)</h4>
<p><code>vi /etc/selinux/config</code><br />
<img src="https://img-blog.csdnimg.cn/20200916171924852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
重启三台机器 <code>reboot</code></p>
<h3 id="5修改主机名"><a class="markdownIt-Anchor" href="#5修改主机名"></a> 5.修改主机名</h3>
<p>输入 <code>vi /etc/sysconfig/network</code>将名字改为gaoyu1<br />
<img src="https://img-blog.csdnimg.cn/20200916172602350.png#pic_center" alt="在这里插入图片描述" /><br />
同理将hadoop机器改为gaoyu2<br />
重启生效</p>
<h3 id="6配置别名用别名访问"><a class="markdownIt-Anchor" href="#6配置别名用别名访问"></a> 6.配置别名，用别名访问</h3>
<p>输入<code>vi /etc/hosts</code>配置别名<br />
<img src="https://img-blog.csdnimg.cn/20200916173339979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
测试通过可以通过名字ping通<br />
<img src="https://img-blog.csdnimg.cn/20200916173914608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<h3 id="7使用ssh免密登录"><a class="markdownIt-Anchor" href="#7使用ssh免密登录"></a> 7.使用ssh免密登录</h3>
<p>三台同时操作生成公钥和私钥<br />
<code>ssh-keygen -t rsa</code><br />
按三次回车即可<br />
<img src="https://img-blog.csdnimg.cn/20200916174455288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
接下来将第一台机器的秘钥拷贝到这三台机器，下面对第一台机器操作<br />
输入<code>ssh-copy-id gaoyu</code>将秘钥拷贝到第一台机器上<br />
<img src="https://img-blog.csdnimg.cn/20200916174838286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
接下来将其拷贝到其他两台机器<br />
<img src="https://img-blog.csdnimg.cn/20200916175020562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>测试：<img src="https://img-blog.csdnimg.cn/20200916175423760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
其他两台机器同理</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 配置java环境变量</title>
    <url>/2020/09/16/linux3/</url>
    <content><![CDATA[<h5 id="linux配置java环境变量"><a class="markdownIt-Anchor" href="#linux配置java环境变量"></a> linux配置java环境变量</h5>
<a id="more"></a>
<p>jdk对应版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1--hWO9IORgtywZ0UBquELQ </span><br><span class="line">提取码：vm7w</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>先查看本身是否安装有jdk，如有则卸载<br />
查看： <code>rpm -qa | grep java</code><br />
没有下一步 有卸载<br />
如：<img src="https://img-blog.csdnimg.cn/20200916124734230.png#pic_center" alt="在这里插入图片描述" /><br />
使用 <code>rpm -e --nodeps</code> 名称 卸载</p>
</li>
<li>
<p>新建目录 <code>/usr/java</code><br />
命令： <code>mkdir /usr/java</code><br />
查看是否创建成功 <code>ll /usr</code><br />
<img src="https://img-blog.csdnimg.cn/20200916125000350.png#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li></li>
</ol>
<ul>
<li>利用MobaXterm_CHS工具将jdk复制到此目录下即可</li>
<li>或者通过命令：先到创建的目录下 <code>cd /usr/java</code><br />
<code>pwd</code> 查看是否在当前目录下<br />
再利用MobaXterm_CHS工具将jdk复制到此目录下</li>
<li><code>ll</code> 查看是否上传成功</li>
</ul>
<ol start="3">
<li>解压 <code>tar -zxvf jdk名字 -C /usr/java</code><img src="https://img-blog.csdnimg.cn/20200916125557405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>配置环境变量<br />
打开<code>/etc/profile</code>文件   <code>vi /etc/profile</code>到最底部添加配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#new java environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_161</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200916130107713.png#pic_center" alt="在这里插入图片描述" /><br />
刷新配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200916130153791.png#pic_center" alt="在这里插入图片描述" /><br />
测试：<br />
输入 <code>java -version</code> 显示版本为成功<br />
<img src="https://img-blog.csdnimg.cn/2020091613025025.png#pic_center" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos6.5安装步骤</title>
    <url>/2020/09/09/linux2/</url>
    <content><![CDATA[<h5 id="centos65安装步骤"><a class="markdownIt-Anchor" href="#centos65安装步骤"></a> centos6.5安装步骤</h5>
<a id="more"></a>
<ol>
<li>
<p>下载centos6.5 网址：<a href="https://blog.csdn.net/huchunlinnk/article/details/45038025">https://blog.csdn.net/huchunlinnk/article/details/45038025</a><hr></p>
</li>
<li>
<p>安装vmware 网址： <a href="https://my.vmware.com/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_fusion/10_0">https://my.vmware.com/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_fusion/10_0</a><hr></p>
</li>
<li>
<p>打开vmware 新建虚拟机，选择典型<br><hr><img src="https://img-blog.csdnimg.cn/20200909170531877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>选择稍后安装<br><hr><img src="https://img-blog.csdnimg.cn/20200909170709460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>选择操作系统<br><hr><img src="https://img-blog.csdnimg.cn/20200909170822618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>命名虚拟机以及安装位置<br><hr><img src="https://img-blog.csdnimg.cn/20200909171029368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>默认，下一步<br><hr><img src="https://img-blog.csdnimg.cn/20200909171145383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>完成<br><hr><img src="https://img-blog.csdnimg.cn/20200909171216860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<br><hr><img src="https://img-blog.csdnimg.cn/20200909171257548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>选住虚拟机右键，设置，可配置内存<br><hr><img src="https://img-blog.csdnimg.cn/20200909171356567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>配置CD/DVD  选择自己的镜像位置<br><hr><img src="https://img-blog.csdnimg.cn/20200909171629665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
网络适配器选择NAT<br><hr><img src="https://img-blog.csdnimg.cn/20200909171935596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>选择住自己的虚拟机，点击开启<br><hr><img src="https://img-blog.csdnimg.cn/20200909172035123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<strong>开始安装</strong></p>
</li>
<li>
<p>回车<br><hr><img src="https://img-blog.csdnimg.cn/2020090917223080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
</li>
</ol>
<p>选择skip<br><hr><img src="https://img-blog.csdnimg.cn/20200909172309792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
next<br><hr><img src="https://img-blog.csdnimg.cn/20200909172941638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
选择中文简体<br><hr><img src="https://img-blog.csdnimg.cn/20200909173044451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
键盘选择美国英语式<br><hr><img src="https://img-blog.csdnimg.cn/20200909173131335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>下一步<br><hr><img src="https://img-blog.csdnimg.cn/2020090917321351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
是，忽略<br><hr><img src="https://img-blog.csdnimg.cn/20200909173239730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
设置主机名<br><hr><img src="https://img-blog.csdnimg.cn/202009091733297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
时区选择上海<br><hr><img src="https://img-blog.csdnimg.cn/20200909173408680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
设置密码123456<br><hr><img src="https://img-blog.csdnimg.cn/20200909173503696.png#pic_center" alt="在这里插入图片描述" /><br />
无论如何都用<br><hr><img src="https://img-blog.csdnimg.cn/20200909173532309.png#pic_center" alt="在这里插入图片描述" /><br><hr><br />
自定义分区<br><hr><img src="https://img-blog.csdnimg.cn/20200909173613693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
<img src="https://img-blog.csdnimg.cn/20200909173821652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
创建<br><hr><img src="https://img-blog.csdnimg.cn/20200909173841985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
<img src="https://img-blog.csdnimg.cn/20200909173943443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
<img src="https://img-blog.csdnimg.cn/20200909174016982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
<img src="https://img-blog.csdnimg.cn/20200909174329381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
<img src="https://img-blog.csdnimg.cn/2020090917442620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
<img src="https://img-blog.csdnimg.cn/20200909174502472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
格式化<br><hr><img src="https://img-blog.csdnimg.cn/20200909174521853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
选择将修改写入磁盘<br><hr><img src="https://img-blog.csdnimg.cn/20200909174543931.png#pic_center" alt="在这里插入图片描述" /><br><hr><br />
分区完成，下一步<br><hr><img src="https://img-blog.csdnimg.cn/20200909174618241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
重新引导<br><hr><img src="https://img-blog.csdnimg.cn/20200909174954472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
参考：<a href="https://blog.csdn.net/z1941563559/article/details/80615691">https://blog.csdn.net/z1941563559/article/details/80615691</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-Centos6.5 配置地址</title>
    <url>/2020/09/09/linux1/</url>
    <content><![CDATA[<h5 id="centos-65网络配置静态ip地址"><a class="markdownIt-Anchor" href="#centos-65网络配置静态ip地址"></a> CentOS 6.5网络配置静态IP地址</h5>
<a id="more"></a>
<p>CentOS 6.5网络配置静态IP地址<br />
打开VMvare，并进入虚拟机</p>
<p>CentOS6.5网络配置<br />
2<br />
输入用户名，按回车键，再输入密码，登录系统</p>
<p>CentOS6.5网络配置<br />
3<br />
进行网络配置前，需要确认几个事情：</p>
<ol>
<li>网络适配器模式是否为NAT模式</li>
</ol>
<p>右键虚拟机，或者点击VMvare菜单栏中的虚拟机（按ctrl+alt键可切出虚拟机返回到windows，点击虚拟机窗口，可进入虚拟机操作）</p>
<p>点击“设置”<br />
<img src="https://img-blog.csdnimg.cn/20200909201251787.png#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<p>CentOS6.5网络配置<br />
4<br />
确认网络适配器是否处于NAT模式<br />
<img src="https://img-blog.csdnimg.cn/20200909201308914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<p>CentOS6.5网络配置<br />
5<br />
2. 确认网关、网段</p>
<p>点击VMvare虚拟机“编辑”菜单中的“虚拟网络编辑器”<br />
<img src="https://img-blog.csdnimg.cn/20200909201524495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<p>CentOS6.5网络配置<br />
6<br />
在弹出页面上方列表中选择VMnet8，并点击页面中部的“NAT设置”按钮</p>
<p>CentOS6.5网络配置<br />
7<br />
在该页面中，可以查看到网关IP为“192.168.50.2”（各机器有所不同）<br />
<img src="https://img-blog.csdnimg.cn/2020090920154051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
CentOS6.5网络配置<br />
8<br />
关闭网关查看页面，点击页面下方的“DHCP设置”按钮<br />
<img src="https://img-blog.csdnimg.cn/20200909201607165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr><br />
可查看到网络信息</p>
<p>CentOS6.5网络配置<br />
9<br />
3. 确认Windows服务启动项中，“VMware DHCP Service”、“VMware NAT Service”，两项服务是否启动</p>
<p>CentOS6.5网络配置<br />
10<br />
4. 查看网络和共享中心中的“VMware Network Adapter VMnet8”的状态<br />
<img src="https://img-blog.csdnimg.cn/20200909201746562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<p>CentOS6.5网络配置<br />
11<br />
其中：</p>
<p>192.168.50.2 是虚拟路由器的网关地址</p>
<p>192.168.50.1 是虚拟路由器为Windows分配的地址</p>
<p>CentOS6.5网络配置<br />
12<br />
确认完成后，进入CentOS6.5系统中，输入命令“ifconfig”，查看网络信息。</p>
<p>可以查看到只有一条“lo”，且地址为“127.0.0.1”</p>
<p>CentOS6.5网络配置<br />
配置网络，输入命令“vi  /etc/sysconfig/network-scripts/ifcfg-eth0”</p>
<p>CentOS6.5网络配置<br />
进入文本编辑模式后，可查看到原信息<br />
<img src="https://img-blog.csdnimg.cn/20200909201859460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<p>CentOS6.5网络配置<br />
修改信息：</p>
<p>ONBOOT=yes</p>
<p>BOOTPROTO=static</p>
<p>添加信息：</p>
<p>IPADDR=192.168.50.146（根据网关自行调整）</p>
<p>NETMASK=255.255.255.0</p>
<p>GATEWAY=192.168.50.2</p>
<p>（按“i”键进入编辑模式，按“Esc”键退出编辑模式，在退出编辑模式时，按“zz”保存退出）<br />
<img src="https://img-blog.csdnimg.cn/20200916111558524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:0C:29:3A:AC:12</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=22c2bab6-e7b6-4bde-a2e3-151dd8394d44</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=ststic</span><br><span class="line">IPADDR=192.168.50.146</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.50.2</span><br></pre></td></tr></table></figure>
<p>CentOS6.5网络配置<br />
编辑完成后，输入命令“service network restart”</p>
<p>CentOS6.5网络配置<br />
再次输入“ifconfig”命令，查看网络信息。</p>
<p>可以看到多了一个“eth0”，并且地址为“192.168.50.146”<br />
<img src="https://img-blog.csdnimg.cn/20200909202113981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<p>CentOS6.5网络配置<br />
测试网络是否联通。</p>
<p>ping网关：输入命令“ping 192.168.50.2”</p>
<p>pingWindows地址：输入命令“ping 192.168.50.1”</p>
<p>CentOS6.5网络配置<br />
设置DNS服务，输入命令“vi /etc/resolv.conf”</p>
<p>CentOS6.5网络配置<br />
添加内容“nameserver 114.114.114.114”,并保存退出<br />
<img src="https://img-blog.csdnimg.cn/20200909202150453.png#pic_center" alt="在这里插入图片描述" /><br><hr></p>
<p>CentOS6.5网络配置<br />
测试外网是否联通</p>
<p>输入命令“ping <a href="http://www.baidu.com">www.baidu.com</a>”<br />
<img src="https://img-blog.csdnimg.cn/20200909202227853.png#pic_center" alt="在这里插入图片描述" /><br><hr><br />
配置完成<br />
参考：<a href="https://www.cnblogs.com/lucky-man/p/7111920.html">https://www.cnblogs.com/lucky-man/p/7111920.html</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---策略模式</title>
    <url>/2020/09/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="策略模式指的是定义一些列的算法把他们一个个封装起来目的就是将算法的使用与算法的实现分离开来避免多重判断条件更具有扩展性"><a class="markdownIt-Anchor" href="#策略模式指的是定义一些列的算法把他们一个个封装起来目的就是将算法的使用与算法的实现分离开来避免多重判断条件更具有扩展性"></a> 策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来，避免多重判断条件，更具有扩展性。</h5>
<a id="more"></a>
<h3 id="策略模式前端"><a class="markdownIt-Anchor" href="#策略模式前端"></a> 策略模式(前端)</h3>
<p>下面也是举个例子，现在超市有活动，vip为5折，老客户3折，普通顾客没折，计算***需要支付的金额，如果不使用策略模式，我们的代码可能和下面一样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params">personType, price</span>) </span>&#123; </span><br><span class="line"> <span class="comment">//vip 5 折 </span></span><br><span class="line"> <span class="keyword">if</span> (personType == <span class="string">&#x27;vip&#x27;</span>) &#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="number">0.5</span>; </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (personType == <span class="string">&#x27;old&#x27;</span>)&#123; <span class="comment">//老客户 3 折 </span></span><br><span class="line"> <span class="keyword">return</span> price * <span class="number">0.3</span>; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> price; <span class="comment">//其他都全价 </span></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们需要很多个判断，如果有很多优惠，我们又需要添加很多判断，<strong>这里已经违背了刚才说的设计模式的六大原则中的开闭原则了，如果使用策略模式</strong>，我们的代码可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于vip客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vipPrice</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">0.5</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">vipPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="built_in">this</span>.discount; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 对于老客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldPrice</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">0.3</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">oldPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price * <span class="built_in">this</span>.discount; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 对于普通客户 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.discount = <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">Price.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> price ; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 上下文，对于客户端的使用 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Context</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"> <span class="built_in">this</span>.strategy = <span class="literal">null</span>; </span><br><span class="line"> <span class="built_in">this</span>.price = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">Context.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">name, strategy, price</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = name; </span><br><span class="line"> <span class="built_in">this</span>.strategy = strategy; </span><br><span class="line"> <span class="built_in">this</span>.price = price; </span><br><span class="line">&#125; </span><br><span class="line">Context.prototype.getResult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; 的结账价为: &#x27;</span> + <span class="built_in">this</span>.strategy.getPrice(<span class="built_in">this</span>.price)); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context(); </span><br><span class="line"><span class="keyword">var</span> vip = <span class="keyword">new</span> vipPrice(); </span><br><span class="line">context.set (<span class="string">&#x27;vip客户&#x27;</span>, vip, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// vip客户 的结账价为: 100 </span></span><br><span class="line"><span class="keyword">var</span> old = <span class="keyword">new</span> oldPrice(); </span><br><span class="line">context.set (<span class="string">&#x27;老客户&#x27;</span>, old, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// 老客户 的结账价为: 60 </span></span><br><span class="line"><span class="keyword">var</span> Price = <span class="keyword">new</span> Price(); </span><br><span class="line">context.set (<span class="string">&#x27;普通客户&#x27;</span>, Price, <span class="number">200</span>); </span><br><span class="line">context.getResult(); <span class="comment">// 普通客户 的结账价为: 200 </span></span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：在上面的代码中，通过策略模式，使得客户的折扣与算法解藕，又使得修改跟扩展能独立的进行，不影到客户端或其他算法的使用。</p>
<p>当我们的代码中有很多个判断分支，每一个条件分支都会引起该“类”的特定行为以不同的方式作出改变，这个时候就可以使用策略模式，可以改进我们代码的质量，也更好的可以进行单元测试。</p>
<h3 id="策略模式后端"><a class="markdownIt-Anchor" href="#策略模式后端"></a> 策略模式(后端)</h3>
<p><img src="https://img-blog.csdnimg.cn/2020090622452363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
其中，Context是上下文，用一个ConcreteStrategy来配置，维护一个对Strategy对象的引用；Strategy是策略类，用于定义所有支持算法的公共接口；ConcreteStrategy是具体策略类，封装了具体的算法或行为，继承于Strategy。</p>
<p>1. Context上下文<br />
　　Context上下文角色，也叫Context封装角色，起承上启下的作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     Strategy strategy;</span><br><span class="line"> <span class="number">4</span>     </span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line"> <span class="number">7</span>     &#125;</span><br><span class="line"> <span class="number">8</span>     </span><br><span class="line"> <span class="number">9</span>     <span class="comment">//上下文接口</span></span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">11</span>         strategy.algorithmInterface();</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure>
<p>2. 策略角色<br />
　　抽象策略角色，是对策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具有的方法和属性。algorithm是“运算法则”的意思。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>     </span><br><span class="line"><span class="number">3</span>     <span class="comment">//算法方法</span></span><br><span class="line"><span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">6</span> &#125;</span><br></pre></td></tr></table></figure>
<p>3. 具体策略角色<br />
　　用于实现抽象策略中的操作，即实现具体的算法，下方用print代替。测试类共3个ConcreteStrategy，其它两个类与ConcreteStrategyA同理，就不再赘述了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">5</span>         System.out.println(<span class="string">&quot;算法A实现&quot;</span>);</span><br><span class="line"><span class="number">6</span>     &#125;</span><br><span class="line"><span class="number">7</span> </span><br><span class="line"><span class="number">8</span> &#125;</span><br></pre></td></tr></table></figure>
<p>4. Client客户端<br />
　　下面依次更换策略，测试一下策略模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Context context;</span><br><span class="line"> <span class="number">5</span>         </span><br><span class="line"> <span class="number">6</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line"> <span class="number">7</span>         context.contextInterface();</span><br><span class="line"> <span class="number">8</span>         </span><br><span class="line"> <span class="number">9</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line"><span class="number">10</span>         context.contextInterface();</span><br><span class="line"><span class="number">11</span>         </span><br><span class="line"><span class="number">12</span>         context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyC());</span><br><span class="line"><span class="number">13</span>         context.contextInterface();</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020090622464769.png#pic_center" alt="在这里插入图片描述" /></p>
<h4 id="策略模式的应用"><a class="markdownIt-Anchor" href="#策略模式的应用"></a> 策略模式的应用</h4>
<p><strong>1. 何时使用</strong><br />
一个系统有许多类，而区分它们的只是他们直接的行为时<br />
<strong>2. 方法</strong><br />
将这些算法封装成一个一个的类，任意的替换<br />
<strong>3. 优点</strong><br />
算法可以自由切换<br />
避免使用多重条件判断（如果不用策略模式我们可能会使用多重条件语句，不利于维护）<br />
扩展性良好，增加一个策略只需实现接口即可<br />
<strong>4. 缺点</strong><br />
策略类数量会增多，每个策略都是一个类，复用的可能性很小<br />
所有的策略类都需要对外暴露<br />
<strong>5. 使用场景</strong><br />
多个类只有算法或行为上稍有不同的场景<br />
算法需要自由切换的场景<br />
需要屏蔽算法规则的场景<br />
<strong>6. 应用实例</strong><br />
出行方式，自行车、汽车等，每一种出行方式都是一个策略<br />
商场促销方式，打折、满减等<br />
Java AWT中的LayoutManager，即布局管理器<br />
<strong>7. 注意事项</strong><br />
如果一个系统的策略多于四个，就需要考虑使用混合模式来解决策略类膨胀的问题</p>
<p>参考： <a href="https://www.cnblogs.com/adamjwh/p/11011095.html">https://www.cnblogs.com/adamjwh/p/11011095.html</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---观察者模式</title>
    <url>/2020/09/06/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="观察者一般可以看做是第三者比如在学校上自习的时候大家肯定都有过交头接耳-各种玩耍的经历这时总会有一个放风的小伙伴当老师即将出现时及时通知大家老师来了-再比如拍卖会的时候大家相互叫价拍卖师会观察最高标价然后通知给其它竞价者竞价这就是一个观察者模式"><a class="markdownIt-Anchor" href="#观察者一般可以看做是第三者比如在学校上自习的时候大家肯定都有过交头接耳-各种玩耍的经历这时总会有一个放风的小伙伴当老师即将出现时及时通知大家老师来了-再比如拍卖会的时候大家相互叫价拍卖师会观察最高标价然后通知给其它竞价者竞价这就是一个观察者模式"></a> 观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。</h5>
<a id="more"></a>
<h5 id="观察者模式又叫做-发布订阅模式-它定义对象间的一种一对多的依赖关系当一个对象的状态发生改变时所有依赖于它的对象都将得到通知和更新观察者模式提供了一个订阅模型其中对象订阅事件并在发生时得到通知这种模式是事件驱动的编程基石它有利益于良好的面向对象的设计"><a class="markdownIt-Anchor" href="#观察者模式又叫做-发布订阅模式-它定义对象间的一种一对多的依赖关系当一个对象的状态发生改变时所有依赖于它的对象都将得到通知和更新观察者模式提供了一个订阅模型其中对象订阅事件并在发生时得到通知这种模式是事件驱动的编程基石它有利益于良好的面向对象的设计"></a> 观察者模式又叫做 <em>发布—订阅模式</em> ，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知和更新，观察者模式提供了一个订阅模型，其中对象订阅事件并在发生时得到通知，这种模式是事件驱动的编程基石，它有利益于良好的面向对象的设计</h5>
<h3 id="观察者模式前端"><a class="markdownIt-Anchor" href="#观察者模式前端"></a> 观察者模式（前端）</h3>
<p><strong>定义</strong>：对象间的一种一对多的依赖关系。</p>
<p><strong>需求</strong>：当一个对象的状态发生变化时，所有依赖于他的对象都将得到通知。</p>
<p><strong>优点</strong>：时间上的解耦，对象之间的解耦。</p>
<p><strong>实现</strong>：</p>
<p>指定好谁充当发布者;<br />
给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者;<br />
发布消息的时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函数。<br />
下面举个例子，比如我们给页面中的一个dom节点绑定一个事件，其实就可以看做是一种观察者模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> alert(<span class="string">&quot;Hello World&quot;</span>) </span><br><span class="line">&#125;，<span class="literal">false</span> ) </span><br><span class="line"><span class="built_in">document</span>.body.click() <span class="comment">//模拟用户点击 </span></span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：在上面的例子中，需要监听用户点击 document.body 的动作，但是我们是没办法预知用户将在什么时候点击的，因此我们订阅了 document.body 的 click 事件，当 body 节点被点击时，body 节点便会向订阅者发布 “Hello World” 消息。</p>
<h3 id="观察者模式后端"><a class="markdownIt-Anchor" href="#观察者模式后端"></a> 观察者模式（后端）</h3>
<p><img src="https://img-blog.csdnimg.cn/20200906170819998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
其中，Subject类是主题，它把所有对观察者对象的引用文件存在了一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供了一个接口，可以增加和删除观察者对象；Observer类是抽象观察者，为所有的具体观察者定义一个接口，在得到主题的通知时更新自己；ConcreteSubject类是具体主题，将有关状态存入具体观察者对象，在具体主题内部状态改变时，给所有登记过的观察者发出通知；ConcreteObserver是具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观察者数组</span></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; oVector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oVector.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oVector.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知所有观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer : <span class="keyword">this</span>.oVector) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>     <span class="comment">//更新</span></span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">super</span>.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息，进行处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个主题</span></span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        <span class="comment">//定义一个观察者</span></span><br><span class="line">        Observer observer = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line">        <span class="comment">//观察</span></span><br><span class="line">        subject.addObserver(observer);</span><br><span class="line">        <span class="comment">//开始活动</span></span><br><span class="line">        subject.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><br />
<img src="https://img-blog.csdnimg.cn/2020090617253982.png#pic_center" alt="在这里插入图片描述" /></p>
<h5 id="观察者模式的应用"><a class="markdownIt-Anchor" href="#观察者模式的应用"></a> 观察者模式的应用</h5>
<p><strong>1. 何时使用</strong><br />
一个对象状态改变，所有的依赖对象都将得到通知<br />
　　<strong>2. 方法</strong><br />
使用面向对象技术<br />
　　<strong>3. 优点</strong><br />
观察者和被观察者是抽象耦合的<br />
建立了一套触发机制<br />
　　<strong>4. 缺点</strong><br />
如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间<br />
如果观察者和观察目标间有循环依赖，可能导致系统崩溃<br />
没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的<br />
　　<strong>5. 使用场景</strong><br />
关联行为场景<br />
事件多级触发场景<br />
跨系统的消息变换场景，如消息队列的处理机制<br />
　　<strong>6. 应用实例</strong><br />
手机丢了，委托别人给其他人发消息通知<br />
通知老师/老板来了<br />
拍卖，拍卖师观察最高标价，然后通知给其它竞价者竞价<br />
在一个目录下建立一个文件，会同时通知目录管理器增加目录，并通知磁盘减少空间，文件是被观察者，目录管理器和磁盘管理器是观察者<br />
猫叫了一声，吓着了老鼠，也惊到了主人，猫是被观察者，老鼠和人是观察者<br />
　　<strong>7. 注意事项</strong><br />
避免循环引用<br />
如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式</p>
<p>参考： <a href="https://www.cnblogs.com/adamjwh/p/10913660.html">https://www.cnblogs.com/adamjwh/p/10913660.html</a></p>
<p>参考： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---代理模式</title>
    <url>/2020/09/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="代理模式给某一个对象提供一个代理对象并由代理对象控制对原对象的引用-通俗的来讲代理模式就是我们生活中常见的中介"><a class="markdownIt-Anchor" href="#代理模式给某一个对象提供一个代理对象并由代理对象控制对原对象的引用-通俗的来讲代理模式就是我们生活中常见的中介"></a> 代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</h4>
<a id="more"></a>
<h3 id="代理模式前端"><a class="markdownIt-Anchor" href="#代理模式前端"></a> 代理模式(前端)</h3>
<h4 id="代理模式的定义"><a class="markdownIt-Anchor" href="#代理模式的定义"></a> 代理模式的定义：</h4>
<p>代理模式主要是为其他对象提供一种代理以控制对这个对象的访问，主要解决在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上，在面向对象系统中，有些对象由于某些原因(比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问)，直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// 示例代码 </span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 目标对象，是真正被代理的对象 </span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"> Subject.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 代理对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>realSubject [持有被代理的具体的目标对象] </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Proxy</span>(<span class="params">realSubject</span>)</span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.realSubject = readSubject; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="built_in">Proxy</span>.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.realSubject.request(); </span><br><span class="line"> &#125;; </span><br><span class="line">&#125;()); </span><br></pre></td></tr></table></figure>
<h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h4>
<p>在上面的代码中，Proxy可以控制对真正被代理对象的一个访问，在代理模式中，比较常见的就是虚拟代理，虚拟代理用于控制对那种创建开销很大的本体的访问，它会把本体的实例化推迟到有方法被调用的时候，比如说，现在我们假设PublicLibrary的实例化很慢，不能在网页加载的时候立即完成，我们可以为其创建一个虚拟代理，让它把PublicLibrary的实例化推迟到必要的时候，比如说我们在前端中经常用到的图片懒加载，就可以用虚拟代理</p>
<h3 id="代理模式后端"><a class="markdownIt-Anchor" href="#代理模式后端"></a> 代理模式(后端)</h3>
<h4 id="为什么要用代理模式"><a class="markdownIt-Anchor" href="#为什么要用代理模式"></a> 为什么要用代理模式</h4>
<p>中介隔离作用：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。<br />
开闭原则，增加功能：代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服务。真正的业务功能还是由委托类来实现，但是可以在业务功能执行的前后加入一些公共的服务。例如我们想给项目加入缓存、日志这些功能，我们就可以使用代理类来完成，而没必要打开已经封装好的委托类。</p>
<h4 id="分为两种静态代理-动态代理"><a class="markdownIt-Anchor" href="#分为两种静态代理-动态代理"></a> 分为两种：静态代理、动态代理。</h4>
<h4 id="静态代理"><a class="markdownIt-Anchor" href="#静态代理"></a> 静态代理</h4>
<p>是由程序员创建或特定工具自动生成源代码，在对其编译。在程序员运行之前，代理类.class文件就已经被创建了。动态代理是在程序运行时通过反射机制动态创建的。<br />
1.静态代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 第一步：创建服务类接口</span><br><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 4  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 5  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Date</span>: 22:40 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 7  */</span></span><br><span class="line"> <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span>     <span class="function"><span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure>
<p>第二步：实现服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 4  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 5  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Date</span>: 22:42 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 7  */</span></span><br><span class="line"> <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHouseImpl</span> <span class="keyword">implements</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">11</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">12</span>         System.out.println(<span class="string">&quot;我要买房&quot;</span>);</span><br><span class="line"><span class="number">13</span>     &#125;</span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure>
<p>第三步：创建代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 6  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 7  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Date</span>: 22:43 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> 9  */</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHouseProxy</span> <span class="keyword">implements</span> <span class="title">BuyHouse</span> </span>&#123;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span>     <span class="keyword">private</span> BuyHouse buyHouse;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span>     <span class="function"><span class="keyword">public</span> <span class="title">BuyHouseProxy</span><span class="params">(<span class="keyword">final</span> BuyHouse buyHouse)</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>         <span class="keyword">this</span>.buyHouse = buyHouse;</span><br><span class="line"><span class="number">16</span>     &#125;</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">19</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyHosue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">20</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">21</span>         buyHouse.buyHosue();</span><br><span class="line"><span class="number">22</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     &#125;</span><br><span class="line"><span class="number">25</span> &#125;</span><br></pre></td></tr></table></figure>
<p>第四步：编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> main.java.proxy.impl.BuyHouseImpl;</span><br><span class="line"><span class="keyword">import</span> main.java.proxy.impl.BuyHouseProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 22:43 2018/1/9 0009</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line">        buyHouse.buyHosue();</span><br><span class="line">        BuyHouseProxy buyHouseProxy = <span class="keyword">new</span> BuyHouseProxy(buyHouse);</span><br><span class="line">        buyHouseProxy.buyHosue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="静态代理总结"><a class="markdownIt-Anchor" href="#静态代理总结"></a> 静态代理总结：</h5>
<p>优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。<br />
缺点：我们得为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。</p>
<h4 id="动态代理"><a class="markdownIt-Anchor" href="#动态代理"></a> 动态代理</h4>
<p>在动态代理中我们不再需要再手动的创建代理类，我们只需要编写一个动态处理器就可以了。真正的代理对象由JDK再运行时为我们动态的来创建。</p>
<p>第一步：编写动态处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 7  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> 9  * <span class="doctag">@Date</span>: 20:34 2018/1/12 0012</span></span><br><span class="line"><span class="comment">10  */</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span>     <span class="keyword">private</span> Object object;</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(<span class="keyword">final</span> Object object)</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>         <span class="keyword">this</span>.object = object;</span><br><span class="line"><span class="number">17</span>     &#125;</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">20</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="number">21</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">22</span>         Object result = method.invoke(object, args);</span><br><span class="line"><span class="number">23</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">24</span>         <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">25</span>     &#125;</span><br><span class="line"><span class="number">26</span> &#125;</span><br></pre></td></tr></table></figure>
<p>第二步：编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> main.java.proxy.test;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> main.java.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> main.java.proxy.impl.BuyHouseImpl;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> main.java.proxy.impl.DynamicProxyHandler;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment">11  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">12  * <span class="doctag">@Date</span>: 20:38 2018/1/12 0012</span></span><br><span class="line"><span class="comment">13  */</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>         BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line"><span class="number">17</span>         BuyHouse proxyBuyHouse = (BuyHouse) Proxy.newProxyInstance(BuyHouse.class.getClassLoader(), <span class="keyword">new</span></span><br><span class="line"><span class="number">18</span>                 Class[]&#123;BuyHouse.class&#125;, <span class="keyword">new</span> DynamicProxyHandler(buyHouse));</span><br><span class="line"><span class="number">19</span>         proxyBuyHouse.buyHosue();</span><br><span class="line"><span class="number">20</span>     &#125;</span><br><span class="line"><span class="number">21</span> &#125;</span><br></pre></td></tr></table></figure>
<p>注意Proxy.newProxyInstance()方法接受三个参数：</p>
<ul>
<li>ClassLoader loader:指定当前目标对象使用的类加载器,获取加载器的方法是固定的</li>
<li>Class&lt;?&gt;[] interfaces:指定目标对象实现的接口的类型,使用泛型方式确认类型</li>
<li>InvocationHandler:指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法</li>
</ul>
<h5 id="动态代理总结"><a class="markdownIt-Anchor" href="#动态代理总结"></a> 动态代理总结：</h5>
<p>虽然相对于静态代理，动态代理大大减少了我们的开发任务，同时减少了对业务接口的依赖，降低了耦合度。但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持interface代理的桎梏，因为它的设计注定了这个遗憾。回想一下那些动态生成的代理类的继承关系图，它们已经注定有一个共同的父类叫Proxy。Java的继承机制注定了这些动态代理类们无法实现对class的动态代理，原因是多继承在Java中本质上就行不通。有很多条理由，人们可以否定对 class代理的必要性，但是同样有一些理由，相信支持class动态代理会更美好。接口和类的划分，本就不是很明显，只是到了Java中才变得如此的细化。如果只从方法的声明及是否被定义来考量，有一种两者的混合体，它的名字叫抽象类。实现对抽象类的动态代理，相信也有其内在的价值。此外，还有一些历史遗留的类，它们将因为没有实现任何接口而从此与动态代理永世无缘。如此种种，不得不说是一个小小的遗憾。但是，不完美并不等于不伟大，伟大是一种本质，Java动态代理就是佐例。</p>
<h4 id="cglib代理"><a class="markdownIt-Anchor" href="#cglib代理"></a> CGLIB代理</h4>
<pre><code>   JDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要CGLib了。CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。但因为采用的是继承，所以不能对final修饰的类进行代理。JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。
</code></pre>
<p>第一步：创建CGLIB代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> dan.proxy.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment">11  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">12  * <span class="doctag">@Date</span>: 20:38 2018/1/16 0016</span></span><br><span class="line"><span class="comment">13  */</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>     <span class="keyword">private</span> Object target;</span><br><span class="line"><span class="number">16</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(<span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line"><span class="number">17</span>         <span class="keyword">this</span>.target = target;</span><br><span class="line"><span class="number">18</span>         Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="number">19</span>         enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());</span><br><span class="line"><span class="number">20</span>         enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="number">21</span>         <span class="keyword">return</span> enhancer.create();</span><br><span class="line"><span class="number">22</span>     &#125;</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="number">25</span>         System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line"><span class="number">26</span>         Object result = methodProxy.invoke(object, args);</span><br><span class="line"><span class="number">27</span>         System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line"><span class="number">28</span>         <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">29</span>     &#125;</span><br><span class="line"><span class="number">30</span> &#125;</span><br></pre></td></tr></table></figure>
<p>第二步：创建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">package</span> dan.proxy.test;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> dan.proxy.BuyHouse;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> dan.proxy.impl.BuyHouseImpl;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> dan.proxy.impl.CglibProxy;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 8  * <span class="doctag">@Auther</span>: dan gao</span></span><br><span class="line"><span class="comment"> 9  * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">10  * <span class="doctag">@Date</span>: 20:52 2018/1/16 0016</span></span><br><span class="line"><span class="comment">11  */</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="number">14</span>         BuyHouse buyHouse = <span class="keyword">new</span> BuyHouseImpl();</span><br><span class="line"><span class="number">15</span>         CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line"><span class="number">16</span>         BuyHouseImpl buyHouseCglibProxy = (BuyHouseImpl) cglibProxy.getInstance(buyHouse);</span><br><span class="line"><span class="number">17</span>         buyHouseCglibProxy.buyHosue();</span><br><span class="line"><span class="number">18</span>     &#125;</span><br><span class="line"><span class="number">19</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---单例模式</title>
    <url>/2020/09/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="将构造方法私有化使其不能在类的外部通过new关键字实例化该类对象-在该类内部产生一个唯一的实例化对象并且将其封装为private-static类型-定义一个静态方法返回这个唯一对象"><a class="markdownIt-Anchor" href="#将构造方法私有化使其不能在类的外部通过new关键字实例化该类对象-在该类内部产生一个唯一的实例化对象并且将其封装为private-static类型-定义一个静态方法返回这个唯一对象"></a> 将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。定义一个静态方法返回这个唯一对象。</h4>
<a id="more"></a>
<h2 id="单例模式前端"><a class="markdownIt-Anchor" href="#单例模式前端"></a> 单例模式（前端）</h2>
<h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义：</h4>
<p>是保证一个类只有一个实例，并且提供一个访问它的全局访问点。</p>
<h4 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求：</h4>
<p>一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器中的window对象、登录浮窗等。</p>
<h4 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现：</h4>
<p>用一个变量标识当前是否已经为某个类创建过对象，如果是，则在下一次获取这个类的实例时，直接返回之前创建的对象。</p>
<h4 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点：</h4>
<p>可以用来划分命名空间，减少全局变量的数量<br />
可以被实例化，且实例化一次，再次实例化生成的也是***个实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> single = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> unique; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// 如果该实例存在，则直接返回，否则就对其实例化 </span></span><br><span class="line"> <span class="keyword">if</span>( unique === <span class="literal">undefined</span> )&#123; </span><br><span class="line"> unique = <span class="keyword">new</span> Construct(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> unique; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Construct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="comment">// ... 生成单例的构造函数的代码 </span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line"> getInstance : getInstance </span><br><span class="line"> &#125; </span><br><span class="line">&#125;)(); </span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们可以使用single.getInstance来获取到单例，并且每次调用均获取到同一个单例，在我们平时的开发中，我们也经常会用到这种模式，比如当我们单击登录按钮的时候，页面中会出现一个登录框，而这个浮窗是唯一的，无论单击多少次登录按钮，这个浮窗只会被创建一次，因此这个登录浮窗就适合用单例模式。</p>
<h2 id="单例模式后端"><a class="markdownIt-Anchor" href="#单例模式后端"></a> 单例模式（后端）</h2>
<p>Java开发过程中，很多场景下都会碰到或要用到单例模式，在设计模式里也是经常作为指导学习的热门模式之一，相信每位开发同事都用到过。我们总是沿着前辈的足迹去做设定好的思路，往往没去探究为何这么做，所以这篇文章对单例模式做了详解。</p>
<h3 id="单例模式定义"><a class="markdownIt-Anchor" href="#单例模式定义"></a> 单例模式定义：</h3>
<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p>
<h3 id="单例模式特点"><a class="markdownIt-Anchor" href="#单例模式特点"></a> 单例模式特点：</h3>
<p>1、单例类只能有一个实例。<br />
　　2、单例类必须自己创建自己的唯一实例。<br />
　　3、单例类必须给所有其他对象提供这一实例。</p>
<p>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</p>
<h3 id="线程安全的问题"><a class="markdownIt-Anchor" href="#线程安全的问题"></a> 线程安全的问题</h3>
<p>一方面在获取单例的时候，要保证不能产生多个实例对象，后面会详细讲到五种实现方式；</p>
<p>另一方面，在使用单例对象的时候，要注意单例对象内的实例变量是会被多线程共享的，推荐使用无状态的对象，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题，比如我们常用的VO，DTO等（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题）。</p>
<h3 id="单例模式的选择"><a class="markdownIt-Anchor" href="#单例模式的选择"></a> 单例模式的选择</h3>
<p>还记得我们最早使用的MVC框架Struts1中的action就是单例模式的，而到了Struts2就使用了多例。在Struts1里，当有多个请求访问，每个都会分配一个新线程，在这些线程，操作的都是同一个action对象，每个用户的数据都是不同的，而action却只有一个。到了Struts2， action对象为每一个请求产生一个实例，并不会带来线程安全问题（实际上servlet容器给每个请求产生许多可丢弃的对象，但是并没有影响到性能和垃圾回收问题，有时间会做下研究）。</p>
<h3 id="实现单例模式的方式"><a class="markdownIt-Anchor" href="#实现单例模式的方式"></a> 实现单例模式的方式</h3>
<h4 id="饿汉式单例立即加载方式"><a class="markdownIt-Anchor" href="#饿汉式单例立即加载方式"></a> 饿汉式单例（立即加载方式）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 饿汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>饿汉式单例在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。</p>
<p>Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且闭着眼就认为反射机制不存在。）</p>
<h4 id="懒汉式单例延迟加载方式"><a class="markdownIt-Anchor" href="#懒汉式单例延迟加载方式"></a> 懒汉式单例（延迟加载方式）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该示例虽然用延迟加载方式实现了懒汉式单例，但在多线程环境下会产生多个single对象，如何改造请看以下方式:</p>
<h4 id="使用synchronized同步锁"><a class="markdownIt-Anchor" href="#使用synchronized同步锁"></a> 使用synchronized同步锁</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等同于 synchronized public static Singleton3 getInstance()</span></span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton3.class)&#123;</span><br><span class="line">          <span class="comment">// 注意：里面的判断是一定要加的，否则出现线程安全问题</span></span><br><span class="line">            <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">                single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    single = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p>
<h4 id="静态内部类实现"><a class="markdownIt-Anchor" href="#静态内部类实现"></a> 静态内部类实现</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObject</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObject.single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。这种情况不多做说明了，使用时请注意。</p>
<h4 id="static静态代码块实现"><a class="markdownIt-Anchor" href="#static静态代码块实现"></a> static静态代码块实现</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="内部枚举类实现"><a class="markdownIt-Anchor" href="#内部枚举类实现"></a> 内部枚举类实现</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> EnmuSingleton&#123;</span><br><span class="line">        Singleton;</span><br><span class="line">        <span class="keyword">private</span> Singleton8 singleton;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//枚举类的构造方法在类加载是被实例化 </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnmuSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton8();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton8 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton8 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EnmuSingleton.Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton8</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton8</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考： <a href="https://www.cnblogs.com/garryfu/p/7976546.html">https://www.cnblogs.com/garryfu/p/7976546.html</a><br />
参考： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a><br />
参考： <a href="https://www.cnblogs.com/binaway/p/8889184.html">https://www.cnblogs.com/binaway/p/8889184.html</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式---工厂模式</title>
    <url>/2020/09/04/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>工厂模式包括简单工厂，工厂方法，抽象工厂，这里分别介绍前后端工厂模式以及示例</p>
<a id="more"></a>
<h2 id="前端工厂模式"><a class="markdownIt-Anchor" href="#前端工厂模式"></a> （前端）工厂模式</h2>
<h3 id="简单工厂"><a class="markdownIt-Anchor" href="#简单工厂"></a> 简单工厂</h3>
<p>简单工厂模式又叫静态工厂模式，由一个工厂对象决定创建某一种产品对象类的实例，主要用来创建同一类对象<br />
<strong>简单工厂在调用return new的时候使用</strong><br />
比如说，在实际的项目中，我们常常需要根据用户的权限来渲染不同的页面，高级权限的用户所拥有的页面有些是无法被低级权限的用户所查看，所以我们可以在不同权限等级用户的构造函数中，保存该用户能够看到的页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span> (<span class="params">role</span>) </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SuperAdmin</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">NormalUser</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">switch</span> (role) &#123; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;superAdmin&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SuperAdmin(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;admin&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Admin(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;user&#x27;</span>: </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> NormalUser(); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">default</span>: </span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;参数错误, 可选参数:superAdmin、admin、user&#x27;</span>); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;superAdmin&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;admin&#x27;</span>)  </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;user&#x27;</span>) </span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：在上面的例子中，UserFactory就是一个简单工厂，在该函数中有3个构造函数分别对应不同的权限的用户，当我们调用工厂函数时，只需要传递superAdmin, admin, user这三个可选参数中的一个获取对应的实例对象</p>
<h4 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点：</h4>
<p>简单工厂的优点在于，你只需要一个正确的参数，就可以获取到你所需要的对象，而无需知道其创建的具体细节;</p>
<h4 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点：</h4>
<p>在函数内包含了所有对象的创建逻辑(构造函数)和判断逻辑的代码，每增加新的构造函数还需要修改判断逻辑代码，我们的对象不是上面的3个而是30个或更多时，这个函数会成为一个庞大的超级函数，便得难以维护，简单工厂只能作用于创建的对象数量较少，<strong>对象的创建逻辑不复杂时使用</strong>;</p>
<h3 id="工厂方法"><a class="markdownIt-Anchor" href="#工厂方法"></a> 工厂方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安全模式创建的工厂方法函数 </span></span><br><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span>(<span class="params">role</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">this</span> <span class="keyword">instanceof</span> UserFactory) &#123; </span><br><span class="line"> <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">this</span>[role](); </span><br><span class="line"> <span class="keyword">return</span> s; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> UserFactory(role); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//工厂方法函数的原型中设置所有对象的构造函数 </span></span><br><span class="line">UserFactory.prototype = &#123; </span><br><span class="line"> SuperAdmin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>] </span><br><span class="line"> &#125;, </span><br><span class="line"> Admin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>, <span class="string">&#x27;应用管理&#x27;</span>] </span><br><span class="line"> &#125;, </span><br><span class="line"> NormalUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>, </span><br><span class="line"> <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;订单管理&#x27;</span>] </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;SuperAdmin&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;Admin&#x27;</span>)  </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;NormalUser&#x27;</span>) </span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：在简单工厂中，如果我们新增加一个用户类型，需要修改两个地方的代码，一个是增加新的用户构造函数，一个是在逻辑判断中增加对新的用户的判断，而在抽象工厂方法中，我们只需要在UserFactory.prototype中添加就可以啦。</p>
<h2 id="后端工厂模式"><a class="markdownIt-Anchor" href="#后端工厂模式"></a> （后端）工厂模式</h2>
<p>（1）简单工厂（Simple Factory）模式，又称静态工厂方法模式（Static Factory Method Pattern）。</p>
<p>（2）工厂方法（Factory Method）模式，又称多态性工厂（Polymorphic Factory）模式或虚拟构造子（Virtual Constructor）模式；</p>
<p>（3）抽象工厂（Abstract Factory）模式，又称工具箱（Kit 或Toolkit）模式。</p>
<h4 id="为什么要用工厂模式"><a class="markdownIt-Anchor" href="#为什么要用工厂模式"></a> 为什么要用工厂模式</h4>
<p>(1) 解耦 ：把对象的创建和使用的过程分开</p>
<p>(2)降低代码重复: 如果创建某个对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码。</p>
<p>(3) 降低维护成本 ：由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本。</p>
<h4 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h4>
<p>（1）需要创建的对象较少。</p>
<p>（2）客户端不关心对象的创建过程。</p>
<h3 id="简单工厂-2"><a class="markdownIt-Anchor" href="#简单工厂-2"></a> 简单工厂</h3>
<h4 id="override是什么注解"><a class="markdownIt-Anchor" href="#override是什么注解"></a> @Override是什么注解</h4>
<p>@Override 的作bai用是：如果想重写父类的方du法，比如toString()方法的话zhi，在方法前面加上@Override 系统dao可以帮你检查方法的正确性。</p>
<p>（1）创建Shape接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建实现该接口的具体图形类</p>
<p>圆形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>长方形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正方形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw Square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）创建工厂类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (shapeType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape circle = ShapeFactory.getShape(<span class="string">&quot;CIRCLE&quot;</span>);</span><br><span class="line">        circle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape rectangle = ShapeFactory.getShape(<span class="string">&quot;RECTANGLE&quot;</span>);</span><br><span class="line">        rectangle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class="line">        Shape square = ShapeFactory.getShape(<span class="string">&quot;SQUARE&quot;</span>);</span><br><span class="line">        square.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Circle</span><br><span class="line">Draw Circle</span><br><span class="line">Rectangle</span><br><span class="line">Draw Rectangle</span><br><span class="line">Square</span><br><span class="line">Draw Square</span><br></pre></td></tr></table></figure>
<p>这样的实现有个问题，如果我们新增产品类的话，就需要修改工厂类中的<code>getShape（）</code>方法，这很明显不符合 开放-封闭原则 。</p>
<h3 id="工厂方法-2"><a class="markdownIt-Anchor" href="#工厂方法-2"></a> 工厂方法</h3>
<p>上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可。</p>
<p>(1)增加一个工厂接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）增加相关工厂类:</p>
<p>圆形工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>长方形工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>圆形工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory circlefactory = <span class="keyword">new</span> CircleFactory();</span><br><span class="line">        Shape circle = circlefactory.getShape();</span><br><span class="line">        circle.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Circle</span><br><span class="line">Draw Circle</span><br></pre></td></tr></table></figure>
<h4 id="适用场景-2"><a class="markdownIt-Anchor" href="#适用场景-2"></a> 适用场景</h4>
<p>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。<br />
一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏<br />
将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p>
<h3 id="抽象工厂"><a class="markdownIt-Anchor" href="#抽象工厂"></a> 抽象工厂</h3>
<h4 id="适用场景-3"><a class="markdownIt-Anchor" href="#适用场景-3"></a> 适用场景</h4>
<p>和工厂方法一样客户端不需要知道它所创建的对象的类。<br />
需要一组对象共同完成某种功能时，并且可能存在多组对象完成不同功能的情况。（同属于同一个产品族的产品）<br />
系统结构稳定，不会频繁的增加对象。（因为一旦增加就需要修改原有代码，不符合开闭原则）<br />
<strong>场景：</strong><br />
不知道大家玩过穿越火线或者吃鸡这类游戏了吗，游戏中存在各种枪。我们假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）</p>
<h4 id="抽象工厂模式实例"><a class="markdownIt-Anchor" href="#抽象工厂模式实例"></a> 抽象工厂模式实例</h4>
<p>（1）创建相关接口：</p>
<p>枪</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子弹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建接口对应实现类：</p>
<p>AK类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK</span> <span class="keyword">implements</span> <span class="title">Gun</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;shooting with AK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>M4A1类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1</span> <span class="keyword">implements</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shooting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;shooting with M4A1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AK子弹类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK_Bullet</span> <span class="keyword">implements</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Load bullets with AK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>M4A1子弹类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1</span></span></span><br><span class="line"><span class="class"><span class="title">_Bullet</span> <span class="keyword">implements</span> <span class="title">Bullet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Load bullets with M4A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）创建工厂接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）创建具体工厂</p>
<p>生产AK和AK子弹的工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK_Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AK();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AK_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生产M4A1和M4A1子弹的工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4A1_Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gun <span class="title">produceGun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> M4A1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bullet <span class="title">produceBullet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> M4A1_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（5）测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">     Factory factory;</span><br><span class="line">     Gun gun;</span><br><span class="line">     Bullet bullet;</span><br><span class="line"></span><br><span class="line">     factory =<span class="keyword">new</span> AK_Factory();</span><br><span class="line">     bullet=factory.produceBullet();</span><br><span class="line">     bullet.load();</span><br><span class="line">     gun=factory.produceGun();</span><br><span class="line">     gun.shooting(); </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Load bullets with AK</span><br><span class="line">shooting with AK</span><br></pre></td></tr></table></figure>
<p>参考文章： <a href="https://developer.51cto.com/art/201904/594382.htm">https://developer.51cto.com/art/201904/594382.htm</a><br />
<a href="https://www.imooc.com/article/31360">https://www.imooc.com/article/31360</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT篇---4.使用 diff 查看修改了哪些代码，分支管理(Windows系统)</title>
    <url>/2020/08/31/git4/</url>
    <content><![CDATA[<h2 id="1名词定义"><a class="markdownIt-Anchor" href="#1名词定义"></a> 1.名词定义</h2>
<a id="more"></a>
<p>在学习 Git 的diff命令之前，我们先来统一 一下两个名词的理解，分别是工作区和暂存区。</p>
<h3 id="11-工作区"><a class="markdownIt-Anchor" href="#11-工作区"></a> 1.1 工作区</h3>
<p>工作区，指的是当前正在编辑的文件，将还没有修改的内容通过git add命令暂存起来；比如我现在修改了index.php文件中的一行代码，没有执行git add index.php命令，那么 index.php 便处于工作区状态。</p>
<h3 id="12-暂存区"><a class="markdownIt-Anchor" href="#12-暂存区"></a> 1.2 暂存区</h3>
<p>暂存区，指的是文件修改之后并且通过git add命令临时存储到版本记录里了，但还没有正式通过git commit提交的阶段；比如我现在新增一个test.php文件，使用了git add test.php命令，那么此时， test.php 文件的改动就已经进入到了暂存区。</p>
<h3 id="13-比较工作区变动"><a class="markdownIt-Anchor" href="#13-比较工作区变动"></a> 1.3 比较工作区变动</h3>
<p>现在我编辑了index.php文件，并且在里面加入了内容，如果我想通过 git 命令查看增加了哪些内容，参考命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff </span><br></pre></td></tr></table></figure>
<h3 id="14-比较暂存区变动"><a class="markdownIt-Anchor" href="#14-比较暂存区变动"></a> 1.4  比较暂存区变动</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --cached  diff.php</span><br></pre></td></tr></table></figure>
<h3 id="15-与指定记录比较"><a class="markdownIt-Anchor" href="#15-与指定记录比较"></a> 1.5 与指定记录比较</h3>
<p>有些时候，我们可能需要代码和历史的某一个版本进行比较，这个时候你可以先通过<code>git log</code></p>
<h3 id="16-工作区比较"><a class="markdownIt-Anchor" href="#16-工作区比较"></a> 1.6 工作区比较</h3>
<p>将要比较的 hash 值复制下来，然后执行如下所示命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff <span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure>
<h3 id="17-暂存区比较"><a class="markdownIt-Anchor" href="#17-暂存区比较"></a> 1.7 暂存区比较</h3>
<p>有些时候，我们想把暂存区的改动和指定记录进行对比，那么在命令中加入–cached 即可，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --cached <span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure>
<h3 id="18-与最新版本库比较"><a class="markdownIt-Anchor" href="#18-与最新版本库比较"></a> 1.8 与最新版本库比较</h3>
<p>很多时候，我们只需要将未正式提交的代码（包含工作区与暂存区）与最新的 commit 记录进行比较，虽然也可以通过指定 commit 的 hash 值进行，但是却很不方便，需要先获取到 hash 值，这里介绍一个简单的方法，可以通过git diff HEAD命令方式快速对比，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<p>在执行的命令中，HEAD指的是当前所在的分支名，如果你想比较其他分支也可以将 HEAD 改成其他分支名。</p>
<h3 id="19-比较两个历史记录"><a class="markdownIt-Anchor" href="#19-比较两个历史记录"></a> 1.9 比较两个历史记录</h3>
<p>有时候，可能会需要查看某一次提交记录修改了什么内容，这个时候就需要将两个历史记录进行比较；首先通过git log命令获取到需要查看的记录 hash 值，然后再找到这个记录的上一个版本的 hash 值，拼接的参考命令如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff <span class="built_in">hash</span>值1  <span class="built_in">hash</span>值2</span><br></pre></td></tr></table></figure>
<h2 id="2分支管理"><a class="markdownIt-Anchor" href="#2分支管理"></a> 2.分支管理</h2>
<h3 id="21查看分支"><a class="markdownIt-Anchor" href="#21查看分支"></a> 2.1查看分支</h3>
<p>在学习分支管理之前，我们先来查看一下分支。分支分为两种，一种是本地已经存在的，还有一种是服务器上有，但本地不存在的分支，查看的方式稍有区别。</p>
<h3 id="22查看本地的分支"><a class="markdownIt-Anchor" href="#22查看本地的分支"></a> 2.2查看本地的分支</h3>
<p>Git 查看分支的命令为 git branch，在不带参数的情况下，默认查看到的是本地分支列表，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure>
<h4 id="23查看所有分支"><a class="markdownIt-Anchor" href="#23查看所有分支"></a> 2.3查看所有分支</h4>
<p>在 git branch 中再加入一个 -a 参数，可以理解为 all 的意思，就是查看本地的分支和远程的所有分支，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a </span><br></pre></td></tr></table></figure>
<h3 id="24新建分支"><a class="markdownIt-Anchor" href="#24新建分支"></a> 2.4新建分支</h3>
<p>新建分支有两种情况，第一种是远程已经有的分支，需要把它在本地也同样创建一份；还有一种是新建一个远端和本地都不存在的分支。</p>
<h4 id="241导入远程分支"><a class="markdownIt-Anchor" href="#241导入远程分支"></a> 2.4.1导入远程分支</h4>
<p>把远程分支在本地创建，可以通过 <code>git checkout</code> 分支名 命令进行，<strong>这个命令其实是切换分支用的</strong>。但当它发现你本地不存在这个分支，会自动找到远程对应的分支然后在本地进行创建，参考命令如下所示：<br />
（在执行前，需要确保这个分支在远程或者本地已经存在）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<p>切换分支成功之后，会提示已经切换分支成功，以及提示你当前分支对应远程的分支名</p>
<h4 id="242-新建本地分支"><a class="markdownIt-Anchor" href="#242-新建本地分支"></a> 2.4.2 新建本地分支</h4>
<p>新建一个远程和本地都不存在的分支方式，和切换分支区别不大，只需要在 <code>git checkout</code> 分支名 中间加入参数 <code>-b</code> 即可。通过这种方式，创建的分支结构和内容会与当前所在的分支一模一样，也就是说，它其实就是复制了当前的分支，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>在提示中，同样可以看到会告诉你切换分支成功，但没有提示你对应远程的分支名，因为远程现在还不存在这个分支。所以你此时如果使用 <code>git push</code> 是不能直接推送的，需要在第一次推送的时候指定远程分支名，参考命令如下图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="25合并分支"><a class="markdownIt-Anchor" href="#25合并分支"></a> 2.5合并分支</h3>
<p>假设我们现在有三个分支，分别是:master生产环境、develop开发环境、test bug 修复分支。现在我在 test 分支中修复了 BUG，需要发布到线上生产服务器上，那么我们就可以通过合并分支的方式将test分支的代码合并到 master 分支中去。</p>
<h4 id="251-合并代码"><a class="markdownIt-Anchor" href="#251-合并代码"></a> 2.5.1 合并代码</h4>
<p>合并的时候， Git 会对比两个分支代码的差异，当 test 分支处于比较新的状态时候，Git 会将 test 分支的代码和提交记录复制到 master 分支中来，合并代码的参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="252-查看合并记录"><a class="markdownIt-Anchor" href="#252-查看合并记录"></a> 2.5.2 查看合并记录</h4>
<p>在代码合并之后，可以通过 <code>git log</code> 方式查看到合并记录，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h4 id="253-删除分支"><a class="markdownIt-Anchor" href="#253-删除分支"></a> 2.5.3  删除分支</h4>
<p>一般用来修复 BUG 的分支，我们可以把它当做是一个临时分支，当合并到 master 之后，就可以删除掉它了，这样可以减少 Git 仓库的体积。删除分支有两种方式，普通删除和强制删除。</p>
<h5 id="2531-普通删除"><a class="markdownIt-Anchor" href="#2531-普通删除"></a> 2.5.3.1 普通删除</h5>
<p>Git 中删除分支的命令为<code>git branch -d</code> 分支名，其中参数-d代表的是普通删除。一般情况下，删除使用普通删除即可。普通删除相对来说比较安全，避免造成数据丢失的情况，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h5 id="2532-强制删除"><a class="markdownIt-Anchor" href="#2532-强制删除"></a> 2.5.3.2 强制删除</h5>
<p>在极少数情况下你可能会遇到普通删除无法将分支删除的情况，这个时候你可以将-d替换成-D，这样就可以进行强制删除，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT篇---3.如何把修改后的代码提交到远程仓库(Windows系统)</title>
    <url>/2020/08/31/git3/</url>
    <content><![CDATA[<h6 id="将代码提交到远程仓库中其实通常只需要两条命令即可首先是提交到本地然后再将本地的记录推送到远端-但在实际工作中为了防止本地仓库和远程仓库出现冲突一般先让把远程代码同步到本地代码让本地代码保持最新然后再提交改动到本地最后进行推送"><a class="markdownIt-Anchor" href="#将代码提交到远程仓库中其实通常只需要两条命令即可首先是提交到本地然后再将本地的记录推送到远端-但在实际工作中为了防止本地仓库和远程仓库出现冲突一般先让把远程代码同步到本地代码让本地代码保持最新然后再提交改动到本地最后进行推送"></a> 将代码提交到远程仓库中，其实通常只需要两条命令即可，首先是提交到本地，然后再将本地的记录推送到远端。但在实际工作中，为了防止本地仓库和远程仓库出现冲突，一般先让把远程代码同步到本地代码，让本地代码保持最新，然后再提交改动到本地，最后进行推送。</h6>
<a id="more"></a>
<h2 id="1同步远程代码"><a class="markdownIt-Anchor" href="#1同步远程代码"></a> 1.同步远程代码</h2>
<p>一个远程仓库有可能有多人有权限推送，所以存在远程代码比你本地仓库更新，因此在提交代码之前需要先拉取服务器代码，让本地仓库保持最新的版本记录；这样做的目的是为了防止当你提交代码之后，推送到远端出现代码冲突问题，拉取远程代码参考命令如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull </span><br></pre></td></tr></table></figure>
<h2 id="2检查改动文件"><a class="markdownIt-Anchor" href="#2检查改动文件"></a> 2.检查改动文件</h2>
<p>当远端最新的代码拉下来之后，我们最好（非必须，建议每次提交前检查）通过git status命令检查一下有哪些文件被改动了，参考命令如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>在终端执行完命令之后，有删除的、有添加的、也有修改内容的</p>
<ul>
<li>Untracked: 未跟踪,一般为新增文件，此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作.</li>
<li>deleted： 文件已删除，本地删除，服务器上还没有删除.</li>
<li>renamed：文件名称被改变<br />
如果发现无意中编辑了某一个文件，但实际上并不想改变它，这里可以使用git checkout 文件名来撤销更改，参考命令如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout README.md</span><br></pre></td></tr></table></figure>
<p>撤销后，再次使用<code>git status</code>进行查看变动</p>
<h2 id="3添加文件到缓存"><a class="markdownIt-Anchor" href="#3添加文件到缓存"></a> 3.添加文件到缓存</h2>
<p>通过检查并将不需要改动的代码恢复后，就可以开始将需要提交的文件添加到暂存区中，添加文件到暂存区可以指定添加文件或目录，或者一次性添加全部改动到缓存。<br />
先来看看提交指定文件或目录至缓存的格式，参考命令如下：<code>git add index.php</code><br />
也可以使用刚才的命令将 app目录,提交到缓存中去，参考命令如下：<code>git add app</code><br />
如果一次性添加所有文件，那么可以把命令这样写<code>git add .</code>(记住有点)</p>
<h2 id="4-提交代码"><a class="markdownIt-Anchor" href="#4-提交代码"></a> 4. 提交代码</h2>
<p>当你将所需要提交的代码都添加到缓存区域后，接下来就可以将代码提交到本地仓库中，参考命令如下所示 ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit . -m “这是备注信息”</span><br></pre></td></tr></table></figure>
<h2 id="5推送代码"><a class="markdownIt-Anchor" href="#5推送代码"></a> 5.推送代码</h2>
<p>当代码提交之后，在本地的工作就已经完成了，此时为了让其他人拉取你的代码，通常还需要将代码推送到远程仓库，这里我告诉大家最简单的方式，参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT篇---2.拉取远端代码以及配置ssh公钥（包含码云和github配置）（Windows系统）</title>
    <url>/2020/08/31/git2/</url>
    <content><![CDATA[<h2 id="拉取远端代码使用git命令下载远程仓库到本地"><a class="markdownIt-Anchor" href="#拉取远端代码使用git命令下载远程仓库到本地"></a> 拉取远端代码：使用Git命令下载远程仓库到本地</h2>
<a id="more"></a>
<h3 id="1-创建远程代码仓库"><a class="markdownIt-Anchor" href="#1-创建远程代码仓库"></a> 1. 创建远程代码仓库</h3>
<h4 id="11-在github或者码云注册账号并且创建仓库实例github"><a class="markdownIt-Anchor" href="#11-在github或者码云注册账号并且创建仓库实例github"></a> 1.1 在github或者码云注册账号并且创建仓库（实例github）</h4>
<p>注册过程不再演示</p>
<h5 id="111-点击new即可在这里插入图片描述"><a class="markdownIt-Anchor" href="#111-点击new即可在这里插入图片描述"></a> 1.1.1 点击new即可<img src="https://img-blog.csdnimg.cn/20200831165911624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></h5>
<h5 id="112-输入仓库名称及介绍点击确定即可在这里插入图片描述"><a class="markdownIt-Anchor" href="#112-输入仓库名称及介绍点击确定即可在这里插入图片描述"></a> 1.1.2 输入仓库名称及介绍点击确定即可<img src="https://img-blog.csdnimg.cn/20200831170006169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></h5>
<p>创建好之后 复制地址<br />
<img src="https://img-blog.csdnimg.cn/20200831170411722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>建立远程仓库之后，默认里面有几个文件；接下来我们通过 git 的命令将远程仓库拉取到本地，一般会提供 HTTP 协议和 SSH 两种协议提供管理，两种协议所使用的鉴权方式不同，下面我们将两种方法都实践一次；</p>
<h3 id="2-https获取远程仓库"><a class="markdownIt-Anchor" href="#2-https获取远程仓库"></a> 2.  HTTP(S)获取远程仓库</h3>
<h4 id="21-首次拉取"><a class="markdownIt-Anchor" href="#21-首次拉取"></a> 2.1 首次拉取</h4>
<p>HTTP 协议首次拉取代码的命令格式如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 版本库地址	[本地文件夹名称]</span><br></pre></td></tr></table></figure>
<p>假设我需要把刚才新建的仓库代码拉取到本地,并且本地的文件夹名称叫gitText(也可以不指定本地文件夹名称，默认名字为远程仓库名字)，参考命令如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/highfish920/text-git.git gitText</span><br></pre></td></tr></table></figure>
<p>结果：<img src="https://img-blog.csdnimg.cn/20200831170810727.png#pic_center" alt="在这里插入图片描述" /><br />
这里警告是指克隆了一个空的存储库（因为新建的没有东西嘛）但是本地已经有了这个文件夹<br />
<img src="https://img-blog.csdnimg.cn/20200831170919893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
如果要求输入用户名密码才可以拉取的话输入用户名密码即可</p>
<h4 id="22-更新代码"><a class="markdownIt-Anchor" href="#22-更新代码"></a> 2.2 更新代码</h4>
<p>假设远程代码有变更，你想把本地代码更新时，可以在本地的版本库目录下通过git pull命令更新，不需要再指定远程地址，参考命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h4 id="23-临时记住密码"><a class="markdownIt-Anchor" href="#23-临时记住密码"></a> 2.3 临时记住密码</h4>
<p>如果你不想每次都输入 git 的认证信息，可以设置缓存认证数据，默认记住 15 分钟，如下命令所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config –-global credential.helper cache</span><br></pre></td></tr></table></figure>
<p>如果你想缓存更长时间，也可以指定缓存时长，比如下面是自定义配置记住 1 小时的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config credential.helper ‘cache –timeout=3600’</span><br></pre></td></tr></table></figure>
<h4 id="25-永久记住密码"><a class="markdownIt-Anchor" href="#25-永久记住密码"></a> 2.5 永久记住密码</h4>
<p>如果你不想每次提交代码都要输入用户名密码，也可以让 Git 永久记住密码，参考命令如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<p>命令执行完毕之后，会在当前用户主目录的.gitconfig文件中新增一项配置，配置如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure>
<p>在上面的命令中，如果没有–global，则会在当前项目下的.git/config文件增加配置</p>
<p>从这里可以看出， git 永久记住密码其实是根据配置文件所决定，所以你也可以直接复制上面生成的配置到配置文件中。</p>
<h3 id="3ssh拉取"><a class="markdownIt-Anchor" href="#3ssh拉取"></a> 3.SSH拉取</h3>
<h4 id="311-拉取代码"><a class="markdownIt-Anchor" href="#311-拉取代码"></a> 3.1.1 拉取代码</h4>
<p>现在我们再来看看SSH方式，相比HTTP(S)来说更加安全,因为SSH方式使用的是非对称加密，采用公钥与私钥的方式，不过相对来说配置起来会麻烦一些；好处是一次配置之后，后续不需要每次都进行认证，也更加安全。<br />
ssh 方式首次拉取代码的命令没有什么变化，相比来说只是远程地址有变化，如下命令所示<br />
<img src="https://img-blog.csdnimg.cn/20200831171337935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:highfish920/text-git.git  git-text-ssh</span><br></pre></td></tr></table></figure>
<p>可以看到成功了<br />
<img src="https://img-blog.csdnimg.cn/20200831171505877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<h4 id="312-创建一个ssh-keygithub"><a class="markdownIt-Anchor" href="#312-创建一个ssh-keygithub"></a> 3.1.2 创建一个ssh key（github）</h4>
<p><strong>如果没有拉取成功的原因是没有配置公钥与私钥的话</strong><br />
通过 ssh 协议拉取代码首先要保证当前用户的主目录存在一个.ssh的文件夹，并且里面已经存在私钥文件，如果没有的话我们可以通过<code>ssh-keygen</code>，生成一份公钥与私钥，如下命令所示<br />
直接回车，输入y，接着回车<br />
<img src="https://img-blog.csdnimg.cn/20200831171900256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
其中这两个地址分别保存了秘钥与公钥<br />
<img src="https://img-blog.csdnimg.cn/20200831172433386.png#pic_center" alt="在这里插入图片描述" /><br />
接下来复制公钥（重新生成之后会覆盖原先的公钥，需要github和码云重新配置）<br />
打开github，点击头像下面的settings<br />
<img src="https://img-blog.csdnimg.cn/202008311727484.png#pic_center" alt="在这里插入图片描述" /><br />
然后点击SSH那个，点击new GPG key 粘贴公钥即可，其中的Title随便写（这里原先配置过，所以有一个）<br />
<img src="https://img-blog.csdnimg.cn/20200831172955638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
配置成功后在尝试拉取代码即可</p>
<h4 id="313-创建一个ssh-key码云"><a class="markdownIt-Anchor" href="#313-创建一个ssh-key码云"></a> 3.1.3 创建一个ssh key（码云）</h4>
<p>当确认公钥和私钥生成完毕之后，我们还需要将公钥放到远程的 git 仓库中去，在码云的版本库中，个人设置》安全》ssh公钥，在管理页面的左侧菜单中有一个添加公钥的选项，我们将上面的公钥内容复制进去即可</p>
<h4 id="314-更新代码"><a class="markdownIt-Anchor" href="#314-更新代码"></a> 3.1.4 更新代码</h4>
<p>ssh 方式更新代码命令和上面的 http 方式拉取代码命令一致，同样需要在 git-text-ssh目录下执行命令：git pull，然后可以看到git成功的拉取到了代码<br />
本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT篇---1.安装GIt以及GIT基本认识和配置(Windows系统)</title>
    <url>/2020/08/31/git1/</url>
    <content><![CDATA[<h2 id="1-安装-git"><a class="markdownIt-Anchor" href="#1-安装-git"></a> 1. 安装 Git</h2>
<a id="more"></a>
<p>在 Windows 系统中安装Git非常简单，只需要下载Git的安装包，然后安装引导点击安装即可：</p>
<p>Git下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br />
下载完安装包之后，双击 EXE 安装包，一直点击Next安装即可在安装完成之后，会在你的右键菜单栏中增加一个Git的选项，你可以在电脑桌面点击鼠标右键，会看到多出两个菜单，如下图所示：<br />
<img src="https://img-blog.csdnimg.cn/20200831162657644.png#pic_center" alt="在这里插入图片描述" /><br />
当你点击Git bash Here菜单之后，可以看到一个终端窗口，在终端里面输入命令git --version，如果可以看到 git 的版本信息，则说明安装成功，如下图所示：<br />
<img src="https://img-blog.csdnimg.cn/20200831165049265.png#pic_center" alt="在这里插入图片描述" /></p>
<h2 id="2本地创建一个-git-仓库"><a class="markdownIt-Anchor" href="#2本地创建一个-git-仓库"></a> 2.本地创建一个 Git 仓库</h2>
<ol>
<li>创建本地文件夹text</li>
<li>进入本地文件夹目录终端输入 <code>git init</code> 初始化仓库，初始化后，会发现文件夹里面多出了一个.git的文件<br />
<img src="https://img-blog.csdnimg.cn/20200831163313603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li>
<li>简单认识.git</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200831163522222.png#pic_center" alt="在这里插入图片描述" /></p>
<ul>
<li>hooks 目录包含客户端或服务端的钩子脚本</li>
<li>objects 目录存储所有数据内容</li>
<li>info 目录包含一个全局性排除文件</li>
<li>refs 目录存储分支的提交对象的指针</li>
<li>description用来显示对仓库的描述信息</li>
<li>HEAD 文件指示目前被检出的分支</li>
<li>config 文件包含项目特有的配置选项</li>
</ul>
<ol start="4">
<li>查看配置信息<br />
在设置昵称和邮箱之前，可以先检查一下之前有没有配置过昵称和邮箱<br />
查看昵称的命令如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure>
<p>查看邮箱的命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200831163906797.png#pic_center" alt="在这里插入图片描述" /></p>
<p>4.1 设置配置信息<br />
如果执行上面的命令没有返回相应的昵称和邮箱，说明你还没有配置昵称和邮箱。那么就需要进行配置<br />
配置昵称的命令参考如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的昵称&quot;</span></span><br></pre></td></tr></table></figure>
<p>配置邮箱的命令参考如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>4.2 修改配置信息<br />
在配置中如果不小心配置错了，或者后面想修改配置的时候，是不能通过重复执行上面的设置昵称命令，来修改昵称的，邮箱修改同理。如果你多次设置昵称，它会在命令执行后提示你无法重复配置或者可能不给你提示，但是这种情况会导致一个 key 配置了多个 value 的问题。</p>
<p><strong>介绍两种方法， 第一种是通过命令行，第二种是通过修改配置文件。</strong></p>
<p>4.2.1 <strong>命令行修改配置</strong></p>
<p>通过命令行修改的方式比较简单，直接执行以下的命令即可<br />
修改昵称参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --replace-all user.name <span class="string">&quot;your user name&quot;</span></span><br></pre></td></tr></table></figure>
<p>修改邮箱地址参考命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --replace-all user.email<span class="string">&quot;your user email&quot;</span></span><br></pre></td></tr></table></figure>
<p>4.2.2 <strong>修改配置文件</strong></p>
<p>Windows 系统位于用户主目录下，假设你当前的用户是administrator，那么对应的配置文件的路径应该是 C:\Users\administrator.gitconfig，可以直接使用记事本修改里边的 name 或者 email。</p>
<p>如果之前已经配置过昵称和邮箱的情况下，当使用记事本打开配置文件之后，可以看到如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">        name = daxia</span><br><span class="line">        email = 78778443@qq.com</span><br></pre></td></tr></table></figure>
<p>在如果有重复的 name 或 email，可以将其删掉，只剩下一个就好。修改完，通过 git bash 输入 git config –list可以查看是否修改成功了。<br />
本文整理自 <a href="http://www.imooc.com/read/51">http://www.imooc.com/read/51</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>单页面应用有什么SEO方案</title>
    <url>/2020/08/30/seo/</url>
    <content><![CDATA[<h2 id="单页面应用有什么seo方案"><a class="markdownIt-Anchor" href="#单页面应用有什么seo方案"></a> 单页面应用有什么SEO方案</h2>
<a id="more"></a>
<p>1	前端要采用history模式（HTML5 History API），一般用来写单页应用的框架都有这个模式。<br />
2	要用后端做一套页面，内容和对应的前端页面一模一样，即所谓静态化，我用的sails框架即可实现这一点，主流的如Node.js的express框架也可以，php应该也行。<br />
3	必须用nginx做代理跳转，将搜索引擎识别出后流量引到后端的端口上，看到预先渲染给搜索引擎看的页面，还有history模式自带的404问题也需要在nginx里将404转index.html或者rewrite才可以<br />
<strong>原因：</strong> 较之于传统页面，单页应用需要先下载框架（数据 / 模板），然后才能开始加载数据<br />
方案：<br />
1	服务器端渲染首屏（SSR基于vue的服务端下载）<br />
2	让服务端把首屏的数据渲染在页面上<br />
3	进行基本的css 模板 js的编译合并<br />
4	减少请求次数，使用gulp工具，把 css 打包成一个文件, js打包成一个文件, 模板打包成一个js文件($templateCache) 可以和js 文件打包成一起（促使模板JS文件和JS文件一次性请求）<br />
5	代码分块，如果首屏不需要的块，就不用加载了<br />
6	路由组件懒加载。当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样更加高效。<br />
7	如果有大量图片使用懒加载</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优化dom操作的性能</title>
    <url>/2020/08/30/dom%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="如何优化dom操作的性能"><a class="markdownIt-Anchor" href="#如何优化dom操作的性能"></a> 如何优化dom操作的性能</h2>
<a id="more"></a>
<p>1	查找元素的优化。因为ID是唯一的，也有原始的方法，因此使用ID查找元素是最快的，其次的是根据类和类型查找元素，通过属性查找元素是最慢的，因此应该尽可能的通过ID或者类来查找元素，避免通过属性来查找元素<br />
2	减少访问和改变DOM元素，包括添加，修改，删除DOM<br />
改变DOM就会引起浏览器渲染，而渲染是相当慢的，因此应该避免不必要的渲染</p>
<p>3	减少改变DOM的样式类等<br />
改变DOM元素的样式，类也会导致浏览器渲染，因此也应该减少不必要的操作<br />
4	批量修改DOM时从文档流中摘除该元素 ，对其应用多重改变 ，将元素带回文档中 ， 这样可以最小化重绘和重排版 。<br />
具体方法: 1 隐藏元素，进行修改，然后再显示它。 2将原始元素拷贝到一个脱离文档的节点中，修改副本，然后覆盖原始元素。<br />
5	减少iframe    iframe需要消耗大量的时间，并阻塞下载，建议少用<br />
6	样式放在header中，脚本放在关闭标签</body>之前样式放在header中，可以加快渲染，脚本放在关闭标签</body>之前可以加快下载速度，不免阻塞下载。<br />
7	使用事件委托，减少绑定事件的数量<br />
8	多次访问同一DOM，应该用局部变量缓存该DOM</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN的用法，CDN</title>
    <url>/2020/08/30/cdn/</url>
    <content><![CDATA[<h2 id="cdn"><a class="markdownIt-Anchor" href="#cdn"></a> CDN</h2>
<a id="more"></a>
<p>CDN即内容分发网络。CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求<br />
CDN的使用，以腾讯CDN为例：<br />
1	登录腾讯云CDN，选择“接入管理”，点击“添加域名”添加我们需要加速的域。<br />
2	进入“添加域名”界面，在域名那里填好你要加速的域名。源站IP那里可以填自己服务器的IP。如果你用的是虚拟主机，可以填空间商给你的域名。配置完成后点下一步！<br />
3	进入“基本配置”界面，填写相关要求，在缓存时间那里，腾讯CDN默认的是将你所有的文件缓存30天，你可以根据自身情况修改天数。填写好后点击下一步。<br />
4	下一步也差不多，填写相关要求，没问题点击提交就好。</p>
<p>CDN的适用场景：<br />
解决因分布、带宽、服务器性能带来的访问延迟问题,适用于网站站点/应用加速、点播、直播、视音频点播、大文件下载分发加速、移动应用加速等场景</p>
<h2 id="cdn的用法"><a class="markdownIt-Anchor" href="#cdn的用法"></a> CDN的用法</h2>
<p>1	把css放在head中加载，这个能让页面更早的开始渲染。避免把css放在页面尾部，否则可能会出现闪屏，如果css加载的很慢，DOM结构先出来，css后出来，然后页面样式突然发生变化，就造成了闪屏。<br />
2	把js放在body末尾加载，因为js它本身会阻塞HTML的解析以及css的渲染。<br />
3	不要使用css的表达式，css的表达式一方面是兼容性问题，虽然看起来比较强大，但是实际性能开销很大，因为它实际的执行频率是远远超出预期的，如果使用了css的表达式，可能导致页面卡顿。</p>
<p>4	用外链的方式引用css和js，可以有效的减少HTML的体积，并且外链了之后，css和js作为静态资源可以给他设置合适的缓存的响应头；能够合理的利用浏览器的缓存。<br />
5	压缩js和css，在生产环境里面删除这一类文件不必要的注释、空白，并且对js进行变量名压缩，混淆压缩，对css进行属性的合并，然后进行选择符的合并。<br />
6	不重复加载js，因为在IE里面，还是会有多个请求，不能发挥缓存优势，并且你重复加载js，意味着要更长的js执行时间。<br />
7	让Ajax请求可缓存，GZIP、内容压缩都可以适用。<br />
8	用GET方式发起Ajax请求，因为GET方式可以缓存，如果是获取信息的，那么GET方式是更语义化的。<br />
9	组件延迟加载，保障页面关键的静态资源优先加载，因为并发数限制，还有一些延迟加载的典型手段叫做“lazyload”。<br />
10	减少DOM节点数，DOM节点这个规则是非常容易理解，就是如果你的DOM结构非常的复杂，那么浏览器在解析的时候，进行布局、渲染时计算量更大，那么少一点的话，浏览器的开销会少一些，渲染布局的速度就会快一些。<br />
11	避免在页面中使用frame类（包括iframe和frameset），因为iframe它会阻塞父文档的onload，即使它是一个空白的也会比较耗时。<br />
12	要减少COOKIE的体积，因为COOKIE在每一次请求，就是跟主文档相关的，只要是同域的，COOKIE的全部内容都可以带上。<br />
13	使用无cookie域名加载静态资源，可以减少静态资源加载时的网络传输量，静态资源加载通常是不需要cookie的。<br />
14	减少js中的DOM访问，还有对于你查找到的元素，缓存在js的变量中，后面就不需要在去查找DOM树了，还有节点增加是合理利用DocumentFragment，然后在把DocumentFragment放在实际的DOM树里面，然后还有一个是不要用js去频繁修改样式。<br />
15	使用更多的事件监听机制，基于事件冒泡的委托机制，你可以有效减少绑定的数量。<br />
16	使用常见的图片优化手段，对于代码来说，图片的体积很大，常用的图片压缩工具有“PNGCrush”“JPEGTRAN”“PNGQUANT”。<br />
17	不要在HTML中缩放图片，你实际上在页面上用到多大图片，那你就提供适当尺寸即可，不然它只会徒增渲染的开销。<br />
18	不要把图片SRC置空，因为在主文档的浏览器里面都会引发额外的请求。<br />
19	任何资源尽量在25k以内，因为iPhone无法缓存25k以上的资源。<br />
20	预渲染，预渲染比预下载更进一步，不仅仅下载页面，而且还会预先将它渲染出来，目前在Chrome（9.0.597.0）中有实现，不过需要在about:flags中将’Web Page Prerendering’开启。<br />
21	DNS优化；CDN优化；http优化；减少域名解析时间；增多域名提高并发</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据结构：（数组、 对列、 链表、堆、二叉树、嘻哈表等等），8种排序算法，原理，以及适用的场景和复杂度，费波拉切数列的实现方法</title>
    <url>/2020/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="数组数组是最最基本的数据结构很多语言都内置支持数组-数组是使用一块连续的内存空间保存数据保存的数据的个数在分配内存的时候就是确定的-如图所示"><a class="markdownIt-Anchor" href="#数组数组是最最基本的数据结构很多语言都内置支持数组-数组是使用一块连续的内存空间保存数据保存的数据的个数在分配内存的时候就是确定的-如图所示"></a> 数组：数组是最最基本的数据结构，很多语言都内置支持数组。数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。（如图所示）</h2>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200830163134546.png#pic_center" alt="在这里插入图片描述" /></p>
<p>链表：存储的数据在地址空间上可连续，可不连续，链表中的每一个节点都包括数据和指向下一个地址的指针，查找数据的时间复杂度为O(n)，方便数据的增删。<br />
<img src="https://img-blog.csdnimg.cn/20200830163128881.png#pic_center" alt="在这里插入图片描述" /></p>
<p>栈：栈是一种先入后出的逻辑结构，每次加入新的元素和拿走元素都在顶部操作。<br />
<img src="https://img-blog.csdnimg.cn/20200830163122153.png#pic_center" alt="在这里插入图片描述" /></p>
<p>对列：是一种先入后出的逻辑结构，对于元素的操作分别在队头和队尾，元素的插入在队尾，元素的删除在队头。<br />
<img src="https://img-blog.csdnimg.cn/2020083016311541.png#pic_center" alt="在这里插入图片描述" /></p>
<p>二叉树：每个节点至多只有两个子树的结构，在父节点中有指向左右子树的指针。<br />
二叉树的 先序遍历：根–左–右。中序遍历：左–根–右。后序遍历：左–右–根。<br />
查找二叉树：左子树的值小于根节点的值，右子树的值大于根节点的值，在插入数据时，从根节点开始往下比较，小于比较值则放在左边，大于比较值放在右边。插入一个值的时间复杂度是O(logn)。<br />
平衡二叉树：左右子树的高度差的绝对值不超过1。<br />
<img src="https://img-blog.csdnimg.cn/20200830163108278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<h2 id="8种排序算法原理以及适用的场景和复杂度"><a class="markdownIt-Anchor" href="#8种排序算法原理以及适用的场景和复杂度"></a> 8种排序算法，原理，以及适用的场景和复杂度</h2>
<p><img src="https://img-blog.csdnimg.cn/20200830163305556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
这里就体现2个常问的问题：冒泡排序的原理：<br />
S1：从待排序序列的起始位置开始，从前往后依次比较各个位置和其后一位置的大小并执行S2。<br />
S2：如果当前位置的值大于其后一位置的值，就把他俩的值交换（完成一次全序列比较后，序列最后位置的值即此序列最大值，所以其不需要再参与冒泡）。<br />
S3：将序列的最后位置从待排序序列中移除。若移除后的待排序序列不为空则继续执行S1，否则冒泡结束。<br />
在举个栗子<br />
<img src="https://img-blog.csdnimg.cn/20200830163319253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
快速排序：快速排序是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此实现整个数据变成有序序列<br />
在举个栗子：<br />
<img src="https://img-blog.csdnimg.cn/20200830163333141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<h2 id="费波拉切数列的实现方法"><a class="markdownIt-Anchor" href="#费波拉切数列的实现方法"></a> 费波拉切数列的实现方法</h2>
<p><img src="https://img-blog.csdnimg.cn/20200830163357899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue，Angular，jquery--使用框架，zepto和jquery是什么关系，jquery源码如何实现选择器，为什么$取得的对象要设计成数组的形式，jquery如何绑定事件，有几种类型和区别，MVVM,MVC,MVP，Vue和Angular的双向数据绑定原理，Vue和Angular的组件通信以及路由原理？Vue和Angular的组件通信以及路由原理？</title>
    <url>/2020/08/29/%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="使用框架"><a class="markdownIt-Anchor" href="#使用框架"></a> 使用框架</h2>
<a id="more"></a>
<p>UI框架	bootstrap、Mui、layui<br />
js框架	vue、angular、react</p>
<h2 id="zepto和jquery是什么关系"><a class="markdownIt-Anchor" href="#zepto和jquery是什么关系"></a> zepto和jquery是什么关系</h2>
<p>二者都是js库，zepto是jQuery的轻量级替代品，它与jquery有着类似的api，zepto主要是用在移动端，不支持IE浏览器，jquery主要用在PC端，jQuery 版本 2 以上不支持 IE6，7，8 浏览器</p>
<h2 id="jquery源码如何实现选择器为什么取得的对象要设计成数组的形式"><a class="markdownIt-Anchor" href="#jquery源码如何实现选择器为什么取得的对象要设计成数组的形式"></a> jquery源码如何实现选择器，为什么$取得的对象要设计成数组的形式</h2>
<p>jquery内部采用了一种“类数组对象”的方式作为存储结构，既可以像对象一样处理jQuery操作，也可以像数组一样使用push、pop、shift、sort、each、map等类数组的方法操作jquery</p>
<h2 id="jquery如何绑定事件有几种类型和区别"><a class="markdownIt-Anchor" href="#jquery如何绑定事件有几种类型和区别"></a> jquery如何绑定事件，有几种类型和区别</h2>
<p>jquery绑定事件的方法分别是：bind(),live(),delegate()和on()，<br />
像bind(),live(),delegate(),随着jquery版本的更新，已经被移除，注意：bind()是在3.0版本之后被移除的，现在用的最多的是on()，on()既可以绑定单事件，也可以绑定多事件，还可以进行事件委托<br />
区别就是：bind()的事件绑定是只对当前页面选中的元素有效，对动态创建的元素bind()事件，是没有办法达到效果的，而其余三个可以</p>
<h2 id="mvvmmvcmvp"><a class="markdownIt-Anchor" href="#mvvmmvcmvp"></a> MVVM,MVC,MVP</h2>
<p>MVC：先介绍M:Model(模型)，V:View(视图) ，C：Controller（控制器),View层是展示html页面的，Controller层是业务逻辑，Model层是数据保存，视图的改变会通过控制器要求数据层改变状态，然后反馈给视图层。<br />
MVVM：是将Controller改为VM，是Model-View-ViewModel的缩写，视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的&quot;View&quot;上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。<br />
MVP：MVP模式是将Controller改为Presenter，View和Model之间不发生联系，都通过Presenter传递，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller</p>
<h2 id="vue和angular的双向数据绑定原理"><a class="markdownIt-Anchor" href="#vue和angular的双向数据绑定原理"></a> Vue和Angular的双向数据绑定原理</h2>
<p>Vue 双向数据绑定的原理：<br />
vue将普通的对象的属性通过Object.defineProperty转换为ES5特性之一的 getter/setter，模板中每个指令/数据绑定都有一个对应的 watcher 对象, 当修改对象值的时，首先会触发属性的setter，在setter被调用时，会触发 watcher 重新计算 ，也就会导致它的关联指令更新 DOM<br />
<img src="https://img-blog.csdnimg.cn/2020082916492742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>Angular双向数据绑定的原理：<br />
angular.js是通过脏值监测的方式查看数据是否变更，最简单的方法是通过setInterval()定时循环检测数据变动</p>
<h2 id="vue和angular的组件通信以及路由原理"><a class="markdownIt-Anchor" href="#vue和angular的组件通信以及路由原理"></a> Vue和Angular的组件通信以及路由原理？</h2>
<p>vue得组件通信，</p>
<ol>
<li>父组件传递数据给子组件<br />
举个栗子<br />
<img src="https://img-blog.csdnimg.cn/20200829165250837.png#pic_center" alt="在这里插入图片描述" /></li>
</ol>
<p>子组件通过props来接收数据:<br />
方式1：<br />
props: [‘childMsg’]<br />
子组件与父组件通信</p>
<p><img src="https://img-blog.csdnimg.cn/20200829165259558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200829165305575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/2020082916531122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>Angular组件间通信<br />
Angular组件之间的通信方式分为三种：<br />
1）	父组件向子组件通信（输入属性）分为两步：<br />
1、在子组件上定义自己要接受父组件输入的参数：<br />
<img src="https://img-blog.csdnimg.cn/20200829165325179.png#pic_center" alt="在这里插入图片描述" /></p>
<pre><code>             2、在父组件的HTML模板中声明要输入的数据：
             ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829165340141.png#pic_center)

    子
</code></pre>
<p>2）	子组件向父组件通信（输出属性）<br />
1、在子组件中设置要输出的类型：<br />
<img src="https://img-blog.csdnimg.cn/20200829165346505.png#pic_center" alt="在这里插入图片描述" /></p>
<pre><code>        2、在html模板中设置事件：
    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829165403486.png#pic_center)
</code></pre>
<p>3、 在父组件的控制器中接收输出属性<br />
<img src="https://img-blog.csdnimg.cn/20200829165408915.png#pic_center" alt="在这里插入图片描述" /></p>
<pre><code> 3) 使用中间人模式通信
        所谓中间人模式就是：当A =》 C 通信时，先将A =》B，B=》C, 
        B就是所谓中间人模式； 
        按照情况一般分为两种： 
        1、兄弟组件通信 
           这里我们选择父组件做为中间人，先是使用输出属性，再使用输入属性就OK了 
        2、非兄弟组件通信 
           选择一个依赖注入service做为中间人，然后进行通信。
</code></pre>
]]></content>
      <categories>
        <category>框架-类库</category>
      </categories>
      <tags>
        <tag>框架-类库</tag>
      </tags>
  </entry>
  <entry>
    <title>java之-深拷贝、浅拷贝</title>
    <url>/2020/08/28/java-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h2 id="java之-深拷贝-浅拷贝"><a class="markdownIt-Anchor" href="#java之-深拷贝-浅拷贝"></a> java之-深拷贝、浅拷贝</h2>
<a id="more"></a>
<p>文章转载自CodeSheep羊叔<br />
<a href="https://github.com/hansonwang99/JavaCollection">https://github.com/hansonwang99/JavaCollection</a></p>
<p>为了便于下文的讲述和举例，我们这里先定义两个类：Student和Major，分别表示「学生」以及「所学的专业」，二者是包含关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 学生的所学专业</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Major</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String majorName; <span class="comment">// 专业名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> majorId;     <span class="comment">// 专业代号</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学生</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;      <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Major major;  <span class="comment">// 所学专业</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200828172327769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>赋值 vs 浅拷贝 vs 深拷贝</p>
<p>对象赋值<br />
赋值是日常编程过程中最常见的操作，最简单的比如：<br />
Student codeSheep = new Student();<br />
Student codePig = codeSheep;<br />
严格来说，这种不能算是对象拷贝，因为拷贝的仅仅只是引用关系，并没有生成新的实际对象：<br />
<img src="https://img-blog.csdnimg.cn/2020082817233960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>浅拷贝<br />
浅拷贝属于对象克隆方式的一种，重要的特性体现在这个 「浅」 字上。<br />
比如我们试图通过studen1实例，拷贝得到student2，如果是浅拷贝这种方式，大致模型可以示意成如下所示的样子：<br />
<img src="https://img-blog.csdnimg.cn/20200828172351451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>很明显，值类型的字段会复制一份，而引用类型的字段拷贝的仅仅是引用地址，而该引用地址指向的实际对象空间其实只有一份。<br />
一图胜前言，我想上面这个图已经表现得很清楚了。<br />
深拷贝<br />
深拷贝相较于上面所示的浅拷贝，除了值类型字段会复制一份，引用类型字段所指向的对象，会在内存中也创建一个副本，就像这个样子：<br />
<img src="https://img-blog.csdnimg.cn/2020082817242772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>原理很清楚明了，下面来看看具体的代码实现吧。<br />
浅拷贝代码实现</p>
<p>还以上文的例子来讲，我想通过student1拷贝得到student2，浅拷贝的典型实现方式是：让被复制对象的类实现Cloneable接口，并重写clone()方法即可。<br />
以上面的Student类拷贝为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;      <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Major major;  <span class="comment">// 所学专业</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们写个测试代码，一试便知：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Major m = <span class="keyword">new</span> Major(<span class="string">&quot;计算机科学与技术&quot;</span>,<span class="number">666666</span>);</span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student( <span class="string">&quot;CodeSheep&quot;</span>, <span class="number">18</span>, m );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 由 student1 拷贝得到 student2</span></span><br><span class="line">        Student student2 = (Student) student1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println( student1 == student2 );</span><br><span class="line">        System.out.println( student1 );</span><br><span class="line">        System.out.println( student2 );</span><br><span class="line">        System.out.println( <span class="string">&quot;\n&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改student1的值类型字段</span></span><br><span class="line">        student1.setAge( <span class="number">35</span> );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改student1的引用类型字段</span></span><br><span class="line">        m.setMajorName( <span class="string">&quot;电子信息工程&quot;</span> );</span><br><span class="line">        m.setMajorId( <span class="number">888888</span> );</span><br><span class="line"></span><br><span class="line">        System.out.println( student1 );</span><br><span class="line">        System.out.println( student2 );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行得到如下结果：<br />
<img src="https://img-blog.csdnimg.cn/20200828172454426.png#pic_center" alt="在这里插入图片描述" /></p>
<p>从结果可以看出：<br />
student1==student2打印false，说明clone()方法的确克隆出了一个新对象；<br />
修改值类型字段并不影响克隆出来的新对象，符合预期；<br />
而修改了student1内部的引用对象，克隆对象student2也受到了波及，说明内部还是关联在一起的<br />
深拷贝代码实现</p>
<p>深度遍历式拷贝<br />
虽然clone()方法可以完成对象的拷贝工作，但是注意：clone()方法默认是浅拷贝行为，就像上面的例子一样。若想实现深拷贝需覆写 clone()方法实现引用对象的深度遍历式拷贝，进行地毯式搜索。<br />
所以对于上面的例子，如果想实现深拷贝，首先需要对更深一层次的引用类Major做改造，让其也实现Cloneable接口并重写clone()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Major</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次我们还需要在顶层的调用类中重写clone方法，来调用引用类型字段的clone()方法实现深度拷贝，对应到本文那就是Student类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Student student = (Student) <span class="keyword">super</span>.clone();</span><br><span class="line">        student.major = (Major) major.clone(); <span class="comment">// 重要！！！</span></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候上面的测试用例不变，运行可得结果：<br />
<img src="https://img-blog.csdnimg.cn/20200828172513124.png#pic_center" alt="在这里插入图片描述" /></p>
<p>很明显，这时候student1和student2两个对象就完全独立了，不受互相的干扰。<br />
利用反序列化实现深拷贝<br />
记得在前文《序列化/反序列化，我忍你很久了》中就已经详细梳理和总结了「序列化和反序列化」这个知识点了。<br />
利用反序列化技术，我们也可以从一个对象深拷贝出另一个复制对象，而且这货在解决多层套娃式的深拷贝问题时效果出奇的好。<br />
所以我们这里改造一下Student类，让其clone()方法通过序列化和反序列化的方式来生成一个原对象的深拷贝副本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;      <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Major major;  <span class="comment">// 所学专业</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将对象本身序列化到字节流</span></span><br><span class="line">            ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream objectOutputStream =</span><br><span class="line">                    <span class="keyword">new</span> ObjectOutputStream( byteArrayOutputStream );</span><br><span class="line">            objectOutputStream.writeObject( <span class="keyword">this</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 再将字节流通过反序列化方式得到对象副本</span></span><br><span class="line">            ObjectInputStream objectInputStream =</span><br><span class="line">                    <span class="keyword">new</span> ObjectInputStream( <span class="keyword">new</span> ByteArrayInputStream( byteArrayOutputStream.toByteArray() ) );</span><br><span class="line">            <span class="keyword">return</span> (Student) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然这种情况下要求被引用的子类（比如这里的Major类）也必须是可以序列化的，即实现了Serializable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Major</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候测试用例完全不变，直接运行，也可以得到如下结果：</p>
<p>很明显，这时候student1和student2两个对象也是完全独立的，不受互相的干扰，深拷贝完成。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>对AMD,CMD,CommonJs的理解</title>
    <url>/2020/08/28/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="对amdcmdcommonjs的理解"><a class="markdownIt-Anchor" href="#对amdcmdcommonjs的理解"></a> 对AMD,CMD,CommonJs的理解</h2>
<a id="more"></a>
<p><code>AMD</code>规范即异步模块加载机制。从规范描述页面看，<code>AMD</code>很短也很简单，但却完整描述了模块的定义，依赖关系，引用关系以及加载机制。 AMD规范其实只有一个主要接口 <code>define(id,dependencies,factory)</code>，它要在声明模块的时候指定所有的依赖<code>dependencies</code>，并且还要当做形参传到<code>factory</code>中，对于依赖的模块提前执行，依赖前置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>	   define(<span class="string">&quot;module&quot;</span>, [<span class="string">&quot;dep1&quot;</span>, <span class="string">&quot;dep2&quot;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;  </span><br><span class="line"><span class="number">2.</span>	  <span class="keyword">return</span> someExportedValue;  </span><br><span class="line"><span class="number">3.</span>	&#125;);  </span><br><span class="line"><span class="number">4.</span>	<span class="built_in">require</span>([<span class="string">&quot;module&quot;</span>, <span class="string">&quot;../file&quot;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module, file</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;);  </span><br></pre></td></tr></table></figure>
<p><strong>优点</strong>：1、适合在浏览器环境异步加载2、并行加载多个模块<br />
<strong>缺点</strong>：1、提高开发成本，代码阅读和书写比较困难2、不符合通用的模块思维方式，是一种妥协的实现<br />
实现：<code>requireJS，NodeJs，Dojo，JQuery</code><br />
CMD规范和AMD相似，尽量保持简单，并且与<code>CommonJS</code>和<code>NodeJS</code>的<code>Modules</code>规范保持了很大的兼容性。在CMD中，一个模块就是一个文件，格式为：<code>define( factory )</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">6.</span>	define(<span class="string">&quot;module&quot;</span>, [<span class="string">&quot;dep1&quot;</span>, <span class="string">&quot;dep2&quot;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;  </span><br><span class="line"><span class="number">7.</span>	  <span class="keyword">return</span> someExportedValue;  </span><br><span class="line"><span class="number">8.</span>	&#125;);  </span><br><span class="line"><span class="number">9.</span>	<span class="built_in">require</span>([<span class="string">&quot;module&quot;</span>, <span class="string">&quot;../file&quot;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module, file</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;); </span><br></pre></td></tr></table></figure>
<p><strong>优点</strong>：1、依赖就近，延迟执行2、很容易在node中运行<br />
<strong>缺点</strong>：1、依赖SPM打包，模块的加载逻辑偏重<br />
<strong>实现：SeaJS</strong><br />
<code>CommonJS</code>是在浏览器环境之外构建<code>JavaScript</code>生态系统为目标产生的项目，比如服务器和桌面环境中。<code>CommonJS</code>规范是为了解决<code>JavaScript</code>的作用域问题而定义的模块形式，可以使每个模块在它自身的命名空间中执行。该规范的主要内容是：模块必须通过  <code>module.exports</code>导出对外的变量或接口，通过<code>require()</code>来导入其他模块的输出到当前模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">10.</span>	<span class="comment">// moduleA.js  </span></span><br><span class="line"><span class="number">11.</span>	<span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>)</span>&#123;  </span><br><span class="line"><span class="number">12.</span>	    <span class="keyword">return</span> value * <span class="number">2</span>;  </span><br><span class="line"><span class="number">13.</span>	&#125;  </span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>	<span class="comment">// moduleB.js  </span></span><br><span class="line"><span class="number">15.</span>	<span class="keyword">var</span> multiplyBy2 = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA&#x27;</span>);  </span><br><span class="line"><span class="number">16.</span>	<span class="keyword">var</span> result = multiplyBy2(<span class="number">4</span>);  </span><br></pre></td></tr></table></figure>
<p><code>CommonJS</code>是同步加载模块，一个单独的文件就是一个模块。但其实也有浏览器端的实现，其原理是将所有模块都定义好并通过id进行索引，这样就可以浏览器进行解析了 服务器端的<code>Node.js</code>遵循<code>CommonJS</code>规范。核心思想是允许模块通过<code>require</code> 方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code>或<code>module.exports</code>来导出需要暴露的接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">17.</span>	<span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>);  </span><br><span class="line"><span class="number">18.</span>	<span class="built_in">require</span>(<span class="string">&quot;../file.js&quot;</span>);  </span><br><span class="line"><span class="number">19.</span>	<span class="built_in">exports</span>.doStuff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;  </span><br><span class="line"><span class="number">20.</span>	<span class="built_in">module</span>.exports = someValue;  </span><br></pre></td></tr></table></figure>
<p><strong>优点</strong>：1、服务器端便于重用2、NPM中已经将近20w个模块包3、简单并容易使用<br />
<strong>缺点</strong>：1、同步的模块方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的2、不能非阻塞的并行加载多个模块<br />
<strong>区别：（AMD  or  CMD）</strong><br />
1	对于依赖的模块，<code>AMD</code> 是提前执行，<code>CMD</code> 是延迟执行。不过 <code>RequireJS</code> 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。<code>CMD</code> 推崇 <code>as lazy as possible</code>.<br />
2	<code>CMD</code> 推崇依赖就近，<code>AMD</code> 推崇依赖前置<br />
3	<code>AMD</code> 的 <code>API</code> 默认是一个当多个用，<code>CMD</code> 的 <code>API</code> 严格区分，推崇职责单一。<br />
4	<code>CMD</code>相当于按需加载，定义一个模块的时候不需要立即制定依赖模块，在需要的时候require就可以了，比较方便；而<code>AMD</code>则相反，定义模块的时候需要制定依赖模块。</p>
<h2 id="为什么要模块化不用的时候和用requirejs的时候代码该如何书写"><a class="markdownIt-Anchor" href="#为什么要模块化不用的时候和用requirejs的时候代码该如何书写"></a> 为什么要模块化？不用的时候和用RequireJS的时候代码该如何书写</h2>
<p>1	方便大量的js脚本代码的管理维护以及团队配合开发<br />
2	有效解决命名空间冲突及文件依赖加载顺序问题<br />
3	有利于模块的版本管理，提高可维护性，有利于前端性能优化，跨环境共享模块</p>
<h2 id="同步和异步模块化的应用场景amd异步模块化实现的原理"><a class="markdownIt-Anchor" href="#同步和异步模块化的应用场景amd异步模块化实现的原理"></a> 同步和异步模块化的应用场景，AMD异步模块化实现的原理</h2>
<p>引入JS时会遇到需要异步加载文件，此时require.async便可满足异步加载需求</p>
]]></content>
      <categories>
        <category>模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack,gulp,grunt 等构建工具了解多少，它们有什么区别？Webpack的入口文件如何配置,Webpack的loader和plugins的区别</title>
    <url>/2020/08/28/webpack/</url>
    <content><![CDATA[<h2 id="webpackgulpgrunt-等构建工具了解多少它们有什么区别"><a class="markdownIt-Anchor" href="#webpackgulpgrunt-等构建工具了解多少它们有什么区别"></a> Webpack,gulp,grunt 等构建工具了解多少，它们有什么区别？</h2>
<a id="more"></a>
<p><strong>Webpack</strong>与Gulp、Grunt没有什么可比性，Webpack可以看作模块打包机，通过分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。主要用于模块化方案，预编译模块的方案。<hr><br />
<strong>gulp</strong>是工具链、构建工具，可以配合各种插件做js压缩，css压缩，less编译 替代手工实现自动化工作，主要是：1.构建工具2.自动化3.提高效率用。相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。<hr><br />
<strong>Gulp/Grunt</strong>是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。<hr><br />
<strong>Gulp较之grunt的优势</strong><br />
<strong>1	易用</strong>， Gulp相比Grunt更简洁，而且遵循代码优于配置策略，维护Gulp更像是写代码。<br />
<strong>2	高效</strong>， Gulp相比Grunt更有设计感，核心设计基于Unix流的概念，通过管道连接，不需要写中间文件。<br />
<strong>3	高质量</strong> ，Gulp的每个插件只完成一个功能，各个功能通过流进行整合并完成复杂的任务。例如：Grunt的imagemin插件不仅压缩图片，同时还包括缓存功能。而在Gulp中，缓存是另一个插件，可以被别的插件使用，这样就促进了插件的可重用性。<br />
<strong>4	易学</strong> ，Gulp的核心API只有5个，掌握了5个API就学会了Gulp，之后便可以通过管道流组合自己想要的任务。<br />
5	<strong>代码优于配置</strong> ，维护Gulp更像是写代码，而且Gulp遵循CommonJS规范，因此跟写Node程序没有差别。</p>
<h2 id="webpack的入口文件如何配置"><a class="markdownIt-Anchor" href="#webpack的入口文件如何配置"></a> Webpack的入口文件如何配置</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//入口文件配置项</span></span><br><span class="line">    entry:&#123;<span class="attr">entry</span>:<span class="string">&#x27;./src/entry.js&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">//出口文件配置项</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        <span class="comment">//输出路劲</span></span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 输出文件名称</span></span><br><span class="line">        filename:<span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 模块，例如解读css，图片转换压缩</span></span><br><span class="line">    moudle:&#123;&#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    plugins:&#123;&#125;,</span><br><span class="line">    <span class="comment">// 配置webpack开发服务功能</span></span><br><span class="line">    devServer:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="webpack的loader和plugins的区别"><a class="markdownIt-Anchor" href="#webpack的loader和plugins的区别"></a> Webpack的loader和plugins的区别</h2>
<p>loader 用于加载待打包的资源，plugin 用于扩展 webpack。<br />
loader 用于加载某些资源文件。 因为webpack 本身只能打包commonjs规范的js文件，对于其他资源例如 css，图片，或者其他的语法集，比如 jsx， coffee，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。从字面意思也能看出，loader是用于加载的，它作用于一个个文件上。<br />
plugin 用于扩展webpack的功能。它直接作用于 webpack，扩展了它的功能。当然loader也时变相的扩展了 webpack ，但是它只专注于转化文件（transform）这一个领域。而plugin的功能更加的丰富，而不仅局限于资源的加载。</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>js原生拖拽,h5拖拽,jq拖拽</title>
    <url>/2020/08/27/%E6%8B%96%E6%8B%BD/</url>
    <content><![CDATA[<h2 id="js原生拖拽"><a class="markdownIt-Anchor" href="#js原生拖拽"></a> js原生拖拽</h2>
<a id="more"></a>
<p>基本思路如下，拖拽状态 = 0鼠标在元素上按下的时候{<br />
拖拽状态 = 1<br />
记录下鼠标的x和y坐标<br />
记录下元素的x和y坐标<br />
}<br />
鼠标在元素上移动的时候{<br />
如果拖拽状态是0就什么也不做。<br />
如果拖拽状态是1，那么<br />
元素y = 现在鼠标y - 原来鼠标y + 原来元素y<br />
元素x = 现在鼠标x - 原来鼠标x + 原来元素x<br />
}<br />
鼠标在任何时候放开的时候{<br />
拖拽状态 = 0<br />
}</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        cursor: move;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;drag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> drag = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;drag&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// //点击某物体时，用drag对象即可，move和up是全局区域，</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 也就是整个文档通用，应该使用document对象而不是drag对象(否则，采用drag对象时物体只能往右方或下方移动)  </span></span></span><br><span class="line"><span class="javascript">            drag.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> event = event || <span class="built_in">window</span>.event; <span class="comment">//兼容IE浏览器</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//    鼠标点击物体那一刻相对于物体左侧边框的距离=点击时的位置相对于浏览器最左边的距离-物体左边框相对于浏览器最左边的距离</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> diffX = event.clientX - drag.offsetLeft;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> diffY = event.clientY - drag.offsetTop;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="keyword">typeof</span> drag.setCapture !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span></span><br><span class="line">                    drag.setCapture();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> moveX = event.clientX - diffX;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> moveY = event.clientY - diffY;</span></span><br><span class="line">                    if (moveX &lt; 0) &#123;</span><br><span class="line">                        moveX = 0</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moveX &gt; <span class="built_in">window</span>.innerWidth - drag.offsetWidth) &#123;</span></span><br><span class="line"><span class="javascript">                        moveX = <span class="built_in">window</span>.innerWidth - drag.offsetWidth</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    if (moveY &lt; 0) &#123;</span><br><span class="line">                        moveY = 0</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moveY &gt; <span class="built_in">window</span>.innerHeight - drag.offsetHeight) &#123;</span></span><br><span class="line"><span class="javascript">                        moveY = <span class="built_in">window</span>.innerHeight - drag.offsetHeight</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    drag.style.left = moveX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    drag.style.top = moveY + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.onmouseup = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//修复低版本ie bug  </span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> drag.releaseCapture != <span class="string">&#x27;undefined&#x27;</span>) &#123;</span></span><br><span class="line">                        drag.releaseCapture();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="h5拖拽"><a class="markdownIt-Anchor" href="#h5拖拽"></a> h5拖拽</h2>
<p>参考： <a href="https://www.cnblogs.com/lhl66/p/8867697.html">https://www.cnblogs.com/lhl66/p/8867697.html</a><br />
draggable 属性规定元素是否可拖动（HTML5 新增）<br />
语法：<element draggable="true|false|auto"><br />
true //规定元素是可拖动的。<br />
false //规定元素是不可拖动的。<br />
auto //使用浏览器的默认特性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 160px;</span><br><span class="line">            padding: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#aaaaaa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//放到何处 - ondragover</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">allowDrop</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            ev.preventDefault(); <span class="comment">//drop事件的默认行为是以链接形式打开</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//拖动什么 - ondragstart 和 setData()</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            ev.dataTransfer.setData(<span class="string">&quot;Text&quot;</span>, ev.target.id); <span class="comment">//dataTransfer.setData() 方法设置被拖数据的数据类型和值</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//进行放置 - ondrop</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line">            ev.preventDefault();</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">&quot;Text&quot;</span>);</span></span><br><span class="line"><span class="javascript">            ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请把下面的图片拖拽到上面的矩形里面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">ondrop</span>=<span class="string">&quot;drop(event)&quot;</span> <span class="attr">ondragover</span>=<span class="string">&quot;allowDrop(event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;drag1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ss3.baidu.com/-rVXeDTa2gU2pMbgoY3K/it/u=1402111932,1875120122&amp;fm=202&amp;mola=new&amp;crop=v1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ondragstart</span>=<span class="string">&quot;drag(event)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="jquery横向滑动"><a class="markdownIt-Anchor" href="#jquery横向滑动"></a> jquery横向滑动</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//    jq拖拽横向滑动</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;.box&#x27;</span>).on(&#123;</span></span><br><span class="line"><span class="javascript">            mousedown:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> el = $(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> os = el.offset();</span></span><br><span class="line">                dx = e.pageX - os.left;</span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).on(<span class="string">&#x27;mousemove.drag&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line">                    el.offset(&#123;</span><br><span class="line">                        left: e.pageX - dx</span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="javascript">                &#125;).on(<span class="string">&#x27;mouseup&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="built_in">document</span>).off(<span class="string">&#x27;mousemove.drag&#x27;</span>);</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="jquery自由滑动"><a class="markdownIt-Anchor" href="#jquery自由滑动"></a> jquery自由滑动</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//    jq拖拽自由拖动</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.box&quot;</span>).on(&#123;</span></span><br><span class="line"><span class="javascript">            mousedown: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> el = $(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> os = el.offset();</span></span><br><span class="line">                dx = e.pageX - os.left, dy = e.pageY - os.top;</span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).on(<span class="string">&#x27;mousemove.drag&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">                    el.offset(&#123;</span><br><span class="line">                        top: e.pageY - dy,</span><br><span class="line">                        left: e.pageX - dx</span><br><span class="line">                    &#125;);</span><br><span class="line"><span class="javascript">                &#125;).on(<span class="string">&#x27;mouseup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="built_in">document</span>).off(<span class="string">&#x27;mousemove.drag&#x27;</span>);</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title>XMLHttpRequest实例状态，DNS，服务器如何识别是你在操作，浏览器的渲染流程，IE浏览器的兼容问题，Session，URL的各个部分</title>
    <url>/2020/08/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B32/</url>
    <content><![CDATA[<h2 id="xmlhttprequest实例状态"><a class="markdownIt-Anchor" href="#xmlhttprequest实例状态"></a> XMLHttpRequest实例状态</h2>
<a id="more"></a>
<p>XMLHttpRequest的几种状态<br />
0	对象没有完成初始化<br />
1	对象开始发送请求<br />
2	对象的请求发送完成<br />
3	对象开始读取服务器响应<br />
4	对象读取服务器响应结束</p>
<h2 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h2>
<p>地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。<br />
查询www.163.com的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果。如果没有，本地DNS服务器还要向DNS根服务器进行查询。<br />
根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。<br />
本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。<br />
最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问</p>
<h2 id="服务器如何识别是你在操作"><a class="markdownIt-Anchor" href="#服务器如何识别是你在操作"></a> 服务器如何识别是你在操作</h2>
<p>①当浏览器首次访问服务器时,服务器会为客户端创建一个session（每个用户独有的房间，用来存放这个对象的相关信息和内容），并通过特殊算法算出一个sessionID（类似于双方都知道的唯一暗号），用来标识该session对象。<br />
②当浏览器再次（session还在有效时间内）向服务器请求资源的时候，浏览器将sessionID和请求内容一起发送到服务端。服务端通过对比自身存储的sessionId来判断用户之前是否存在，并返回对应的内容给不同用户。<br />
③因为标识符存在内存里，所以当浏览器关闭时，浏览器保存的sessionId就会消失。服务器将匹配失败，默认为此请求是新用户提出的，如上文顺序，重新创建一个session容器，和相应的唯一sessionId，返回给浏览器。<br />
一分钟专业解释：<br />
① 服务器在响应头内加上”Set-Cookie:XXXXXXXXXXXXX“(相当于一个唯一的ID符)，此信息是服务器随机生成的，放在服务器内存里，不会重复,这就是sessionid。<br />
②当浏览器得到这个sessionid会将它放在自己的进程内存里,.然后你继续发请求给这个网站的时候,浏览器就会把这个sessionid放在请求头里发送给该服务器了,这样服务器得到sessionid后再和自己内存里存放的sessionid对比锁定客户端,从而区分不同客户端,完成会话.<br />
③关闭浏览器结束进程,则这个sessionid将消失,如果用户又打开浏览器想继续这次会话的时候,就会因为发送的请求中没有这个sessionid，而使服务器无法辨别请求身份。</p>
<h2 id="浏览器的渲染流程"><a class="markdownIt-Anchor" href="#浏览器的渲染流程"></a> 浏览器的渲染流程</h2>
<p>1	解析HTML文件，创建DOM树<br />
2	解析CSS：优先级：浏览器默认设置&lt;用户设置&lt;外部样式&lt;内联样式&lt;HTML中的style样式<br />
3	将CSS与DOM合并，构建渲染树<br />
4	布局和绘制，重绘（repaint）和重排（reflow）<br />
重排：若渲染树的一部分更新，且尺寸变化，就会发生重排；<br />
重绘：部分节点需要更新，但不改变其他集合形状。如改变某个元素的颜色，就会发生重绘</p>
<h2 id="ie浏览器的兼容问题"><a class="markdownIt-Anchor" href="#ie浏览器的兼容问题"></a> IE浏览器的兼容问题</h2>
<p>1	块属性标签float之后，又有横向的margin值，在IE6中显示会比设置的大（IE6双边距bug）<br />
2	设置较小的高度标签（一般小于10px），在IE6，IE7，会超出自己设置的高度，解决办法：设置较小的高度标签（一般小于10px），在IE6，IE7，遨游中超出自己设置的高度<br />
3	图片默认有间距，解决方案：使用float为img布局<br />
4	给一个元素设置了高度和宽度的同时，还为其设置margin和padding的值，会改变该元素的实际大小。解决办法：在需要加 margin和padding的div内部加一个div,在这个div里设置margin和padding值</p>
<h2 id="session"><a class="markdownIt-Anchor" href="#session"></a> Session</h2>
<p>session是存放在服务器的内存中里，所以session里的数据不断增加会造成服务器的负担，所以会把很重要的信息存储在session中，session的信息是通过sessionid获取的，而sessionid是存放在会话cookie当中的，当浏览器关闭的时候会话cookie消失，所以sessionid也就消失了，但是session的信息还存在服务器端。一般session是和cookie结合起来使用的</p>
<h2 id="url的各个部分"><a class="markdownIt-Anchor" href="#url的各个部分"></a> URL的各个部分</h2>
<p>例如：scheme://host:port/path?query#fragment<br />
1	.scheme:通信协议，常用的http,ftp,maito等<br />
2	.host:主机，服务器(计算机)域名系统 (DNS) 主机名或 IP 地址<br />
3	.port:端口号，整数，可选，省略时使用方案的默认端口，如http的默认端口为80<br />
4	.path:路径，由零或多个&quot;/“符号隔开的字符串，一般用来表示主机上的一个目录或文件地址<br />
5	.query:查询，可选，用于给动态网页传递参数，可有多个参数，用”&amp;“符号隔开，每个参数的名和值用”=&quot;符号隔开<br />
6	.fragment:信息片断，字符串，用于指定网络资源中的片断。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。(也称为锚点)</p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域，前端安全XSS,CSRF,浏览器如何加载页面的，script脚本阻塞有什么解决办法，defer和async的区别是什么,浏览器强制缓存和协商缓存,浏览器的全局变量,浏览器同一时间能够从一个域名下载多少个资源,按需加载，不同页面的元素判断标准是怎么样的,WEB存储，COOKIES,LOCALSTOGE等的使用规则和区别,浏览器内核,预加载，懒加载</title>
    <url>/2020/08/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="跨域"><a class="markdownIt-Anchor" href="#跨域"></a> 跨域</h2>
<a id="more"></a>
<p>跨域,指的是浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的,是浏览器对javascript施加的安全限制，防止他人恶意攻击网站<br />
比如一个黑客,他利用iframe把真正的银行登录页面嵌到他的页面上,当你使用真实的用户名和密码登录时,如果没有同源限制,他的页面就可以通过 JavaScript读取到你的表单中输入的内容,这样用户名和密码就轻松到手了。</p>
<h2 id="前端安全xsscsrf"><a class="markdownIt-Anchor" href="#前端安全xsscsrf"></a> 前端安全XSS,CSRF</h2>
<p><strong>xss</strong> 跨站脚本攻击。xss攻击的主要目的是想办法获取目标攻击网站的cookie， 因为有了cookie相当于有了session。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该网页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的，避免采取的措施：编码、过滤、校验</p>
<hr>
<p><strong>csrf</strong> 跨站点伪装请求，CSRF攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。防御手段：1. 尽量使用POST，限制GET，2. 加验证码</p>
<h2 id="浏览器如何加载页面的script脚本阻塞有什么解决办法defer和async的区别是什么"><a class="markdownIt-Anchor" href="#浏览器如何加载页面的script脚本阻塞有什么解决办法defer和async的区别是什么"></a> 浏览器如何加载页面的，script脚本阻塞有什么解决办法，defer和async的区别是什么</h2>
<p>从浏览器地址栏的请求链接开始，浏览器通过DNS解析查到域名映射的IP地址，成功之后浏览器端向此IP地址取得连接，成功连接之后，浏览器端将请求信息通过HTTP协议向此IP地址所在服务器发起请求，服务器接受到请求之后等待处理，最后向浏览器端发回响应，此时在HTTP协议下，浏览器从服务器接收到 text/html类型的代码，浏览器开始显示此html，并获取其中内嵌资源地址，然后浏览器再发起请求来获取这些资源，并在浏览器的html中显示<br />
<strong>1	推迟加载（延迟加载）</strong><br />
如果页面初始的渲染并不依赖于js或者CSS可以用推迟加载，就是最后在加载js和css，把引用外部文件的代码写在最后<br />
<strong>2	defer延迟加载</strong><br />
<code>&lt;script src=&quot;&quot; defer&gt;&lt;/script&gt;</code> 在文档解析完成开始执行，并且在DOMContentLoaded事件之前执行完成，会按照他们在文档出现的顺序去下载解析。效果和把script放在文档最后<code>&lt;/body&gt;</code>之前是一样的。<br />
注：defer最好用在引用外部文件中使用，用了<code>defer</code>不要使用<code>document.write()</code>方法;使用defer时最好不要请求样式信息，因为样式表可能尚未加载，浏览器会禁止该脚本等待样式表加载完成，相当于样式表阻塞脚本执行<br />
<strong>3	异步加载</strong><br />
async异步加载：就是告诉浏览器不必等到加载完外部文件，可以边渲染边下载，什么时候下载完成什么时候执行。<code>&lt;script type=&quot;text/javascript&quot; src=&quot;a.js&quot; async&gt;&lt;/script&gt;</code><br />
defer和async的区别：<code>&lt;script async src=&quot;example.js&quot;&gt;&lt;/script&gt;</code>有了async属性，表示后续文档的加载和渲染与js脚本的加载和执行是并行进行的，即异步执行；<code>&lt;script defer src=&quot;example.js&quot;&gt;&lt;/script&gt;</code><br />
有了defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本的执行需要等到文档所有元素解析完成之后，<code>DOMContentLoaded</code>事件触发执行之前</p>
<h2 id="浏览器强制缓存和协商缓存"><a class="markdownIt-Anchor" href="#浏览器强制缓存和协商缓存"></a> 浏览器强制缓存和协商缓存</h2>
<p><strong>强制缓存</strong>：是利用http的返回头中的Expires或者Cache-Control两个字段来控制的，用来表示资源的缓存时间<br />
<strong>协商缓存</strong>：就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问，这主要涉及到下面两组header字段，这两组搭档都是成对出现的，即第一次请求的响应头带上某个字段（Last-Modified或者Etag），则后续请求则会带上对应的请求字段（If-Modified-Since或者If-None-Match），若响应头没有Last-Modified或者Etag字段，则请求头也不会有对应的字段</p>
<h2 id="浏览器的全局变量"><a class="markdownIt-Anchor" href="#浏览器的全局变量"></a> 浏览器的全局变量</h2>
<p>有：alert，location，open()，setTimeout()，clearInterval()等</p>
<h2 id="浏览器同一时间能够从一个域名下载多少个资源"><a class="markdownIt-Anchor" href="#浏览器同一时间能够从一个域名下载多少个资源"></a> 浏览器同一时间能够从一个域名下载多少个资源</h2>
<p>一般是限制在10个以内</p>
<h2 id="按需加载不同页面的元素判断标准是怎么样的"><a class="markdownIt-Anchor" href="#按需加载不同页面的元素判断标准是怎么样的"></a> 按需加载，不同页面的元素判断标准是怎么样的</h2>
<p>访问的数据量过大的时候用缓存明显不太合适的时候。可以用按需加载</p>
<h2 id="web存储cookieslocalstoge等的使用规则和区别"><a class="markdownIt-Anchor" href="#web存储cookieslocalstoge等的使用规则和区别"></a> WEB存储，COOKIES,LOCALSTOGE等的使用规则和区别</h2>
<p>web存储就指的是本地存储，包括localstorage和sessionstorage<br />
Cookies:cookie在浏览器与服务器之间来回传递，cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭，cookie数据不能超过4k。<br />
localStorage:localStorage不把数据发给服务器，仅在本地保存,始终有效，长期保存,可以达到5M或更大存储大小</p>
<h2 id="浏览器内核"><a class="markdownIt-Anchor" href="#浏览器内核"></a> 浏览器内核</h2>
<p>火狐浏览器：Mozilla Firefox ，内核是Gecko<br />
opera浏览器：内核是blink<br />
Safari浏览器：使用的是苹果公司自己的内核:webkit<br />
一些国内的浏览器他们的内核<br />
搜狗浏览器：	兼容模式（IE：Trident）和高速模式（webkit）<br />
傲游浏览器：	兼容模式（IE：Trident）和高速模式（webkit）<br />
QQ浏览器：	普通模式（IE：Trident）和极速模式（webkit）<br />
360极速浏览器：	基于谷歌（Chromium）和IE内核<br />
360安全浏览器：	IE内核</p>
<h2 id="预加载懒加载"><a class="markdownIt-Anchor" href="#预加载懒加载"></a> 预加载，懒加载</h2>
<p>预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染<br />
懒加载：也就是延迟加载。当访问一个页面的时候，先把img元素或是其他元素的背景图片路径替换成一张大小为1*1px图片的路径（这样就只需请求一次，俗称占位图），只有当图片出现在浏览器的可视区域内时，才设置图片真正的路径，让图片显示出来。这就是图片懒加载</p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么TCP连接需要三次握手，为什么TCP连接需要三次握手四次挥手，TCP的三次握手和四次挥手绘图（画写ACK和SEQ的值），TCP与UDP的区别，Get和Post的区别？什么情况下用到，HTTP2 / HTTP1  之间的区别，websocket，HTTP Response的Header里面都有什么</title>
    <url>/2020/08/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C2/</url>
    <content><![CDATA[<h2 id="为什么tcp连接需要三次握手"><a class="markdownIt-Anchor" href="#为什么tcp连接需要三次握手"></a> 为什么TCP连接需要三次握手</h2>
<a id="more"></a>
<p>三次握手为了确认客户端跟服务器都能接受到对方的信息,两次的话服务器不能确认客户端能否接收自己发的包<hr>第一次握手，客户端给服务器发包。 此时服务器确认自己可以接收客户端的包，客户端不确认服务器是否接收到了自己发的包<hr>第二次握手，服务器端回复客户端。 此时客户端确认自己发的包被服务器收到，也确认自己可以正常接收服务器包，客户端对此次通信没有疑问了。服务器可以确认自己能接收到客户端的包，但不能确认客户端能否接收自己发的包<hr>第三次握手，客户端回复服务器。 客户端已经没有疑问了，服务器也确认刚刚客户端收到了自己的包。两边都没有问题，开始通信<hr>简单概括：第一次：服务端和客户端建立联系；第二次：服务器端回复客户端；第三次：客户端回复服务器</p>
<h2 id="为什么tcp连接需要三次握手四次挥手"><a class="markdownIt-Anchor" href="#为什么tcp连接需要三次握手四次挥手"></a> 为什么TCP连接需要三次握手四次挥手</h2>
<p><strong>为什么是三次握手？</strong><br />
为了防止已失效的连接请求报文段突然有送到了服务器，因而产生错误,假设两次握手时，客户发出的第一个请求连接报文段在某一网络节点长时间滞留，以致延误到连接释放后才到达服务器。服务器收到失效的连接请求报文段后，认为是客户又发出一次新的连接请求。于是向客户发送确认报文段，同意建立连接，此时在假定两次握手的前提下，连接建立成功。这样会导致服务器的资源白白浪费<hr><br />
<strong>为什么是四次挥手？</strong><br />
TCP协议是全双工通信，这意味着客户端和服务器端都可以向彼此发送数据，所以关闭连接是双方都需要确认的共同行为，假设是三次挥手时，首先释放了客户到服务器方向的连接，此时TCP连接处于半关闭状态，这时客户不能向服务器发送数据，而服务器还是可以向客户发送数据。如果此时客户收到了服务器的确认报文段后，就立即发送一个确认报文段，这会导致服务器向客户还在发送数据时连接就被关闭。这样会导致客户没有完整收到服务器所发的报文段</p>
<h2 id="tcp的三次握手和四次挥手绘图画写ack和seq的值"><a class="markdownIt-Anchor" href="#tcp的三次握手和四次挥手绘图画写ack和seq的值"></a> TCP的三次握手和四次挥手绘图（画写ACK和SEQ的值）</h2>
<p>所谓三次握手（Three-Way Handshake）即建立TCP连接，就是指建立一个TCP连接时，需要客户端和服务端总共发送3个包以确认连接的建立。由客户端执行connect()触发<br />
<img src="https://img-blog.csdnimg.cn/20200826163516943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<p>所谓四次挥手（Four-Way Wavehand）即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。由客户端或服务端任一方执行close来触发<br />
<img src="https://img-blog.csdnimg.cn/20200826163525911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
<h2 id="tcp与udp的区别"><a class="markdownIt-Anchor" href="#tcp与udp的区别"></a> TCP与UDP的区别</h2>
<p>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议<br />
UDP(User Datagram Protocol用户数据报协议）是OSI（Open System Interconnection，开放式系统互联） 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务<br />
TCP 是面向连接的传输控制协议，而UDP提供了无链接的数据报服务//类似电话与短信<br />
TCP 面向连接，提供可靠的数据服务<br />
TCP首部开销20字节,UDP首部开销8字节<br />
TCP逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道<br />
UDP没有拥塞机制，因此网络出现拥堵不会使源主机的发送效率降低（有利于实时会议视频等）<br />
TCP的连接只能是点到点的,UDP支持一对一，多对一，多对多的交互通信</p>
<h2 id="get和post的区别什么情况下用到"><a class="markdownIt-Anchor" href="#get和post的区别什么情况下用到"></a> Get和Post的区别？什么情况下用到</h2>
<p>1	GET使用URL或Cookie传参。而POST将数据放在BODY中<br />
2	GET的URL会有长度上的限制，则POST的数据则可以非常大<br />
3	POST比GET安全，因为数据在地址栏上不可见<br />
<strong>最本质的区别</strong><br />
Get是用来从服务器上获得数据，而post是用来向服务器上传递数据<br />
<strong>若符合下列任一情况，则用post方法：</strong><br />
a	请求的结果有持续性的作用，例如：数据库内添加新的数据行<br />
b	若使用get方法，则表单上收集的数据可能让URL过长<br />
c	要传送的数据不是采用ASCII编码<br />
<strong>若符合下列任一情况，则用get方法：</strong><br />
a	请求是为了查找资源，html表单数据仅用来搜索<br />
b	请求结果无持续性的副作用<br />
c	收集的数据及html表单内的输入字段名称的总长不超过1024个字符</p>
<h2 id="http2-http1-之间的区别"><a class="markdownIt-Anchor" href="#http2-http1-之间的区别"></a> HTTP2 / HTTP1  之间的区别</h2>
<p>1	http2采用二进制格式而非文本格式，比起文本格式，二进制格式解析起来更加高效，并且错误少<br />
2	http2是完全的多路复用，非有序并阻塞的----只需要一个连接即可实现并行，多路复用的意思是它能同时处理多个消息的请求和响应，http1是一个连接一次只能提交一个请求的效率比较高，多了就会变慢<br />
3	使用报头压缩，http2降低了开销，http1的消息头很大冗余,http2是将消息头中的不同的部分分别用不用的索引进行表示，且会用哈夫曼编码压缩字符串，最后封装成frame<br />
4	http2让服务器可以将响应主动”推送”到客户端缓存中，HTTP2中服务器会主动将资源推送给客户端，例如把js和css文件主动推送给客户端而不用客户端解析HTML后请求再响应</p>
<h2 id="websocket"><a class="markdownIt-Anchor" href="#websocket"></a> websocket</h2>
<p>websocket是一种网络通信协议，是HTML5开始提供的一种在单个TCP连接上进行全双工通信的协议，这个对比着http协议来说，http协议是一种无状态的、无连接的、单向的应用层协议，通信请求只能由客户端发起，服务端对请求做出应答处理。http协议无法实现服务器主动向客户端发起消息，Websocket 连接允许客户端和服务器之间进行全双工通信，以便任一方都可以通过建立的连接将数据推送到另一端。WebSocket 只需要建立一次连接，就可以一直保持连接状态</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化一个webSocket对象</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:9998/echo&#x27;</span>);</span><br><span class="line"><span class="comment">// 建立webSocket连接成功触发事件</span></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用send方法接收数据</span></span><br><span class="line">    ws.send(<span class="string">&#x27;发送数据&#x27;</span>)</span><br><span class="line">    alert(<span class="string">&#x27;数据发送中&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收服务端数据时触发事件</span></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> received_msg = evt.data</span><br><span class="line">    alert(<span class="string">&#x27;数据已接收&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//断开webSocket连接成功触发事件</span></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;数据已关闭&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="http-response的header-里面都有什么"><a class="markdownIt-Anchor" href="#http-response的header-里面都有什么"></a> HTTP Response的Header 里面都有什么</h2>
<p>1	Cache-Control：告诉所有的缓存机制是否可以缓存及哪种类型<br />
2	Content-Length：响应体的长度<br />
3	Content-Type：返回内容的MIME类型，所谓的MIME就是解析的是什么，比方说：jpg就是图片<br />
4	Expires：响应过期的日期和时间<br />
5	Set-Cookie：设置Http Cookie</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议头包含哪些重要部分，HTTP状态码。网络url输入到输出都做了什么，为什么说性能优化就要减少HTTP的访问次数，HTTP的请求过程与原理，HTTP的请求过程与原理，TLS的中文名？TLS在那一网络层，TCP连接的特点，TCP连接如何保证安全可靠</title>
    <url>/2020/08/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C1/</url>
    <content><![CDATA[<h2 id="http协议头包含哪些重要部分http状态码"><a class="markdownIt-Anchor" href="#http协议头包含哪些重要部分http状态码"></a> HTTP协议头包含哪些重要部分，HTTP状态码。</h2>
<a id="more"></a>
<p>HTTP协议头包括通用头，请求头，响应头和实体头四个部分<br />
200	请求已成功，请求所希望的响应头或数据体将随此响应返回<br />
302	Moved Permanently（重定向）请求的URL已移走。Response中应该包含一个Location URL, 说明资源现在所处的位置<br />
304	Not Modified（未修改）客户的缓存资源是最新的， 要客户端使用缓存<br />
404	Not Found 未找到资源，可能是路径方面的错误<br />
503	服务器目前无法为请求提供服务，但过一段时间就可以恢复服务</p>
<h2 id="网络url输入到输出都做了什么"><a class="markdownIt-Anchor" href="#网络url输入到输出都做了什么"></a> 网络url输入到输出都做了什么</h2>
<p>1	当我们输入一个域名像：<a href="http://www.baidu.com">www.baidu.com</a></p>
<p>2	浏览器查找浏览器缓存，如果有域名的IP地址则返回，如果没有继续查找<br />
3	系统查找系统缓存，如果有域名的IP地址则返回，如果没有继续查找<br />
4	路由器查找路由器缓存，如果有域名的IP地址则返回，如果没有继续查找<br />
5	本地域名服务器采用迭代查询，它先向一个根域名服务器查询<br />
6	根域名服务器告诉本地域名服务器，下一次应查询的顶级域名服务器dns.com的IP地址<br />
7	本地域名服务器向顶级域名服务器dns.com进行查询<br />
8	顶级域名服务器dns.com告诉本地域名服务器，下一次应查询的权限域名服务器dns.baidu.com的IP地址<br />
9	本地域名服务器向权限域名服务器dns.baidu.com进行查询<br />
10	权限域名服务器dns.baidu.com告诉本地域名服务器，所查询的主机www.baidu.com的IP地址<br />
11	本地域名服务器最后把查询结果告诉主机<br />
12	主机浏览器获取到Web服务器的IP地址后，与服务器建立TCP连接<br />
13	浏览器所在的客户机向服务器发出连接请求报文<br />
14	服务器接收报文后，同意建立连接，向客户机发出确认报文<br />
15	客户机接收到确认报文后，再次向服务器发出报文，确认已接收到确认报文<br />
16	此处客户机与服务器之间的TCP连接建立完成，开始通信<br />
17	浏览器发出取文件命令：GET<br />
18	服务器给出响应，将指定文件发送给浏览器<br />
19	浏览器释放TCP连接<br />
20	浏览器所在主机向服务器发出连接释放报文，然后停止发送数据<br />
21	服务器接收到释放报文后发出确认报文，然后将服务器上未传送完的数据发送完<br />
22	服务器数据传输完毕后，向客户机发送连接释放报文<br />
23	客户机接收到报文后，发出确认，然后等待一段时间后，释放TCP连接<br />
24	浏览器显示页面中所有文本</p>
<h2 id="为什么说性能优化就要减少http的访问次数"><a class="markdownIt-Anchor" href="#为什么说性能优化就要减少http的访问次数"></a> 为什么说性能优化就要减少HTTP的访问次数</h2>
<p>1	http请求头的数据量：每次请求都会带上一些额外的信息进行传输,所以请求越多的时候，在网络上传输的数据就会变多了，速度就变慢了<br />
2	http连接的开销：从用户输入URL到看到页面，经过一系列的解析和连接，以及等待</p>
<h2 id="http的请求过程与原理"><a class="markdownIt-Anchor" href="#http的请求过程与原理"></a> HTTP的请求过程与原理</h2>
<p><strong>http请求的过程：</strong> 域名解析 --&gt; 发起TCP的3次握手 --&gt; 建立TCP连接后发起http请求 --&gt;服务器响应http请求，浏览器得到html代码 --&gt;浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） --&gt; 浏览器对页面进行渲染呈现给用户<br />
<strong>请求原理：</strong> HTTP协议是应用层的一种协议，是一种C/S架构服务，基于TCP/IP协议来通信，监听在TCP的80端口上，HTTP协议实现的是客户端可以向服务端获得web资源</p>
<h2 id="https有几次握手和挥手https的原理"><a class="markdownIt-Anchor" href="#https有几次握手和挥手https的原理"></a> https有几次握手和挥手，https的原理</h2>
<p>https是3次握手和4次挥手，和http是一样的。<br />
原理：https在传输数据前需要客户端(浏览器)与服务器(网站)之间进行一次握手,在握手过程中将确立双方加密传输数据的密码信息.TLS/SSL协议是一套加密传输协议,使用了非对称加密,对称加密,以及HASH算法</p>
<h2 id="tls的中文名tls在那一网络层"><a class="markdownIt-Anchor" href="#tls的中文名tls在那一网络层"></a> TLS的中文名？TLS在那一网络层</h2>
<p>TLS的中文名是：安全传输层协议，在传输层。</p>
<h2 id="tcp连接的特点tcp连接如何保证安全可靠"><a class="markdownIt-Anchor" href="#tcp连接的特点tcp连接如何保证安全可靠"></a> TCP连接的特点，TCP连接如何保证安全可靠</h2>
<p>TCP的可靠性是通过顺序编号和确认（ACK）来实现的，TCP的接收端必须丢弃重复的数据，并且TCP提供流量控制，连接的每一个地方都有固定大小的缓冲空间。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何封装一个AJAX</title>
    <url>/2020/08/25/Promise%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAAJAX/</url>
    <content><![CDATA[<h2 id="如何封装一个ajax原生和promise方法"><a class="markdownIt-Anchor" href="#如何封装一个ajax原生和promise方法"></a> 如何封装一个AJAX原生和promise方法</h2>
<a id="more"></a>
<h2 id="如何封装一个ajax原生和promise方法-2"><a class="markdownIt-Anchor" href="#如何封装一个ajax原生和promise方法-2"></a> 如何封装一个AJAX原生和promise方法</h2>
<!-- more -->
<h3 id="先来说一下什么是ajax"><a class="markdownIt-Anchor" href="#先来说一下什么是ajax"></a> 先来说一下什么是ajax</h3>
<p>定义：Ajax(Asynchronous Java and XML的缩写)是一种异步请求数据的web开发技术，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。</p>
<h3 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h3>
<p>提高用户体验，减少网络数据的传输量</p>
<h3 id="ajax常见运用场景"><a class="markdownIt-Anchor" href="#ajax常见运用场景"></a> ajax常见运用场景</h3>
<p>表单验证是否登录成功、百度搜索下拉框提示和快递单号查询等等。</p>
<h3 id="ajax原理"><a class="markdownIt-Anchor" href="#ajax原理"></a> ajax原理</h3>
<p><img src="https://img-blog.csdnimg.cn/img_convert/494772dde1febb32c05678e6ab0a4699.png" alt="" /></p>
<h3 id="存有-xmlhttprequest-的状态-从-0-到-4-发生变化"><a class="markdownIt-Anchor" href="#存有-xmlhttprequest-的状态-从-0-到-4-发生变化"></a> 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。</h3>
<ul>
<li>0: 请求未初始化</li>
<li>1: 服务器连接已建立</li>
<li>2: 请求已接收</li>
<li>3: 请求处理中</li>
<li>4: 请求已完成，且响应已就绪</li>
</ul>
<h3 id="status"><a class="markdownIt-Anchor" href="#status"></a> status</h3>
<p>200:ok<br />
404:未找到页面<br />
更多状态码信息见：<a href="https://highfish920.github.io/2020/08/12/%E7%8A%B6%E6%80%81%E7%A0%81%E5%AF%B9%E5%BA%94%E5%90%AB%E4%B9%89/">https://highfish920.github.io/2020/08/12/状态码对应含义/</a></p>
<p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="get和post的区别"><a class="markdownIt-Anchor" href="#get和post的区别"></a> get和post的区别</h3>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ecb5faecbbb9be2abfbb41e6a78a6c6c.png" alt="" /><br />
<img src="https://img-blog.csdnimg.cn/img_convert/e90c4340cfc7cc1e40bd165e0637440b.png" alt="" /><br />
更多区别：<a href="https://www.cnblogs.com/logsharing/p/8448446.html">https://www.cnblogs.com/logsharing/p/8448446.html</a></p>
<h3 id="原生js实现ajax请求"><a class="markdownIt-Anchor" href="#原生js实现ajax请求"></a> 原生JS实现ajax请求</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        options = options ||&#123;&#125;;  <span class="comment">//调用函数时如果options没有指定，就给它赋值&#123;&#125;,一个空的Object</span></span><br><span class="line">        options.type=(options.type || <span class="string">&quot;GET&quot;</span>).toUpperCase();<span class="comment">/// 请求格式GET、POST，默认为GET</span></span><br><span class="line">        options.dataType=options.dataType || <span class="string">&quot;json&quot;</span>;    <span class="comment">//响应数据格式，默认json</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> params=formatParams(options.data);<span class="comment">//options.data请求的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> xhr;</span><br><span class="line">        <span class="comment">//考虑兼容性</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">            xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveObject)&#123;<span class="comment">//兼容IE6以下版本</span></span><br><span class="line">            xhr=<span class="keyword">new</span> ActiveXobject(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动并发送一个请求</span></span><br><span class="line">        <span class="keyword">if</span>(options.type==<span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>,options.url+<span class="string">&quot;?&quot;</span>+params,<span class="literal">true</span>);</span><br><span class="line">            xhr.send(<span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(options.type==<span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">            xhr.open(<span class="string">&quot;post&quot;</span>,options.url,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置表单提交时的内容类型</span></span><br><span class="line">            <span class="comment">//Content-type数据请求的格式</span></span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">            xhr.send(params);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    设置有效时间</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readySate!=<span class="number">4</span>)&#123;</span><br><span class="line">                xhr.abort();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,options.timeout)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    接收</span></span><br><span class="line">    <span class="comment">//     options.success成功之后的回调函数  options.error失败后的回调函数    //xhr.responseText,xhr.responseXML  获得字符串形式的响应数据或者XML形式的响应数据</span></span><br><span class="line">        xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> status=xhr.status;</span><br><span class="line">                <span class="keyword">if</span>(status&gt;=<span class="number">200</span>&amp;&amp; status&lt;<span class="number">300</span> || status==<span class="number">304</span>)&#123;</span><br><span class="line">                  options.success&amp;&amp;options.success(xhr.responseText,xhr.responseXML);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    options.error&amp;&amp;options.error(status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//格式化请求参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">formatParams</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data)&#123;</span><br><span class="line">            arr.push(<span class="built_in">encodeURIComponent</span>(name)+<span class="string">&quot;=&quot;</span>+<span class="built_in">encodeURIComponent</span>(data[name]));</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push((<span class="string">&quot;v=&quot;</span>+<span class="built_in">Math</span>.random()).replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> arr.join(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//基本的使用实例</span></span><br><span class="line">    ajax(&#123;</span><br><span class="line">        url:<span class="string">&quot;http://server-name/login&quot;</span>,</span><br><span class="line">        type:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            username:<span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">            password:<span class="string">&#x27;password&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        dataType:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        timeout:<span class="number">10000</span>,</span><br><span class="line">        contentType:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">　　　　　　。。。。。。<span class="comment">//服务器返回响应，根据响应结果，分析是否登录成功</span></span><br><span class="line">        &#125;,        <span class="comment">//异常处理</span></span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>Promise的出现主要是解决地狱回调的问题，比如你需要结果需要请求很多个接口，这些接口的参数需要另外那个的接口返回的数据作为依赖，这样就需要我们一层嵌套一层，但是有了Promise 我们就无需嵌套</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">optionsOverride</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//将传入的参数与默认的合并</span></span><br><span class="line">    <span class="keyword">var</span> options = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> ajaxOptions)&#123;</span><br><span class="line">        options[k] = optionsOverride[k] || ajaxOptions[k]</span><br><span class="line">    &#125;</span><br><span class="line">    options.async = options.async === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> xhr = options.xhr = options.xhr || <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        xhr.open(options.method,options.url,options.async)</span><br><span class="line">        xhr.timeout = options.timeout</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> options.headers)&#123;</span><br><span class="line">            xhr.setRuquestHeader(k,options,headers[k])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注册xhr对象事件</span></span><br><span class="line">        xhr.onprogress = options.onprogress</span><br><span class="line">        xhr.onload.onprogress = options.onploadprogress</span><br><span class="line">        xhr.responseType = options.dataType</span><br><span class="line"></span><br><span class="line">        xhr.onabort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(&#123;</span><br><span class="line">                errorType: <span class="string">&#x27;abort_error&#x27;</span>,</span><br><span class="line">                xhr:xhr</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(&#123;</span><br><span class="line">                errorType: <span class="string">&#x27;timeout_error&#x27;</span>,</span><br><span class="line">                xhr:xhr</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(&#123;</span><br><span class="line">                errorType: <span class="string">&#x27;onerror&#x27;</span>,</span><br><span class="line">                xhr:xhr</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        xhr.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status&lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">                resolve(xhr)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    errorType: <span class="string">&#x27;status_error&#x27;</span>,</span><br><span class="line">                    xhr:xhr</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xhr.send(options.data)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    errorType: <span class="string">&#x27;send_error&#x27;</span>,</span><br><span class="line">                    error:e</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考文章：<br><br />
<a href="https://www.cnblogs.com/elexmiumiu/p/12196122.html">https://www.cnblogs.com/elexmiumiu/p/12196122.html</a><br><br />
<a href="https://www.cnblogs.com/qing-5/p/11368009.html">https://www.cnblogs.com/qing-5/p/11368009.html</a></p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>es6--ES6特性</title>
    <url>/2020/08/25/ES6%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="es6es6特性"><a class="markdownIt-Anchor" href="#es6es6特性"></a> es6–ES6特性</h2>
<a id="more"></a>
<p><strong>常用的es6新特性：</strong></p>
<ol>
<li>let &amp;&amp; const<br />
let命令也用于声明对象，但是作用域为局部。</li>
<li>iterable类型<br />
为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型，具有iterable类型的集合可以通过新的for … of循环来遍历。</li>
<li>解构赋值</li>
<li>箭头函数</li>
<li>类</li>
</ol>
<p>es6 比 es5 增加了很多特殊的方法，如果你遇到了这些特殊的方法，你就可以确定它是 es6。<br />
如果你的代码中没有引用这些特殊的方法，那我们就可以认为他是 es5 的。<br />
所以前提你需要了解 es6 的语法才能做判断，高频使用的特性有箭头函数、解构赋值、let、const。</p>
<p>es5的继承是通过原型或者是构造函数机制来实现，es6用过class关键字定义类，里面有构造方法，类之间通过extends关键字实现，<br />
子类必须在constructor方法中调用super方法</p>
<p>let和const有了块级作用域，变量声明不会提升相比于var</p>
<p><strong>es6generator:</strong><br />
加粗样式generator函数就是一个封装的异步任务，也就是异步任务的容器，执行 Generator 函数会返回一个遍历器对象,async函数的实现，就是将Generator函数和自动执行器，包装在一个函数里<br />
<strong>ES6 和node的commonjs模块化规范的区别。</strong><br />
es6是js的增强版，是js的语法规范，commonjs都只是为了解决js文件之间的依赖和引用问题，所以是一种js的包管理规范，其中的代表是Node遵循commonjs规范<br />
<strong>箭头函数，以及他们的this。</strong><br />
所谓的箭头函数是在写法上面很简便和之前相比，类似于:(a,b)=&gt;{return a+b;}，箭头函数的this默认指向在定义它时,它所处的对象,而不是执行时的对象, 定义它的时候,可能环境是window（即继承父级的this）</p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>es6--promise</title>
    <url>/2020/08/25/promise/</url>
    <content><![CDATA[<h2 id="es6promise"><a class="markdownIt-Anchor" href="#es6promise"></a> es6–promise</h2>
<a id="more"></a>
<p>promise是一个异步函数，主要是为了解决异步处理回调地狱(也就是循环嵌套的问题)而产生的，有3种状态，Fulfilled 为成功的状态，Rejected 为失败的状态，Pending 既不是 Fulfilld 也不是 Rejected 的状态，可以理解为 Promise 对象实例创建时候的初始状态<br />
参考 <a href="https://www.jianshu.com/p/063f7e490e9a">https://www.jianshu.com/p/063f7e490e9a</a><br />
<a href="https://www.jianshu.com/p/1b63a13c2701">https://www.jianshu.com/p/1b63a13c2701</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class="line"> if (&#x2F;* 异步操作成功 *&#x2F;)&#123;</span><br><span class="line"> resolve(value);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> reject(error);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function(value) &#123;</span><br><span class="line"> &#x2F;&#x2F; success</span><br><span class="line">&#125;, function(value) &#123;</span><br><span class="line"> &#x2F;&#x2F; failure</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>窗口坐标，深拷贝与浅拷贝，可复用的事件监听方法，Js的字符串类型，正则表达式的函数使用</title>
    <url>/2020/08/23/%E7%AA%97%E5%8F%A3%E5%9D%90%E6%A0%87%EF%BC%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%96%B9%E6%B3%95%EF%BC%8CJs%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="窗口坐标"><a class="markdownIt-Anchor" href="#窗口坐标"></a> 窗口坐标</h2>
<a id="more"></a>
<p>1	clientHeight和clientWidth用于描述元素内尺寸，是指 元素内容+内边距 大小，不包括边框（IE下实际包括）、外边距、滚动条部分<hr><br />
2	offsetHeight和offsetWidth用于描述元素外尺寸，是指 元素内容+内边距+边框，不包括外边距和滚动条部分<hr><br />
3	clientTop和clientLeft返回内边距的边缘和边框的外边缘之间的水平和垂直距离，也就是左，上边框宽度<hr><br />
4	offsetTop和offsetLeft表示该元素的左上角（边框外边缘）与已定位的父容器（offsetParent对象）左上角的距离<hr><br />
5	offsetParent对象是指元素最近的定位（relative,absolute）祖先元素，递归上溯，如果没有祖先元素是定位的话，会返回null<hr><br />
可以通过调用元素的getBoundingClientRect方法。方法返回一个有left、right、top、bottom属性的对象，分别表示元素四个位置的相对于视口的坐标。getBoundingClientRect所返回的坐标包含元素的内边距和边框，不包含外边距</p>
<h2 id="js的字符串类型正则表达式的函数怎么使用"><a class="markdownIt-Anchor" href="#js的字符串类型正则表达式的函数怎么使用"></a> Js的字符串类型，正则表达式的函数怎么使用</h2>
<p>1	charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码</p>
<hr>
2	fromCharCode方法从一些Unicode字符串中返回一个字符串<hr>
3	charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串<hr>
4	slice方法返回字符串的片段<hr>
5	substring方法返回位于String对象中指定位置的子字符串<hr>
6	substr方法返回一个从指定位置开始的指定长度的子字符串<hr>
7	indexOf方法放回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1<hr>
8	lastIndexOf方法返回String对象中字符串最后出现的位置。如果没有匹配到子字符串，则返回-1<hr>
9	search方法返回与正则表达式查找内容匹配的第一个字符串的位置<hr>
10	concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接<hr>
11	将一个字符串分割为子字符串，然后将结果作为字符串数组返回<hr>
12	toLowerCase方法返回一个字符串，该字符串中的字母被转换成小写<hr>
13	toUpperCase方法返回一个字符串，该字符串中的所有字母都被转换为大写字母<br><hr>
**js正则表达式之replace函数用法：**
功能：	replace函数返回根据正则表达式进行文字替换后的字符串的复制
格式：	stringObj.replace(rgExp, replaceText) 
参数：	字符串stringObj，rgExp正则表达式，replaceText所替换的内容 <br>
**js正则表达式之test函数用法**
功能介绍：该方法的返回值是布尔值，通过该值可以匹配字符串中是否存在于正则表达式相匹配的结果，如果有匹配内容，返回ture，如果没有匹配内容返回false，该方法常用于判断用户输入数据的合法性，比如检验Email的合法性<br><hr>
<p><strong>js正则表达式之match函数用法</strong></p>
<p>功能：	使用正则表达式模式对字符串执行查找，并将包含查找的结果作为数组返回<br />
格式：	stringObj.match(rgExp) stringObj为字符串必选 rgExp为正则表达式必选项<br />
返回值：	如果能匹配则返回结果数组，如果不能匹配返回null<br></p>
<hr>
<p><strong>js正则表达式之search方法讲解</strong><br />
功能：	返回与正则表达式查找内容匹配的第一个子字符串的位置<br />
语法：	stringObj.search(rgExp) stringObj 必选项 rgExp正则表达式<br />
返回值：	search 方法指明是否存在相应的匹配。如果找到一个匹配，search方法将返回一个整数值，指明这个匹配距离字符串开始的偏移位置。如果没有找到匹配，则返回 -1 <br><hr></p>
<p><strong>js正则表达式之exec方法讲解</strong><br />
功能说明：该函数通过对指定你的字符串进行一次匹配检测，获取字符串中的第一个与正则表达式的内容，并且将匹配的内容和子匹配的结果存放在返回数组中。<br />
基本方法：objReg.exec(string) ，objReg，RegExp对象的名称 ，string，要进行匹配的字符串。</p>
<h2 id="深拷贝与浅拷贝"><a class="markdownIt-Anchor" href="#深拷贝与浅拷贝"></a> 深拷贝与浅拷贝</h2>
<p>浅拷贝不能完成需求，对于属性是对象的时候，只是进行简单的地址拷贝，其引用关系也在.<br />
<img src="https://img-blog.csdnimg.cn/20200823165929761.png#pic_center" alt="在这里插入图片描述" /><br />
深拷贝和浅拷贝的区别：是在对象状态中包含其它对象的引用的时候，当拷贝一个对象时，如果需要拷贝这个对象引用的对象，则是深拷贝，否则是浅拷贝。</p>
<p>对于浅拷贝和深拷贝的区别简单的说就是：浅复制会导致 obj 和 obj1 指向同一块内存地址，大概的示意图如下。而深复制一般都是开辟一块新的内存地址，将原对象的各个属性逐个复制出去。具体回答可参考https://www.zhihu.com/question/23031215  邹润阳的回答。 这里主要讲的是深拷贝整个函数是怎么实现的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj1 &#x3D; &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        b: 10</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;浅拷贝</span><br><span class="line">function copy(obj) &#123;</span><br><span class="line">    var newObj &#x3D; &#123;&#125;;</span><br><span class="line">    for (var attr in obj) &#123;</span><br><span class="line">        newObj[attr] &#x3D; obj[attr]</span><br><span class="line">    &#125;</span><br><span class="line">    return newObj</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;深拷贝</span><br><span class="line">function deepCopy(obj) &#123;</span><br><span class="line">    var newObj &#x3D; &#123;&#125;</span><br><span class="line">    if (typeof obj !&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">        return obj</span><br><span class="line">    &#125;</span><br><span class="line">    for (var attr in obj) &#123;</span><br><span class="line">        newObj[attr] &#x3D; deepCopy(obj[attr])</span><br><span class="line">    &#125;</span><br><span class="line">    return newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj2 &#x3D; deepCopy(obj1) &#x2F;&#x2F;第一层循环为 obj2 &#x3D; deep  第二层循环为 newObj[b] newObj[a] &#x3D; &#123;b:10&#125;</span><br><span class="line">alert(obj2.a.b) &#x2F;&#x2F;10</span><br><span class="line">alert(obj1.a.b) &#x2F;&#x2F;10</span><br></pre></td></tr></table></figure>
<p>主要是用了递归的思想：</p>
<p>obj2=deepCopy(obj1)-----&gt;调用deepCopy函数，传入的参数是obj1.第一个if判断是否是对象，如果是则执行下面的for/in循环，如果不是则返回obj。第一个obj1显然是对象，所以执行for/in循环。得到的结果是：</p>
<p>newObj[a]=deepCopy(obj1[a])=deepCopy({b:10})-----&gt;再次调用deepCopy函数，传入的参数是对象{b:10}，执行for/in循环。得到的结果是：<br />
newObj[b]=deepCopy({b:10}[b])=deepCopy(10)--------&gt;再调用deepCopy函数，传入的参数是{10}，不是对象，返回obj，也就是10，得到的结果是：<br />
newObj[b]=deepCopy({b:10}[b])=deepCopy(10)=10.<br />
至此，整个“递”的过程就完成了。下面是“归”的过程。也就是一个相反的过程</p>
<p>deepCopy(10)=10.  代入上面的第二步，执行for/in循环得到newObj[b]=10，然后return newObj={b:10}<br />
代入上面的第一步，执行for/in循环得到newObj[a]=deepCopy(obj1[a])=deepCopy({b:10})   deepCopy函数执行返回就是第一步的return newObj={b:10}，所以newObj[a]={b:10}，return newObj={a:{b:10}}<br />
在return newObj；上添加console.log(newObj);输出结果如下：<br />
<img src="https://img-blog.csdnimg.cn/20200823172556868.png#pic_center" alt="在这里插入图片描述" /><br />
可以看到的确是return了两次。第一次为{b:10},第二次为{a:{b:10}}；</p>
<p>另一种实现方法是parse和stringify</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; &#123;</span><br><span class="line">    name:&#123;age:100&#125;</span><br><span class="line">&#125;</span><br><span class="line">var str &#x3D; JSON.stringify(a)</span><br><span class="line">var b &#x3D; JSON.parse(str)</span><br><span class="line">b.name.age &#x3D; 20</span><br><span class="line">alert(a.name.age) &#x2F;&#x2F;20</span><br></pre></td></tr></table></figure>
<h2 id="可复用的事件监听方法"><a class="markdownIt-Anchor" href="#可复用的事件监听方法"></a> 可复用的事件监听方法</h2>
<p>当同一个对象使用.onclick的写法触发多个方法的时候，后一个方法会把前一个方法覆盖掉，也就是说，在对象的onclick事件发生时，只会执行最后绑定的方法。而用事件监听则不会有覆盖的现象，每个绑定的事件都会被执行。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;eventyuan&quot;&gt;点击1&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;eventyuan1&quot;&gt;点击2&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F; 当同一个对象使用.onclick的写法触发多个方法的时候， 后一个方法会把前一个方法覆盖掉， 也就是说，</span><br><span class="line">        &#x2F;&#x2F; 在对象的onclick事件发生时， 只会执行最后绑定的方法。 而用事件监听则不会有覆盖的现象， 每个绑定的事件都会被执行。 如下：</span><br><span class="line">        var eventOne &#x3D; function()&#123;</span><br><span class="line">            alert(&#39;第一个监听事件&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        var eventTwo &#x3D; function()&#123;</span><br><span class="line">            alert(&#39;第二个监听事件&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        window.onload &#x3D; function()&#123;</span><br><span class="line">            var btn &#x3D; document.querySelector(&#39;.eventyuan&#39;)</span><br><span class="line">            btn.addEventListener(&#39;click&#39;,eventOne)</span><br><span class="line">            btn.addEventListener(&#39;click&#39;,eventTwo)</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 输出第一个监听事件 第二个监听事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 采用事件监听给对象绑定方法后，可以解除相应的绑定，写法如下</span><br><span class="line">        var eventOne &#x3D; function()&#123;</span><br><span class="line">            alert(&#39;第一个监听事件&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        var eventTwo &#x3D; function()&#123;</span><br><span class="line">            alert(&#39;第二个监听事件&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        window.onload &#x3D; function()&#123;</span><br><span class="line">            var btn1 &#x3D; document.querySelector(&#39;.eventyuan1&#39;)</span><br><span class="line">            btn1.addEventListener(&#39;click&#39;,eventOne)</span><br><span class="line">            btn1.addEventListener(&#39;click&#39;,eventTwo)</span><br><span class="line">            btn1.removeEventListener(&#39;click&#39;,eventOne)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax</title>
    <url>/2020/08/22/ajax/</url>
    <content><![CDATA[<h2 id="原生创建ajax的五个步骤"><a class="markdownIt-Anchor" href="#原生创建ajax的五个步骤"></a> 原生创建ajax的五个步骤</h2>
<a id="more"></a>
<p>代码引自https://www.cnblogs.com/0x29a/p/11231950.html</p>
<h3 id="1创建xmlhttprequest异步对象"><a class="markdownIt-Anchor" href="#1创建xmlhttprequest异步对象"></a> 1.创建XMLHttpRequest异步对象</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xhr &#x3D; new XMLHttpRequest()</span><br></pre></td></tr></table></figure>
<h3 id="2设置回调函数"><a class="markdownIt-Anchor" href="#2设置回调函数"></a> 2.设置回调函数</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.onreadystatechange &#x3D; callback</span><br></pre></td></tr></table></figure>
<h3 id="3使用open方法与服务器简历连接"><a class="markdownIt-Anchor" href="#3使用open方法与服务器简历连接"></a> 3.使用open方法与服务器简历连接</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;get方式</span><br><span class="line">xhr.open(&#39;get&#39;,&#39;text.php&#39;,true)</span><br><span class="line">&#x2F;&#x2F;post方式，要设置请求头</span><br><span class="line">xhr.open(&#39;post&#39;,&#39;test.php&#39;,true)</span><br><span class="line">xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application&#x2F;x-www-form-urlencoded&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="4发送数据"><a class="markdownIt-Anchor" href="#4发送数据"></a> 4.发送数据</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; get方法不需要传递数据</span><br><span class="line">xhr.send(null)</span><br><span class="line">&#x2F;&#x2F; post 需要传递数据</span><br><span class="line">xhr.send(&#39;name&#x3D;xxx&amp;age&#x3D;18&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="5-在回调函数中针对不同的响应状态进行处理"><a class="markdownIt-Anchor" href="#5-在回调函数中针对不同的响应状态进行处理"></a> 5. 在回调函数中针对不同的响应状态进行处理</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function callback()&#123;</span><br><span class="line">      &#x2F;&#x2F; 判断异步对象的状态</span><br><span class="line">    if (xhr.readyState &#x3D;&#x3D; 4) &#123;</span><br><span class="line">          &#x2F;&#x2F; 判断交互是否成功</span><br><span class="line">          if (xhr.status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">              &#x2F;&#x2F; 获取服务器响应的数据</span><br><span class="line">              var res &#x3D; xhr.responseText</span><br><span class="line">                &#x2F;&#x2F; 解析数据</span><br><span class="line">              res &#x3D; JSON.parse(res)</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jquery中的ajax"><a class="markdownIt-Anchor" href="#jquery中的ajax"></a> jquery中的ajax</h2>
<p>代码引自 <a href="https://www.cnblogs.com/enumx/p/12326676.html">https://www.cnblogs.com/enumx/p/12326676.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	type:&#39;POST&#39;, &#x2F;&#x2F; 规定请求的类型（GET 或 POST）</span><br><span class="line">	url:uploadV, &#x2F;&#x2F; 请求的url地址</span><br><span class="line">	dataType:&#39;json&#39;, &#x2F;&#x2F;预期的服务器响应的数据类型 </span><br><span class="line">	data:&#123;&#125;,&#x2F;&#x2F;规定要发送到服务器的数据</span><br><span class="line">	beforeSend:function()&#123; &#x2F;&#x2F;发送请求前运行的函数（发送之前就会进入这个函数）</span><br><span class="line">		&#x2F;&#x2F; ....</span><br><span class="line">	&#125;,</span><br><span class="line">	success: function(result)&#123; &#x2F;&#x2F; 当请求成功时运行的函数</span><br><span class="line">		&#x2F;&#x2F;...</span><br><span class="line">	&#125;,</span><br><span class="line">	error:function(result)&#123; &#x2F;&#x2F;失败的函数</span><br><span class="line">		&#x2F;&#x2F;...</span><br><span class="line">	&#125;,</span><br><span class="line">	complete:function()&#123; &#x2F;&#x2F;请求完成时运行的函数（在请求成功或失败之后均调用，即在 success 和 error 函数之后，不管成功还是失败 都会进这个函数）</span><br><span class="line">		&#x2F;&#x2F; ...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>async</th>
<th>布尔值，表示请求是否异步处理。默认是 true。</th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeSend(xhr)</td>
<td>发送请求前运行的函数。</td>
</tr>
<tr>
<td>cache</td>
<td>布尔值，表示浏览器是否缓存被请求页面。默认是 true</td>
</tr>
<tr>
<td>complete(xhr,status)</td>
<td>请求完成时运行的函数（在请求成功或失败之后均调用，即在 success 和 error 函数之后）</td>
</tr>
<tr>
<td>contentType</td>
<td>发送数据到服务器时所使用的内容类型。默认是：”application/x-www-form-urlencoded”。</td>
</tr>
<tr>
<td>context</td>
<td>为所有 AJAX 相关的回调函数规定 “this” 值。</td>
</tr>
<tr>
<td>password</td>
<td>规定在 HTTP 访问认证请求中使用的密码。</td>
</tr>
<tr>
<td>jsonpCallback</td>
<td>在一个 jsonp 中规定回调函数的名称。</td>
</tr>
<tr>
<td>jsonp</td>
<td>在一个 jsonp 中重写回调函数的字符串。</td>
</tr>
<tr>
<td>ifModified</td>
<td>布尔值，规定是否仅在最后一次请求以来响应发生改变时才请求成功。默认是 false。</td>
</tr>
<tr>
<td>global</td>
<td>布尔值，规定是否为请求触发全局 AJAX 事件处理程序。默认是 true。</td>
</tr>
<tr>
<td>dataType</td>
<td>预期的服务器响应的数据类型。</td>
</tr>
<tr>
<td>error(xhr,status,error)</td>
<td>如果请求失败要运行的函数。</td>
</tr>
<tr>
<td>dataFilter(data,type)</td>
<td>用于处理 XMLHttpRequest 原始响应数据的函数。</td>
</tr>
<tr>
<td>data</td>
<td>规定要发送到服务器的数据。</td>
</tr>
<tr>
<td>url</td>
<td>规定发送请求的 URL。默认是当前页面。</td>
</tr>
<tr>
<td>type</td>
<td>规定请求的类型（GET 或 POST）。</td>
</tr>
<tr>
<td>traditional</td>
<td>布尔值，规定是否使用参数序列化的传统样式。</td>
</tr>
<tr>
<td>timeout</td>
<td>设置本地的请求超时时间（以毫秒计）。</td>
</tr>
<tr>
<td>success(result,status,xhr)</td>
<td>当请求成功时运行的函数。</td>
</tr>
<tr>
<td>scriptCharset</td>
<td>规定请求的字符集。</td>
</tr>
<tr>
<td>processData</td>
<td>布尔值，规定通过请求发送的数据是否转换为查询字符串。默认是 true</td>
</tr>
<tr>
<td>xhr</td>
<td>用于创建 XMLHttpRequest 对象的函数</td>
</tr>
<tr>
<td>username</td>
<td>规定在 HTTP 访问认证请求中使用的用户名。</td>
</tr>
</tbody>
</table>
<h2 id="xmlhttprequest取得相应"><a class="markdownIt-Anchor" href="#xmlhttprequest取得相应"></a> XMLHttpRequest取得相应</h2>
<ul>
<li>responseText:获得字符串形式的响应数据</li>
<li>responseXML：获得xml形式的响应数据</li>
<li>status和statusText：以数字和文本形势返回http转态码</li>
<li>getAllResponseHeader():获得所有的相应</li>
<li>getResponseHeader()：查询相应中的某个字段的值</li>
<li>readState属性</li>
</ul>
<h2 id="readystate的五种返回值所代表的意义"><a class="markdownIt-Anchor" href="#readystate的五种返回值所代表的意义"></a> readystate的五种返回值所代表的意义：</h2>
<ul>
<li>0（未初始化） 还没调用open（）方法</li>
<li>1（载入）已经调用send方法(),正在发送请求</li>
<li>2（载入完成）send（）方法已经完成，已收到相应</li>
<li>3（解析）正在解析响应内容</li>
<li>4（完成）相应内容解析完成，可在客户端调用。</li>
</ul>
<h2 id="ajax中status几种常态说明"><a class="markdownIt-Anchor" href="#ajax中status几种常态说明"></a> ajax中status几种常态说明：</h2>
<ul>
<li>100——客户必须继续发出请求</li>
<li>101——客户要求服务器根据请求转换HTTP协议版本</li>
<li>200——成功</li>
<li>201——提示知道新文件的URL</li>
<li>300——请求的资源可在多处得到</li>
<li>301——删除请求数据</li>
<li>404——没有发现文件、查询或URl</li>
<li>500——服务器产生内部错</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>两栏布局,DPI,Attribute / property,流式布局和响应式布局，BFC,雪碧图 （ 精灵图 ），SVG，浏览器兼容问题，“::before”和“:after”中的双冒号和单冒号的区别</title>
    <url>/2020/08/19/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80,DPI,Attribute%20%EF%BC%8Cproperty,%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E5%92%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%EF%BC%8CBFC,%E9%9B%AA%E7%A2%A7%E5%9B%BE%20%EF%BC%88%20%E7%B2%BE%E7%81%B5%E5%9B%BE%20%EF%BC%89%EF%BC%8CSVG%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98before%E5%92%8Cafter%E4%B8%AD%E7%9A%84%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="两栏布局dpiattribute-property流式布局和响应式布局bfc雪碧图-精灵图-svg浏览器兼容问题before和after中的双冒号和单冒号的区别"><a class="markdownIt-Anchor" href="#两栏布局dpiattribute-property流式布局和响应式布局bfc雪碧图-精灵图-svg浏览器兼容问题before和after中的双冒号和单冒号的区别"></a> 两栏布局,DPI,Attribute / property,流式布局和响应式布局，BFC,雪碧图 （ 精灵图 ），SVG，浏览器兼容问题，“::before”和“:after”中的双冒号和单冒号的区别</h2>
<a id="more"></a>
<h2 id="两栏布局"><a class="markdownIt-Anchor" href="#两栏布局"></a> 两栏布局</h2>
<p>1	margin-bottom和padding-bottom<br />
2	table-row和table-cell<br />
3	flex布局</p>
<h2 id="dpi移动端"><a class="markdownIt-Anchor" href="#dpi移动端"></a> DPI（移动端）</h2>
<p>Dpi:每英寸包含点的数量(dots per inch)<br />
普通屏幕通常包含96dpi,一般将2倍于此的屏幕称之为高分屏，即大于等于192dpi的屏幕，比如Mac视网膜屏就达到了192dpi(即2dppx),打印时一般会需要更大的dpi;<br />
1dppx=96dpi	1dpi约等于0.39dpcm	1dpcm约等于2.54dpi<br />
1in =2.54cm=25.4mm=101.6q=72pt=6pc=96px;<br />
支持IE9+  firefox3.5+  chrome29.0+</p>
<h2 id="attribute-property"><a class="markdownIt-Anchor" href="#attribute-property"></a> Attribute / property</h2>
<p>Property	它是DOM中的属性，是javascript里边的对象<br />
Attribute	它是HTML标签上的特性，它的值只能够是字符串</p>
<h2 id="流式布局和响应式布局"><a class="markdownIt-Anchor" href="#流式布局和响应式布局"></a> 流式布局和响应式布局</h2>
<table>
<thead>
<tr>
<th>流式布局</th>
<th>响应式布局</th>
</tr>
</thead>
<tbody>
<tr>
<td>也叫fluid,当上面一行的空间不够容纳新的TextView时候才开辟下一行的空间，场景：主要用于关键词搜索或者热门标签等场景；他主要是按照页面元素的宽度按照屏幕分辨率进行适配调整，但整体布局不变,使用%百分比定义宽度，高度大都是用px来固定，可以根据可视区域和父元素的实时尺寸来调整，尽可能适应各种分辨率</td>
<td>主要是实现不同屏幕分辨率的终端上浏览网页的不同展示方式，通过响应式设计能使网站在手机和平板电脑上有更好的浏览阅读体验；首先设置meta标签，通过媒体查询来设置样式Media Queries,然后再设置多种试图宽度</td>
</tr>
</tbody>
</table>
<h2 id="bfc"><a class="markdownIt-Anchor" href="#bfc"></a> BFC</h2>
<p>BFC：简单说，它是一种属性，这种属性会影响着元素的定位以及与其兄弟元素之间的相互作用<br />
如何创建BFC：当一个HTML元素满足下面条件的任何一点，都可以产生BFC,常见的，float的值不为‘none’，overflow的值不为‘visible’,display的值为‘table-cell’,‘table-caption’,or‘inline-block’中的任何一个，position的值不为‘static’或‘relative’中的任何一个创建一个BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC仍然属于文档中的普通流</p>
<h2 id="雪碧图-精灵图"><a class="markdownIt-Anchor" href="#雪碧图-精灵图"></a> 雪碧图 （ 精灵图 ）</h2>
<p>是把网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量，该图片使用css background和background-position属性渲染，这也就意味着你的标签变得更复杂了，图片是在css中定义，并非在<img>标签中，优点：减少加载网页图片时对服务器的请求次数，可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。</p>
<h2 id="svg"><a class="markdownIt-Anchor" href="#svg"></a> SVG</h2>
<p>SVG它是可伸缩矢量图形，用来定义用于网络的基于矢量的图形，图形在放大或者改变尺寸的情况，其图形质量不会有所损失。<br />
33.	工作中遇到的浏览器兼容问题有哪些？你都知道哪些常用的HACK技巧？</p>
<h2 id="浏览器兼容问题"><a class="markdownIt-Anchor" href="#浏览器兼容问题"></a> 浏览器兼容问题</h2>
<p>1：不同浏览器的默认初始值不同。<br />
解决方法：引入全局控制样式，或者使用第三方<br />
2：块属性标签float后，又有横行的margin的情况下，在IE6显示margin比设置的大。<br />
解决方法：在float的标签样式控制中加入display:inline,将其转化为行内属性。<br />
3：设置小于10px高度标签，在IE6,7,无法正常显示设置高度。<br />
解决方法：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度<br />
4：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug<br />
解决方法：在display:block;后面加入display:inline;display:table;<br />
5：图片默认有间距。<br />
解决方法：使用float属性为img布局。<br />
6：标签最低高度设置min-height不兼容。<br />
解决方法：如果我们要设置一个标签的最小高度200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;}<br />
<strong>常用的HACK技巧</strong><br />
Ie浏览器hack如下<br />
_nowamagic:1px;-----------ie6 *nowamagic:1px;-----------ie7 nowamagic:1px\0;----------ie89 nowamagic:1px\9\0;--------ie9  :root nowamagic:1px;    ----ie9<br />
Firefox 与 Chrome 的 Hack<br />
Firefox:@-moz-document url-prefix()  /<em>写在选择器外层时（只可写在此处）：Firefox only</em>/<br />
Chrome:@media screen and (-webkit-min-device-pixel-ratio:0)  /<em>写在选择器外层时（只可写在此处）：Chrome only</em>/</p>
<h2 id="before和after中的双冒号和单冒号的区别"><a class="markdownIt-Anchor" href="#before和after中的双冒号和单冒号的区别"></a> “::before”和“:after”中的双冒号和单冒号的区别</h2>
<p>如果你的网站只需要兼容webkit、firefox、opera等浏览器，建议对于伪元素采用双冒号的写法，如果不得不兼容IE浏览器，还是用CSS2的单冒号写法比较安全</p>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>css基础</tag>
      </tags>
  </entry>
  <entry>
    <title>盒模型，box-sizing，CSS3新特性，伪类，伪元素，锚伪类，使用CSS实现隐藏元素的方式,盒子在页面水平和垂直居中, inline和inline-block,块级元素,行级元素有哪些以及特点 ,网格布局,传统表格布局</title>
    <url>/2020/08/19/%E7%9B%92%E6%A8%A1%E5%9E%8B%EF%BC%8Cbox-sizing%EF%BC%8CCSS3%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%8C%E4%BC%AA%E7%B1%BB%EF%BC%8C%E4%BC%AA%E5%85%83%E7%B4%A0%EF%BC%8C%E9%94%9A%E4%BC%AA%E7%B1%BB%EF%BC%8C%E4%BD%BF%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E5%BC%8F,%E7%9B%92%E5%AD%90%E5%9C%A8%E9%A1%B5%E9%9D%A2%E6%B0%B4%E5%B9%B3%E5%92%8C%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD,%20inline%E5%92%8Cinline-block,%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0,%E8%A1%8C%E7%BA%A7%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BB%A5%E5%8F%8A%E7%89%B9%E7%82%B9%20,%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80,%E4%BC%A0%E7%BB%9F%E8%A1%A8%E6%A0%BC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="盒模型box-sizingcss3新特性伪类伪元素锚伪类使用css实现隐藏元素的方式盒子在页面水平和垂直居中-inline和inline-block块级元素行级元素有哪些以及特点-网格布局传统表格布局"><a class="markdownIt-Anchor" href="#盒模型box-sizingcss3新特性伪类伪元素锚伪类使用css实现隐藏元素的方式盒子在页面水平和垂直居中-inline和inline-block块级元素行级元素有哪些以及特点-网格布局传统表格布局"></a> 盒模型，box-sizing，CSS3新特性，伪类，伪元素，锚伪类，使用CSS实现隐藏元素的方式,盒子在页面水平和垂直居中, inline和inline-block,块级元素,行级元素有哪些以及特点 ,网格布局,传统表格布局</h2>
<a id="more"></a>
<h3 id="盒模型"><a class="markdownIt-Anchor" href="#盒模型"></a> 盒模型：</h3>
<p>margin(外边距)   padding(内边距)   border(边框)  content(内容)</p>
<h2 id="box-sizing"><a class="markdownIt-Anchor" href="#box-sizing"></a> box-sizing:</h2>
<p>content-box  / border-box  /  inherit有以下三个属性<br><br />
1：content-box:指定元素的宽度和高度（最小/最大属性）适用于box的宽度和高度，元素的填充和边框布局和绘制指定宽度和高度除外.<br><br />
2 ：border-box:指定宽度和高度（最小/最大属性）确定元素边框box，对元素指定宽度和高度包括padding和border的指定，内容的宽度和高度减去各自双方该边框和填充的宽度从指定的“宽度”和“高度”属性计算<br><br />
3 ：inherit:指定box-sizing属性的值，应该从父元素继承</p>
<h2 id="c3新特性"><a class="markdownIt-Anchor" href="#c3新特性"></a> C3新特性：</h2>
<p>1	CSS实现圆角（border-radius）,阴影（box-shadow）,边框图片border-image<br><br />
2	对文字加特效（text-shadow）,强制文本换行（word-wrap）,线性渐变（linear-gradient）<br><br />
3	旋转，缩放，定位，倾斜： transform:rotate(90deg)  scale(0.85,0.90)  translate(0px,-30px)  skew(-9deg,0deg)<br><br />
4	增加了更多的CSS选择器，多背景，rgba();<br><br />
5	在CSS3中唯一引入的伪元素是::selection;<br><br />
6	媒体查询（@media）,多栏布局（flex）<br></p>
<h2 id="伪类用于向某些选择器添加特殊的效果"><a class="markdownIt-Anchor" href="#伪类用于向某些选择器添加特殊的效果"></a> 伪类：用于向某些选择器添加特殊的效果</h2>
<p>1	：hover 将样式添加到鼠标悬浮的元素<br><br />
2	：active 将样式添加到被激活的元素<br><br />
3	：focus 将样式添加到获得焦点的元素<br><br />
4	：link 将样式添加到未被访问过的链接<br><br />
5	：visited 将样式添加到被访问过的链接<br><br />
6	：first-child 将样式添加到元素的第一个子元素<br><br />
7	：lang 定义指定的元素中使用的语言<br></p>
<h2 id="伪元素用于将特殊的效果添加到某些选择器伪元素代表了某个元素的子元素这个子元素虽然在逻辑上存在但却并不实际存在于文档树中"><a class="markdownIt-Anchor" href="#伪元素用于将特殊的效果添加到某些选择器伪元素代表了某个元素的子元素这个子元素虽然在逻辑上存在但却并不实际存在于文档树中"></a> 伪元素：用于将特殊的效果添加到某些选择器，伪元素代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中</h2>
<p>1	::first-letter 将样式添加到文本的首字母<br><br />
2	::first-line 将样式添加到文本的首行<br><br />
3	::before 在某元素之前插入某些内容<br><br />
4	::after 在某元素之后插入某些内容<br></p>
<h2 id="新增伪类"><a class="markdownIt-Anchor" href="#新增伪类"></a> 新增伪类：</h2>
<table>
<thead>
<tr>
<th>P:first-of-type</th>
<th>选择属于其父元素的首个p元素的每个p元素</th>
</tr>
</thead>
<tbody>
<tr>
<td>P:last-of-type</td>
<td>选择属于其父元素的最后p元素的每个p元素</td>
</tr>
<tr>
<td>P:only-of-type</td>
<td>选择属于其父元素唯一的p元素的每个p元素</td>
</tr>
<tr>
<td>P:only-child</td>
<td>选择属于其父元素唯一的子元素的每个p元素</td>
</tr>
<tr>
<td>P:nth-child(n)</td>
<td>选择属于其父元素的第n个子元素的每个p元素</td>
</tr>
<tr>
<td>P:nth-last-child(n)</td>
<td>选择属于其父元素的倒数第n个子元素的每个p元素</td>
</tr>
<tr>
<td>P:nth-of-type(n)</td>
<td>选择属于其父元素第n个p元素的每个p元素</td>
</tr>
<tr>
<td>P:nth-last-of-type(n)</td>
<td>选择属于其父元素倒数第n个p元素的每个p元素</td>
</tr>
<tr>
<td>P:last-child</td>
<td>选择属于其父元素最后一个子元素的每个p元素</td>
</tr>
<tr>
<td>P:empty</td>
<td>选择没有子元素的每个p元素(包括文本节点)</td>
</tr>
<tr>
<td>P:target</td>
<td>选择当前活动的p元素</td>
</tr>
<tr>
<td>:not§</td>
<td>选择非p元素的每个元素</td>
</tr>
<tr>
<td>:enabled</td>
<td>控制表单控件的可用状态</td>
</tr>
<tr>
<td>:disabled</td>
<td>控制表单控件的禁用状态</td>
</tr>
</tbody>
</table>
<h2 id="使用css实现隐藏元素的方式"><a class="markdownIt-Anchor" href="#使用css实现隐藏元素的方式"></a> 使用CSS实现隐藏元素的方式</h2>
<p>1	Opacity:设置一个元素的透明度   .hide{opacity:0;}<br><br />
2	Visibility  .hide{visibility:hidden}<br><br />
3	Display:确保元素不可见并且连盒模型也不生成 .hide{display:none}<br><br />
4	Position .hide{position:absolute; top:-9999px; left:-9999px;}<br><br />
5	Clip-path  .hide{clip-path:polygon(0px 0px, 0px 0px, 0px 0px, 0px 0px};<br></p>
<h2 id="盒子在页面水平和垂直居中"><a class="markdownIt-Anchor" href="#盒子在页面水平和垂直居中"></a> 盒子在页面水平和垂直居中</h2>
<p>水平居中设置：<br />
1	行内元素：设置text-align:center;<br />
2	定宽块状元素：设置 左右 margin值为auto;<br />
3	不定宽块状元素<br />
4	在元素外加入 table标签(完整的，包括table,tbody,tr,td),该元素写在td内，然后设置margin的值为auto;<br />
5	给该元素设置display:inline方法；<br />
6	父元素设置position:relative和left:50%,子元素设置position:relative和left:50%<br><br />
垂直居中设置:<br />
1	父元素高度确定的单行文本，设置height=line-height;<br />
2	父元素高度确定的多行文本<br />
A:插入table（插入方法和水平居中一样）,然后设置vertical-align:middle;<br />
B:先设置display:table-cell 再设置 vertical-align:middle;</p>
<h2 id="positiondisplay"><a class="markdownIt-Anchor" href="#positiondisplay"></a> position,display</h2>
<p><strong>position</strong><br />
position：absolute;	绝对定位的元素，相对于static定位以外的第一个父元素进行定位<br />
position:fixed;	生成绝对定位的元素，相对于浏览器窗口进行定位.<br />
position:relative;	生成相对定位的元素，相对于其正常位置进行定位<br />
position:static;	默认值，没有定位，元素在正常的文档流(忽略top,bottom,left,right或者z-index声明)<br />
position:inherit;	规定应该从父元素继承position属性的值<br />
<strong>display: ( 经常使用的 )</strong><br />
display:none	此元素不会被显示<br />
display:block;	此元素将显示为块级元素，此元素前后会带有换行符<br />
display:inline;	行内块元素<br />
display:inline-block;	此元素会作为列表显示<br />
提示：基础知识，必须要了解！</p>
<h2 id="inline和inline-block"><a class="markdownIt-Anchor" href="#inline和inline-block"></a> inline和inline-block</h2>
<p><strong>inline</strong><br />
1	inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化<br />
2	Inline元素设置width,height属性无效<br />
3	inline元素的margin和padding属性，水平方向的padding-left,padding-right,margin-left,margin-right都产生边距效果；但竖直方向的padding-top,padding-bottom,magin-top,margin-bottom不会产生边距效果。</p>
<h2 id="块级元素行级元素有哪些以及特点"><a class="markdownIt-Anchor" href="#块级元素行级元素有哪些以及特点"></a> 块级元素,行级元素有哪些以及特点</h2>
<table>
<thead>
<tr>
<th>行内元素</th>
<th>块级元素</th>
</tr>
</thead>
<tbody>
<tr>
<td>a b em font i  img input br label span small select textarea</td>
<td>address dl div form h1-h6 hr menu ol p</td>
</tr>
<tr>
<td>行内元素不会独占一行，相邻的行内元素会排列在同一行里，一行排不下会自动换行，其宽度随元素的内容而变化。</td>
<td>块级元素会独占一行，其宽度自动填满其父元素宽度</td>
</tr>
<tr>
<td>块级元素可以设置margin,padding,行内元素的水平方向的padding-left，padding-right，margin-left，margin-right都产生边距效果，但是竖直方向padding-top,padding-bottom,margin-top,margin-bottom都不会产生边距效果</td>
<td>块级元素可以设置width,height属性，行内元素设置宽高无效</td>
</tr>
</tbody>
</table>
<h2 id="网格布局"><a class="markdownIt-Anchor" href="#网格布局"></a> 网格布局</h2>
<p>Grid布局又称“网格”，是一个基于二维网格布局的系统，主要目的是改变我们基于网格设计的用户接口方式，Grid布局是第一个专门为解决布局问题而创建的CSS模块</p>
<h2 id="传统表格布局"><a class="markdownIt-Anchor" href="#传统表格布局"></a> 传统表格布局</h2>
<p>Table用于布局，主要用来显示批量的数据；但是table有一个缺点，就是加载页面的时候，需要将全部的数据都请求到，才显示页面，否则就是一片的空白，所以现在一般都不用table进行布局.但因其稳定性非常优秀，一般在管理系统类项目中应用较多。</p>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>css基础</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是渐进式渲染</title>
    <url>/2020/08/17/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h2 id="什么是渐进式渲染"><a class="markdownIt-Anchor" href="#什么是渐进式渲染"></a> 什么是渐进式渲染</h2>
<a id="more"></a>
<p>指打开页面先加载首屏显示的内容，之后再随着时间或者滚动页面才进行后面的加载</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Canvas，你使用它做个什么需求</title>
    <url>/2020/08/17/%E4%BB%80%E4%B9%88%E6%98%AFCanvas%EF%BC%8C%E4%BD%A0%E4%BD%BF%E7%94%A8%E5%AE%83%E5%81%9A%E4%B8%AA%E4%BB%80%E4%B9%88%E9%9C%80%E6%B1%82/</url>
    <content><![CDATA[<h2 id="什么是canvas你使用它做个什么需求"><a class="markdownIt-Anchor" href="#什么是canvas你使用它做个什么需求"></a> 什么是Canvas，你使用它做个什么需求</h2>
<a id="more"></a>
<h2 id="什么是canvas"><a class="markdownIt-Anchor" href="#什么是canvas"></a> <strong>什么是Canvas</strong></h2>
<p>: Canvas元素是HTML5的一部分，允许脚本语言动态渲染位图像。Canvas由一个可绘制地区HTML代码中的属性定义决定高度和宽度。JavaScript代码可以访问该地区，通过一套完整的绘图功能类似于其他通用二维的API，从而生成动态的图形。<br />
Canvas能应对以下需求：</p>
<h2 id="1-游戏"><a class="markdownIt-Anchor" href="#1-游戏"></a> <strong>1. 游戏：</strong></h2>
<p>毫无疑问，游戏在HTML5领域具有举足轻重的地位。HTML5在基于Web的图像显示方面比Flash更加立体、更加精巧，Ohad认为运用Canvas制作的图像能够令HTML5游戏在流畅度和跨平台方面发挥更大的潜力。</p>
<h2 id="2-图表制作"><a class="markdownIt-Anchor" href="#2-图表制作"></a> <strong>2. 图表制作</strong>：</h2>
<p>图表制作时常被人们忽略，但无论企业内部还是企业间交流合作都离不开图表。现在一些开发者使用HTML/CSS完成图标制作，但完全可以用Canvas来实现。当然，使用SVG（可缩放矢量图形）来完成图表制作也是非常好的方法。(例如：echarts.js heightchart.js都是基于canvas来绘图!)</p>
<h2 id="3-banner广告"><a class="markdownIt-Anchor" href="#3-banner广告"></a> <strong>3. banner广告：</strong></h2>
<p>Flash曾经辉煌的时代，智能手机还未曾出现。现在以及未来的智能机时代，HTML5技术能够在banner广告上发挥巨大作用，用Canvas实现动态的广告效果再合适不过。<br />
提示：其实还有很多领域（例如：模拟器 / 远程计算机控制 / 字体设计 / 图像编辑器 / 其它），但是就当前来说，基于canvas图表制作是我们必须要掌握的能力。</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>工作中你都兼容哪些浏览器 ， 实际开发中你都遇到过哪些兼容问题 。</title>
    <url>/2020/08/17/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BD%A0%E9%83%BD%E5%85%BC%E5%AE%B9%E5%93%AA%E4%BA%9B%E6%B5%8F%E8%A7%88%E5%99%A8%20%EF%BC%8C%20%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%A0%E9%83%BD%E9%81%87%E5%88%B0%E8%BF%87%E5%93%AA%E4%BA%9B%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%20%E3%80%82/</url>
    <content><![CDATA[<h2 id="工作中你都兼容哪些浏览器-实际开发中你都遇到过哪些兼容问题"><a class="markdownIt-Anchor" href="#工作中你都兼容哪些浏览器-实际开发中你都遇到过哪些兼容问题"></a> 工作中你都兼容哪些浏览器 ， 实际开发中你都遇到过哪些兼容问题 。</h2>
<a id="more"></a>
<p>Input的按钮在ios和Android中的样式兼容问题<br />
ios有默认的渲染 方式 渐变和圆角而且他的行高并不会随着内容的增加。<br />
解决方法：<br />
在标签上增加<br />
-webkie-appearance：none；<br />
Height：4rem；<br />
滚动穿透的问题:<br />
滚动穿透是指在移动端当有flxed 遮罩和弹出层的时候，屏幕上的滑动能够滑动背景下的内容。<br />
最后的解决方法<br />
<img src="https://img-blog.csdnimg.cn/20200817222716337.png#pic_center" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 废弃的标签有哪些 ？举几个例子</title>
    <url>/2020/08/17/%E5%BA%9F%E5%BC%83%E7%9A%84%E6%A0%87%E7%AD%BE%E6%9C%89%E5%93%AA%E4%BA%9B%20%EF%BC%9F%E4%B8%BE%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<h2 id="html-废弃的标签有哪些-举几个例子"><a class="markdownIt-Anchor" href="#html-废弃的标签有哪些-举几个例子"></a> HTML 废弃的标签有哪些 ？举几个例子</h2>
<a id="more"></a>
<table>
<thead>
<tr>
<th>em=i</th>
<th>定义强调的文字。</th>
</tr>
</thead>
<tbody>
<tr>
<td>ins=u</td>
<td>定义插入的文字。</td>
</tr>
<tr>
<td>strong=b</td>
<td>定义重要性强调的文字。</td>
</tr>
<tr>
<td>del=s</td>
<td>定义删除的文字。</td>
</tr>
</tbody>
</table>
<p>因为strong,em,ins,del这些标签有语意，所以是b,i,u,s的替代品。</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Meta viewport 的原理是什么</title>
    <url>/2020/08/17/Meta%20viewport%20%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h2 id="meta-viewport-的原理是什么"><a class="markdownIt-Anchor" href="#meta-viewport-的原理是什么"></a> Meta viewport 的原理是什么</h2>
<a id="more"></a>
<p>手机浏览器是把页面放在一个虚拟的“窗口”（viewport）中，通常这个虚拟的“窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。移动设备默认的viewport是layout viewport，也就是那个比屏幕要宽的viewport，但在进行移动设备网站的开发时，我们需要的是ideal viewport。</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML模板语言有哪些</title>
    <url>/2020/08/17/HTML%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80%E6%9C%89%E5%93%AA%E4%BA%9B%20/</url>
    <content><![CDATA[<h2 id="html模板语言有哪些"><a class="markdownIt-Anchor" href="#html模板语言有哪些"></a> HTML模板语言有哪些</h2>
<a id="more"></a>
<p>Django 模板基于Python的一个模板。<br />
Python下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。<br />
Django是一个开放源代码的Web应用框架，由Python写成。<br />
Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。<br />
Django采用了MVC的软件设计模式，即模型M，视图V和控制器C。</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS / JS 引入的位置一般在哪里？为什么</title>
    <url>/2020/08/17/CSS%EF%BC%8CJS%20%E5%BC%95%E5%85%A5%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%B8%80%E8%88%AC%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h2 id="css-js-引入的位置一般在哪里为什么"><a class="markdownIt-Anchor" href="#css-js-引入的位置一般在哪里为什么"></a> CSS / JS 引入的位置一般在哪里？为什么</h2>
<a id="more"></a>
<p>Script标签最好放在</body>标签的前面，因为放在所有body中的标签后面就不会出现网页加载时出现空白的情况，可以持续的给用户提供视觉反馈，同时在有些情况下，会降低错误的发生；而css标签应该放在<head></head>标签之间，因为如果放在</body>标签的前面，那么当DOM树构建完成了，渲染树才构建，那么当渲染树构建完成，浏览器不得不再重新渲染整个页面，这样造成了资源的浪费，效率也不高，如果放在<head></head>之间，浏览器边构建边渲染，效率要高得多  ！</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要在标签上使用data-, 它有什么好处</title>
    <url>/2020/08/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9C%A8%E6%A0%87%E7%AD%BE%E4%B8%8A%E4%BD%BF%E7%94%A8data-,%20%E5%AE%83%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84/</url>
    <content><![CDATA[<h2 id="为什么要在标签上使用data-它有什么好处"><a class="markdownIt-Anchor" href="#为什么要在标签上使用data-它有什么好处"></a> 为什么要在标签上使用data-, 它有什么好处</h2>
<a id="more"></a>
<table>
<thead>
<tr>
<th>1</th>
<th>html5规范中规定自定义属性需要添加前缀data-,目的是提供与渲染无关的信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>使用getAttribute（）方法以及setAttribute()方法操作自定义属性</td>
</tr>
<tr>
<td>3</td>
<td>使用dataset操作自定义属性。</td>
</tr>
<tr>
<td>4</td>
<td>dataset属性的兼容性问题，Chrome 8+   Firefox(Gecko) 6.0+   Internet Explorer 11+   Opera11.10+  Safari 6+ 以上浏览器均能很好支持</td>
</tr>
<tr>
<td>5</td>
<td>使用data-属性选择器好处：绑定DOM强相关数据，js传递数据</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Meta标签，都有一些什么特性，有什么作用</title>
    <url>/2020/08/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9C%A8%E6%A0%87%E7%AD%BE%E4%B8%8A%E4%BD%BF%E7%94%A8data-,%20%E5%AE%83%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%20copy/</url>
    <content><![CDATA[<h2 id="meta标签都有一些什么特性有什么作用"><a class="markdownIt-Anchor" href="#meta标签都有一些什么特性有什么作用"></a> Meta标签，都有一些什么特性，有什么作用</h2>
<a id="more"></a>
<table>
<thead>
<tr>
<th>1</th>
<th>什么是meta标签:<meta>标签提供关于HTML文档的元数据，它不会显示在页面上，但是对于机器是可读的，可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他web服务。</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>meta的作用:meta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的HTTP头部内容。</td>
</tr>
<tr>
<td>3</td>
<td>常用meta标签总结:Charset：它是声明文档使用的字符编码，以防乱码，而且一定要写在第一行Viewport：主要是影响移动端页面布局的。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器标准模式和怪异模式</title>
    <url>/2020/08/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%80%AA%E5%BC%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="浏览器标准模式和怪异模式"><a class="markdownIt-Anchor" href="#浏览器标准模式和怪异模式"></a> 浏览器标准模式和怪异模式</h2>
<a id="more"></a>
<h2 id="产生原因"><a class="markdownIt-Anchor" href="#产生原因"></a> <strong>产生原因：</strong></h2>
<p>现代的浏览器一般都有两种渲染模式：标准模式和怪异模式，在标准模式下，浏览器按照HTML和CSS标准对文档进行解析和渲染；而在怪异模式下，浏览器则按照旧有的非标准的实现方式对文档进行解析和渲染，这样的话，对于旧有的网页，浏览器就会启动怪异模式，就能够使得旧网页正常显示；对于新的网页，则可以启动标准模式，使得新网页能够使用HTML和CSS的标准特性。</p>
<table>
<thead>
<tr>
<th>标准模式</th>
<th>怪异模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>给span等行内元素设置width和height无效。</td>
<td>有效</td>
</tr>
<tr>
<td>margin:0 auto水平居中，在标准模式下没有问题。</td>
<td>用margin:0 auto设置水平居中在怪异模式下会失效，解决办法，用text-align属性来解决</td>
</tr>
<tr>
<td>右边的这些问题，在标准模式下均不会出现问题！</td>
<td>怪异模式下设置图片的padding会失效，怪异模式下Table中的字体属性不能继承上层的设置怪异模式下white-space:pre会失效</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>XHTML与HTML有什么区别</title>
    <url>/2020/08/16/XHTML%E4%B8%8EHTML%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="xhtml与html有什么区别"><a class="markdownIt-Anchor" href="#xhtml与html有什么区别"></a> XHTML与HTML有什么区别</h2>
<a id="more"></a>
<p>1：XHTML元素必须被正确的嵌套。<br />
2：XHTML元素必须被关闭。<br />
3：标签名必须用小写字母。<br />
4：XHTML文档必须拥有根元素。</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5特性有哪些？语义化的做法有哪些，具体指的什么</title>
    <url>/2020/08/16/HTML5%E7%89%B9%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E5%81%9A%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%8C%E5%85%B7%E4%BD%93%E6%8C%87%E7%9A%84%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h2 id="1html5特性有哪些语义化的做法有哪些具体指的什么"><a class="markdownIt-Anchor" href="#1html5特性有哪些语义化的做法有哪些具体指的什么"></a> 1.	HTML5特性有哪些？语义化的做法有哪些，具体指的什么</h2>
<a id="more"></a>
<h2 id="center新特性常用解释如下center"><a class="markdownIt-Anchor" href="#center新特性常用解释如下center"></a> <strong><center><strong>新特性常用解释如下</strong></center></strong></h2>
<table>
<thead>
<tr>
<th>1</th>
<th>多媒体，用于媒介回放的video和audio元素。</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>图像效果，用于绘画的canvas元素，svg元素等</td>
</tr>
<tr>
<td>3</td>
<td>离线&amp;存储，对本地离线存储能够更好地支持，比如localstorage,Cookies等。</td>
</tr>
<tr>
<td>4</td>
<td>设备兼容特性，HTML5提供了前所未有的数据与应用接入开放接口，使外部应用可以直接与浏览器内部的数据直接相连。</td>
</tr>
<tr>
<td>5</td>
<td>连接特性，更有效的连接工作效率，使得基于页面的实时聊天，更快速的网页游戏体验，更优化的在线交流得到了实现，同时拥有更有效的服务器推送技术，Server-Sent Event和WebSockets就是其中的两个特性，这两个特性能够帮助我们实现服务器将数据“推送”到客户端的功能。</td>
</tr>
<tr>
<td>6</td>
<td>性能与集成特性，HTML5会通过XML HttpRequest2等技术，帮助您的Web应用和网站在多样化的环境中更快速地工作。</td>
</tr>
</tbody>
</table>
<h2 id="center新增标签center"><a class="markdownIt-Anchor" href="#center新增标签center"></a> <strong><center><strong>新增标签</strong></center></strong></h2>
<table>
<thead>
<tr>
<th>1</th>
<th>多媒体：audio video source embed track</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>新表单元素：datalist output keygen</td>
</tr>
<tr>
<td>3</td>
<td>新文档节段和纲要：header页面头部  section章节 aside边栏article文档内容  footer页面底部</td>
</tr>
</tbody>
</table>
<h2 id="center语义化具体指以下内容center"><a class="markdownIt-Anchor" href="#center语义化具体指以下内容center"></a> <strong><center><strong>语义化具体指以下内容：</strong></center></strong></h2>
<table>
<thead>
<tr>
<th>1</th>
<th>语义特性，添加header nav等标签</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>为了在没有css代码时，也能呈现很好的内容结构，代码结构，以至于达到没有编程基础的非技术人员，也能看懂其代码</td>
</tr>
<tr>
<td>3</td>
<td>为了提高用户体验，比如：title,alt用于解释名词和图片信息</td>
</tr>
<tr>
<td>4</td>
<td>利于SEO，语义化能和搜索引擎建立良好的关系，有利于爬虫抓取更多的有效信息，爬虫依赖于标签来确定上下文和各个关键字的权重</td>
</tr>
<tr>
<td>5</td>
<td>便于团队开发和维护，语义化更具可读性，如果遵循W3C标准的团队都遵循这个标准，可以减少差异化，有利于规范化</td>
</tr>
<tr>
<td>6</td>
<td>方便其他设备解析（如屏幕阅读器，盲人阅读器，移动设备）以语义的方式来渲染网页</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>vue富文本编辑器使用</title>
    <url>/2020/08/12/vue%E4%B8%AD%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="vue富文本编辑器使用"><a class="markdownIt-Anchor" href="#vue富文本编辑器使用"></a> vue富文本编辑器使用</h2>
<a id="more"></a>
<p>首先在vue项目中安装运行依赖vue-quill-editor<br />
<img src="https://img-blog.csdnimg.cn/2020081017020459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
然后点击查看详情，打开官方文档<br />
在项目的main.js中导入富文本编辑器和样式<br />
<img src="https://img-blog.csdnimg.cn/20200810170457212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueQuillEditor from &#39;vue-quill-editor&#39;</span><br><span class="line"></span><br><span class="line">import &#39;quill&#x2F;dist&#x2F;quill.core.css&#39; &#x2F;&#x2F; import styles</span><br><span class="line">import &#39;quill&#x2F;dist&#x2F;quill.snow.css&#39; &#x2F;&#x2F; for snow theme</span><br><span class="line">import &#39;quill&#x2F;dist&#x2F;quill.bubble.css&#39; &#x2F;&#x2F; for bubble theme</span><br></pre></td></tr></table></figure>
<p>然后在需要用的地方输入代码<br />
<img src="https://img-blog.csdnimg.cn/20200810202957632.png" alt="在这里插入图片描述" /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;quill-editor v-model&#x3D;&quot;addForm.goods_introduce&quot;&gt;&lt;&#x2F;quill-editor&gt;</span><br></pre></td></tr></table></figure>
<p>双向数据绑定到data里面<img src="https://img-blog.csdnimg.cn/20200810203042887.png" alt="在这里插入图片描述" /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 商品的详情描述</span><br><span class="line">       goods_introduce: &#39;&#39;,</span><br></pre></td></tr></table></figure>
<p>效果<img src="https://img-blog.csdnimg.cn/20200810203144653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>split&amp;&amp;join</title>
    <url>/2020/08/12/split%E4%B8%8Ejoin/</url>
    <content><![CDATA[<p><strong>split</strong></p>
<a id="more"></a>
<p>split() 方法用于把一个字符串分割成字符串数组。<br />
使用下面的代码，可以把句子分割成单词：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = sentence.split(<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">循环到数组每一项，用split吧字符串变为数组</span><br><span class="line"> res.data.forEach(item&#x3D;&gt;&#123;</span><br><span class="line">       item.attr_vals &#x3D; item.attr_vals.length&#x3D;&#x3D;&#x3D;0?[]: item.attr_vals.split(&#39; &#39;)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<p>例：<br />
<img src="https://img-blog.csdnimg.cn/20200809164628906.png" alt="在这里插入图片描述" /></p>
<p><img src="https://img-blog.csdnimg.cn/20200809164545906.png" alt="在这里插入图片描述" /><br />
<strong>join</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">join() 方法用于把数组中的所有元素放入一个字符串。</span><br><span class="line">var arr &#x3D; new Array(3)</span><br><span class="line">arr[0] &#x3D; &quot;George&quot;</span><br><span class="line">arr[1] &#x3D; &quot;John&quot;</span><br><span class="line">arr[2] &#x3D; &quot;Thomas&quot;</span><br><span class="line"></span><br><span class="line">document.write(arr.join(&quot;.&quot;))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">George.John.Thomas</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>浏览器的重绘和回流</title>
    <url>/2020/08/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/</url>
    <content><![CDATA[<h2 id="浏览器的重绘和回流"><a class="markdownIt-Anchor" href="#浏览器的重绘和回流"></a> 浏览器的重绘和回流</h2>
<a id="more"></a>
<p>浏览器使用流式布局模型 (Flow Based Layout)。<br />
浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了Render Tree。<br />
有了RenderTree，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。<br />
由于浏览器使用流式布局，对Render Tree的计算通常只需要遍历一次就可以完成，但table及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一。<br />
一句话：回流必将引起重绘，重绘不一定会引起回流。</p>
<p>回流 (Reflow)<br />
当Render Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p>
<p>会导致回流的操作：</p>
<p>页面首次渲染<br />
浏览器窗口大小发生改变<br />
元素尺寸或位置发生改变<br />
元素内容变化（文字数量或图片大小等等）<br />
元素字体大小变化<br />
添加或者删除可见的DOM元素<br />
激活CSS伪类（例如：:hover）<br />
查询某些属性或调用某些方法</p>
<p>转载：<a href="https://juejin.im/post/5a9923e9518825558251c96a">https://juejin.im/post/5a9923e9518825558251c96a</a></p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
  </entry>
  <entry>
    <title>自定义vue代码片段</title>
    <url>/2020/08/12/vscode%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%EF%BC%88vue%EF%BC%8C%E6%AD%A3%E5%88%99%E9%82%AE%E7%AE%B1%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%AD%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="自定义vue代码片段"><a class="markdownIt-Anchor" href="#自定义vue代码片段"></a> 自定义vue代码片段</h2>
<a id="more"></a>
<p>为了以后不遗忘，在这里简单记录一下，以后还会补充</p>
<ol>
<li>打开vscode》文件》首选项》用户片段<br />
<img src="https://img-blog.csdnimg.cn/20200801173900800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
打开html.json<img src="https://img-blog.csdnimg.cn/20200801173923982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
在李曼输入如下代码</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 自定义vue代码片段</span></span><br><span class="line">	<span class="string">&quot;vh&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vh&quot;</span>, <span class="comment">// 触发的关键字 输入vh按下tab键</span></span><br><span class="line">		<span class="string">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;head&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0\&quot;&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;ie=edge\&quot;&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;title&gt;Document&lt;/title&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;script src=\&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js\&quot;&gt;&lt;/script&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;/head&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;body&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;div id=\&quot;app\&quot;&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;script&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        var vm=new Vue(&#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;           el:&#x27;#app&#x27;,&quot;</span>,</span><br><span class="line">			<span class="string">&quot;           data:&#123;&#125;,&quot;</span>,</span><br><span class="line">			<span class="string">&quot;           methods:&#123;&#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        &#125;);&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;/script&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;/body&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;/html&gt;&quot;</span>,</span><br><span class="line">		],</span><br><span class="line">		<span class="string">&quot;description&quot;</span>: <span class="string">&quot;vh components&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//自定义验证正则邮箱</span></span><br><span class="line">		<span class="string">&quot;regEmail&quot;</span>:&#123;</span><br><span class="line">			<span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;regEmail&quot;</span>, <span class="comment">// 触发的关键字 输入vh按下tab键,</span></span><br><span class="line">			<span class="string">&quot;body&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;/^[a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="string">&quot;description&quot;</span>: <span class="string">&quot;regEmail components&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<p>其中vh是定义了vue代码片段，regEmail是自定义了邮箱验证规则<br />
使用，打开新的html文件，在需要的位置输入vh<br />
<img src="https://img-blog.csdnimg.cn/20200801174111349.png" alt="在这里插入图片描述" /><br />
按tab键即可<img src="https://img-blog.csdnimg.cn/2020080117413294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
邮箱验证规则也一样<br />
<img src="https://img-blog.csdnimg.cn/20200801174158729.png" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200801174206171.png" alt="在这里插入图片描述" /><br />
补充验证手机号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义验证正则手机号</span></span><br><span class="line">		<span class="string">&quot;regMobile&quot;</span>:&#123;</span><br><span class="line">			<span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;regMobile&quot;</span>, <span class="comment">// 触发的关键字 输入vh按下tab键,</span></span><br><span class="line">			<span class="string">&quot;body&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;/^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="string">&quot;description&quot;</span>: <span class="string">&quot;regMobile components&quot;</span></span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
  </entry>
  <entry>
    <title>maven流程</title>
    <url>/2020/08/12/maven%E5%B7%A5%E7%A8%8B%E6%8B%86%E5%88%86%E8%81%9A%E5%90%88%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h2 id="maven流程附一张图"><a class="markdownIt-Anchor" href="#maven流程附一张图"></a> maven流程附一张图</h2>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200730213418402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p>参考出处：<a href="https://www.bilibili.com/video/BV1mE411X7yp?p=254">https://www.bilibili.com/video/BV1mE411X7yp?p=254</a></p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven锁定jar包</title>
    <url>/2020/08/12/maven%E4%B8%ADpom.xml%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="maven锁定jar包"><a class="markdownIt-Anchor" href="#maven锁定jar包"></a> maven锁定jar包</h2>
<a id="more"></a>
<p>1.防止放置jar包坐标<img src="https://img-blog.csdnimg.cn/20200730211314240.png" alt="在这里插入图片描述" /></p>
<p><strong>2.锁定jar包</strong><br />
maven是有父子关系的，凡是依赖别的项目以后，拿到的别的依赖包，都属于传递依赖，如a项目被b项目依赖，那么a项目中所有的jar包都会传递到b项目中 b项目开发者如果再倒入一套ssm框架的jar包，对于b项目是直接依赖，那么直接依赖的jar包就会把我们的a项目传递过去的jar包覆盖掉。为了防止以上情况出现，我们可以吧a项目中主要jar包坐标锁住，其他依赖该项目的项目里面即便有同名jar包直接依赖也无法覆盖。<br />
<img src="https://img-blog.csdnimg.cn/20200730211453493.png" alt="在这里插入图片描述" /><br />
假如下面这个jar包想要锁定，那么是直接复制到上边锁定版本还是剪切过去呢，答案是复制上去，不能剪切<img src="https://img-blog.csdnimg.cn/20200730212330213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200730212309675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200730212418527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>对于maven中pom.xml依赖报红问题</title>
    <url>/2020/08/12/%E8%A7%A3%E5%86%B3oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="解决oracel数据库乱码问题"><a class="markdownIt-Anchor" href="#解决oracel数据库乱码问题"></a> 解决oracel数据库乱码问题</h2>
<a id="more"></a>
<p>中文乱码问题解决<br />
1.查看服务器端编码<br />
select userenv(‘language’) from dual;<br />
我实际查到的结果为:AMERICAN_AMERICA.ZHS16GBK<br />
2.执行语句 select * from V$NLS_PARAMETERS<br />
查看第一行中PARAMETER项中为NLS_LANGUAGE 对应的VALUE项中是否和第一步得到的值一样。<br />
如果不是，需要设置环境变量.<br />
否则PLSQL客户端使用的编码和服务器端编码不一致,插入中文时就会出现乱码.<br />
3.设置环境变量<br />
计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建<br />
设置变量名:NLS_LANG,变量值:第1步查到的值， 我的是	AMERICAN_AMERICA.ZHS16GBK<br />
4.重新启动PLSQL,插入数据正常</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
  </entry>
  <entry>
    <title>maven基础</title>
    <url>/2020/08/12/maven%E9%AB%98%E7%BA%A7%E4%BB%A5%E5%8F%8Amaven%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88ssm%E6%A1%86%E6%9E%B6pom.xml%E9%9C%80%E8%A6%81%E5%AF%BC%E5%85%A5%E7%9A%84jar%E5%8C%85/</url>
    <content><![CDATA[<h2 id="maven基础"><a class="markdownIt-Anchor" href="#maven基础"></a> maven基础</h2>
<a id="more"></a>
<p>介绍了maven基础以及maven项目整合ssm框架pom.xml需要导入的jar包（已解决jar包冲突问题）</p>
<p><strong>maven是一个项目管理工具</strong>  <strong>依赖管理</strong>  ：<br />
1.maven对项目中jar包的管理过程。传统工程里面我们直接把jar包放置在项目里面<br />
2.maven工程真正的jar包放置在仓库中，项目中只用防止jar包的坐标<br />
<strong>仓库的种类</strong>：本地仓库 远程仓库  中央仓库（联网即可）<br />
<strong>仓库之间的关系</strong>：当我们启动一个maven工程的时候，maven会通过pom文见中去本地仓库找jar包，如果本地没有，去中央仓库下载，如果本地还没有，从私服下载，如果没有私服，可以从中央仓库下载，也可以从本地上传。<br />
<strong>一键构建</strong>：maven自身集成了tomcat插件，可以对项目进行编译，测试，安装，发布等操作<br />
<strong>maven常用命令</strong>：clean,compile,test,package,install,deploy.<br />
<strong>maven三套生命周期</strong>：清理生命周期，默认生命周期，站点生命周期。<br />
<strong>maven解决jar包冲突问题1</strong>：第一申明优先原则，那个靠上就是哪个申明的，先申明jar包下面的依赖包，可以优先进入项目中。<br />
<strong>maven解决jar包冲突问题2</strong>：直接依赖：项目里面直接导入的jar包就是直接依赖包。传递依赖：就是项目中没有直接导入的包通过直接以来jar包传递到项目中。路劲近者优先原则：直接依赖比传递依赖近。<br />
<strong>maven解决jar包冲突问题3（推荐）</strong>：当我们要排除jar包下面的依赖包的时候，在配置exclusion标签的时候，可以不写版本号，因为此时使用的和默认版本一样<br />
<strong>ssm三大框架结合pom.xml需要导入的包，已经解决冲突问题，可以直接使用</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 统一管理jar包版本 --&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">	&lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt;</span><br><span class="line">	&lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt;</span><br><span class="line">	&lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;</span><br><span class="line">	&lt;shiro.version&gt;1.2.3&lt;/shiro.version&gt;</span><br><span class="line">	&lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt;</span><br><span class="line">	&lt;mybatis.version&gt;3.4.5&lt;/mybatis.version&gt;</span><br><span class="line">	&lt;spring.security.version&gt;5.0.1.RELEASE&lt;/spring.security.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 锁定jar包版本 --&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 项目依赖jar包 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">	&lt;!-- spring --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;1.6.8&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">		&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">		&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;!-- log start --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;!-- log end --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class="line">		&lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">		&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-security-core&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;1.0.9&lt;/version&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;!-- 添加tomcat7插件 --&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">	&lt;plugins&gt;</span><br><span class="line">		&lt;plugin&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">		&lt;/plugin&gt;</span><br><span class="line">	&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>在写vue项目的时候，由于有eslint严格模式...</title>
    <url>/2020/08/12/%E5%9C%A8%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84vue-cli%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%9C%A8vue.config.js%E4%B8%AD%E7%A6%81%E7%94%A8eslint/</url>
    <content><![CDATA[<h2 id="在写vue项目的时候由于有eslint严格模式"><a class="markdownIt-Anchor" href="#在写vue项目的时候由于有eslint严格模式"></a> 在写vue项目的时候，由于有eslint严格模式…</h2>
<a id="more"></a>
<p>在写vue项目的时候，由于有eslint严格模式，连一个空格对不起都非常麻烦，种种报错，所以直接禁用掉<br />
在vue.config.js里面加上 <code>lintOnSave: false</code> 这句话，即可解决<img src="https://img-blog.csdnimg.cn/20200727164634807.png" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>在vscode上运行vue中vue ui的时候，出现这样的信息</title>
    <url>/2020/08/12/%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%20xxx%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E3%80%82%E6%9C%89%E5%85%B3%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%EF%BC%8C%E8%AF%B7%E5%8F%82%E9%98%85%20httpsgo.microsoft.comf/</url>
    <content><![CDATA[<h2 id="在vscode上运行vue中vue-ui的时候出现这样的信息"><a class="markdownIt-Anchor" href="#在vscode上运行vue中vue-ui的时候出现这样的信息"></a> 在vscode上运行vue中vue ui的时候，出现这样的信息</h2>
<a id="more"></a>
<p>在vscode上运行vue中vue ui的时候，出现这样的信息<br />
<img src="https://img-blog.csdnimg.cn/20200727160255588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
这是执行策略的设置问题，默认情况下，执行策略为不允许任何脚本运行，所以会报错<br />
解决方法：管理员打开PowerShell（windows电脑在开始那个按钮右边的搜索栏里面直接搜，然后右键管理员运行），输入set-executionpolicy remotesigned，之后选择Y即可<br />
再次执行成功<br />
<img src="https://img-blog.csdnimg.cn/20200727160418843.png" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
  </entry>
  <entry>
    <title>初学vue遇到 imported multiple times import/no-duplicates问题</title>
    <url>/2020/08/12/%E5%88%9D%E5%AD%A6vue%E9%81%87%E5%88%B0%20imported%20multiple%20times%20%20importno-duplicates%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="初学vue遇到-imported-multiple-times-importno-duplicates问题"><a class="markdownIt-Anchor" href="#初学vue遇到-imported-multiple-times-importno-duplicates问题"></a> 初学vue遇到 imported multiple times import/no-duplicates问题</h2>
<a id="more"></a>
<p>出现这个问题一般是导入import次数过多<br />
只需要把导入的文件放在一行即可，并且都好后边加空格<br />
<img src="https://img-blog.csdnimg.cn/20200726205432644.png" alt="在这里插入图片描述" /></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=504646547&auto=0&height=66"></iframe>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>状态码含义</title>
    <url>/2020/08/12/%E7%8A%B6%E6%80%81%E7%A0%81%E5%AF%B9%E5%BA%94%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<h2 id="状态码"><a class="markdownIt-Anchor" href="#状态码"></a> 状态码</h2>
<a id="more"></a>
<p>状态码         含义                      说明</p>
<ul>
<li>200 OK 请求成功</li>
<li>201 CREATED 创建成功</li>
<li>204 DELETED 删除成功</li>
<li>400 BAD REQUEST 请求的地址不存在或者包含不支持的参数401 - UNAUTHORIZED 未授权</li>
<li>403 FORBIDDEN 被禁止访问</li>
<li>404 NOT FOUND 请求的资源不存在</li>
<li>422 Unprocesable entity[POST/PUT/PATCH]  当创建一个对象时，发生一个验证错误</li>
<li>500 INTERNAL SERVER ERROR   内部错误</li>
</ul>
<p>支持请求方法</p>
<ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
<li>HEAD：获取资源的元数据。</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>
</ul>
]]></content>
      <categories>
        <category>http</category>
      </categories>
  </entry>
  <entry>
    <title>码云上传代码简单记录</title>
    <url>/2020/08/12/%E7%A0%81%E4%BA%91%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="码云上传代码简单记录"><a class="markdownIt-Anchor" href="#码云上传代码简单记录"></a> 码云上传代码简单记录</h2>
<a id="more"></a>
<p>如果遇到这个错误：fatal: Not a git repository (or any of the parent directories): .git，证明你没有git目录，在项目目录下执行 git init即可<br />
github上传代码见：<a href="https://blog.csdn.net/weixin_42693712/article/details/107571233">https://blog.csdn.net/weixin_42693712/article/details/107571233</a><br />
1.新建仓库<br />
<img src="https://img-blog.csdnimg.cn/202007242259537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
2.输入仓库名称并且下面不做勾选，然后点击创建<br />
<img src="https://img-blog.csdnimg.cn/20200724230151952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
3.复制这两行打开cmd在全局运行<img src="https://img-blog.csdnimg.cn/2020072423032681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
忽略中间的，因为已经创建了仓库<img src="https://img-blog.csdnimg.cn/20200724230419210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
4.打开本地项目所在目录，按住shift+鼠标右键打开powershell面板<br />
5.在本地操作仓库，依次输入<code>git status</code><br />
<code>git add .</code><br />
<code>git commit -m &quot;add files&quot;</code><br />
<code>git status</code><br />
出现这个即为成功<img src="https://img-blog.csdnimg.cn/20200724230749677.png" alt="在这里插入图片描述" /><br />
6.上传<br />
复制以下两行命令在powershell面板执行<br />
<img src="https://img-blog.csdnimg.cn/20200724231000147.png" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200724231018442.png" alt="在这里插入图片描述" /><br />
在弹出的窗口输入码云的邮箱和密码即可</p>
]]></content>
      <categories>
        <category>码云</category>
      </categories>
  </entry>
  <entry>
    <title>github上传代码操作，简单记录</title>
    <url>/2020/08/12/github%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="github上传代码操作简单记录"><a class="markdownIt-Anchor" href="#github上传代码操作简单记录"></a> github上传代码操作，简单记录</h2>
<a id="more"></a>
<p>码云上传代码见：<a href="https://blog.csdn.net/weixin_42693712/article/details/107571303">https://blog.csdn.net/weixin_42693712/article/details/107571303</a><br />
github上传代码：<br />
1.复制github网址，右击项目git BashHere<br />
2.git clone <a href="https://github.com/111/111.git%EF%BC%88https://github.com/111/111.git%E6%9B%BF%E6%8D%A2%E6%88%90%E4%BD%A0%E4%B9%8B%E5%89%8D%E5%A4%8D%E5%88%B6%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%89">https://github.com/111/111.git（https://github.com/111/111.git替换成你之前复制的地址）</a><br />
3…这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如果我多出了个Comment文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下<br />
<a href="http://4.cd">4.cd</a> 文件夹的名字<br />
5.      5.1  git add .        （注：别忘记后面的.，此操作是把Comment文件夹下面的文件都添加进来）</p>
<pre><code>     5.2  git commit  -m  &quot;提交信息&quot;  （注：“提交信息”里面换成你需要，如“first commit”）
</code></pre>
<p>这步如果不成功（错误提示如下：*** Please tell me who you are.<br />
Run git config --global user.email “<a href="mailto:you@example.com">you@example.com</a>” git config --global <a href="http://user.name">user.name</a> “Your Name”<br />
遇到这种情况依次执行以下命令<br />
git config --global user.email “你的邮箱”<br />
git config --global <a href="http://user.name">user.name</a> “用户名”）</p>
<pre><code>   5.3  git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）
   如果遇到这个错误：fatal: Not a git repository (or any of the parent directories): .git，证明你没有git目录，在项目目录下执行 git init即可</code></pre>
]]></content>
      <categories>
        <category>github</category>
      </categories>
  </entry>
  <entry>
    <title>在利用脚手架创建vue项目时，如果创建到了c盘，但又不想占用c盘空间，所以想要把项目移动到D盘，进行如下操作</title>
    <url>/2020/08/12/%E5%9C%A8%E5%88%A9%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%97%B6%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%88%9B%E5%BB%BA%E5%88%B0%E4%BA%86c%E7%9B%98%EF%BC%8C%E4%BD%86%E5%8F%88%E4%B8%8D%E6%83%B3%E5%8D%A0%E7%94%A8c%E7%9B%98%E7%A9%BA%E9%97%B4%EF%BC%8C%E6%89%80%E4%BB%A5%E6%83%B3%E8%A6%81%E6%8A%8A%E9%A1%B9%E7%9B%AE%E7%A7%BB%E5%8A%A8%E5%88%B0D%E7%9B%98%EF%BC%8C%E8%BF%9B%E8%A1%8C%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="在利用脚手架创建vue项目时如果创建到了c盘但又不想占用c盘空间所以想要把项目移动到d盘进行如下操作"><a class="markdownIt-Anchor" href="#在利用脚手架创建vue项目时如果创建到了c盘但又不想占用c盘空间所以想要把项目移动到d盘进行如下操作"></a> 在利用脚手架创建vue项目时，如果创建到了c盘，但又不想占用c盘空间，所以想要把项目移动到D盘，进行如下操作</h2>
<a id="more"></a>
<ol>
<li>打开要移动的项目，复制除了node_modules以外的所有文件<img src="https://img-blog.csdnimg.cn/20200723164316332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
2.在新的文件夹下粘贴这些文件，然后打开终端，输入<code>npm i</code>会自动读取package.json里面的配置，自动创建node_modules文件<br />
<img src="https://img-blog.csdnimg.cn/20200723164649524.png" alt="在这里插入图片描述" /></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/202007231646176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
3.接着输入 <code>npm run serve</code> 就可以运行了</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>详细创建一个vue项目步骤</title>
    <url>/2020/08/12/%E8%AF%A6%E7%BB%86%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAvue%EF%BC%88vue%E5%8F%AF%E4%BB%A5%E5%9F%BA%E4%BA%8E%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%89%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4%EF%BC%8C%E7%94%A8%E5%88%B0Element-UI%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%9F%BA%E4%BA%8E%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%EF%BC%89/</url>
    <content><![CDATA[<h2 id="详细创建一个vue项目步骤"><a class="markdownIt-Anchor" href="#详细创建一个vue项目步骤"></a> 详细创建一个vue项目步骤</h2>
<a id="more"></a>
<p>详细创建一个vue项目步骤<br />
为了避免一些坑，特意将创建vue步骤记录下来</p>
<ol>
<li><strong>安装node</strong> 安装地址：</li>
</ol>
<blockquote>
<p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
</blockquote>
<p>安装成功后进行查看<br />
<img src="https://img-blog.csdnimg.cn/20200722162629708.png" alt="在这里插入图片描述" /><br />
2. 为了提高效率，可以使用淘宝的镜像：</p>
<blockquote>
<p><a href="http://npm.taobao.org/">http://npm.taobao.org/</a></p>
</blockquote>
<p>输入：<br />
<code>npm install -g cnpm –registry=https://registry.npm.taobao.org</code>，<br />
即可安装npm镜像，以后再用到npm的地方直接用cnpm来代替就好了<br />
安装成功后查看<br />
<img src="https://img-blog.csdnimg.cn/2020072216274574.png" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200722162802864.png" alt="在这里插入图片描述" /><br />
或者使用npm淘宝镜像</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>基于图形化界面或者命令行界面创建项目</strong> 见</li>
</ol>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_42693712/article/details/107495176">https://blog.csdn.net/weixin_42693712/article/details/107495176</a></p>
</blockquote>
<ol start="4">
<li><strong>安装Element-UI</strong><br />
官网：</li>
</ol>
<blockquote>
<p><a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p>
</blockquote>
<p>4.1在项目下输入命令：<code>npm i element-ui -S</code> 安装element-ui<br />
4.2 在main.js里面导入element-ui组件和样式<br />
输入<code>import ElementUI from 'element-ui'</code>和<br />
<code>import 'element-ui/lib/theme-chalk/index'</code>和<code>Vue.use(ElementUI)</code><br />
<img src="https://img-blog.csdnimg.cn/20200722163841386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
4.3 测试 在App.vue 下输入相应代码</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">   <span class="symbol">&lt;el-row&gt;</span></span><br><span class="line">  <span class="symbol">&lt;el-button&gt;</span>默认按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;primary&quot;</span>&gt;主要按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;success&quot;</span>&gt;成功按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;info&quot;</span>&gt;信息按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;warning&quot;</span>&gt;警告按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;danger&quot;</span>&gt;危险按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-row&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200722164131104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
4.4 运行 输入 <code>npm run serve</code> 复制网址打开<br />
<img src="https://img-blog.csdnimg.cn/20200722165217621.png" alt="在这里插入图片描述" /><br />
可以看到按钮，安装成功<img src="https://img-blog.csdnimg.cn/20200722165250592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
4.5（不推荐） 为了方便不用每次创建完成都去自己复制网址打开，进行如下设置<br />
在package.json下面增加代码  “port”:8888表示打开的端口号  “open”:true表示服务运行后自动打开网页</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;vue&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;devServer&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;port&quot;</span>:<span class="number">8888</span>,</span><br><span class="line">      <span class="string">&quot;open&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200722165659246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
4.6（推荐）为了结合vue项目更好的使用，上面那种方法不推荐<br />
推荐做法：在项目根目录创建vue.config.js文件<br />
输入以下代码</p>
 <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">module</span>.exports=&#123;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        <span class="built_in">open</span>:<span class="literal">true</span>,</span><br><span class="line">        port:<span class="number">8888</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看结果：还是生效的<br />
<img src="https://img-blog.csdnimg.cn/20200722170410231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
5.<strong>Element-UI基于图形化界面安装</strong><br />
5.1 打开cmd 输入<code>vue ui</code> 打开图形化界面<br />
如果有项目，打开项目管理器创建新的项目<br />
<img src="https://img-blog.csdnimg.cn/20200722171042503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<em><strong>没有项目就创建新的项目见第3步</strong></em><br />
5.2 有项目后 找到插件》添加插件<br />
<img src="https://img-blog.csdnimg.cn/20200722171400195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
输入<code>elemen</code>t查询<code>vue-cli-plugin-element</code>这个包 单击并且安装<br />
<img src="https://img-blog.csdnimg.cn/20200722171553546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p>接着进行配置完成安装<br />
<img src="https://img-blog.csdnimg.cn/20200722171709602.png" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200722171814553.png" alt="在这里插入图片描述" /><br />
最后在任务中重启项目<br />
5.3 打开main.js 看到已经导入了插件<br />
<img src="https://img-blog.csdnimg.cn/20200722172004106.png" alt="在这里插入图片描述" /><br />
5.4 测试 在App.vue 下输入相应代码</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">   <span class="symbol">&lt;el-row&gt;</span></span><br><span class="line">  <span class="symbol">&lt;el-button&gt;</span>默认按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;primary&quot;</span>&gt;主要按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;success&quot;</span>&gt;成功按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;info&quot;</span>&gt;信息按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;warning&quot;</span>&gt;警告按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-button <span class="built_in">type</span>=<span class="string">&quot;danger&quot;</span>&gt;危险按钮&lt;/<span class="keyword">el</span>-button&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-row&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200722164131104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
到这里，两种方法创建vue项目成功</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue脚手架交互式命令行和图形化界面安装步骤</title>
    <url>/2020/08/12/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%92%8C%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h2 id="vue脚手架交互式命令行和图形化界面安装步骤"><a class="markdownIt-Anchor" href="#vue脚手架交互式命令行和图形化界面安装步骤"></a> vue脚手架交互式命令行和图形化界面安装步骤</h2>
<a id="more"></a>
<p><strong>1.交互式命令行</strong></p>
<ol>
<li>
<p>保证安装node</p>
</li>
<li>
<p>安装vue脚手架  命令：npm install -g @vue/cli<img src="https://img-blog.csdnimg.cn/20200721181718314.png" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200721181741410.png" alt="在这里插入图片描述" /><br />
安装成功使用vue -V查看安装版本<br />
<img src="https://img-blog.csdnimg.cn/20200721181841465.png" alt="在这里插入图片描述" /><br />
如果之前安装过使用npm uinstall vue-cli -g命令卸载<br />
全局安装指定和卸载<br />
npm uninstall -g @vue/cli<br />
npm install -g @vue/cli@版本号</p>
</li>
<li>
<p>创建项目<br />
3.1输入vue create vue_proj 然后回车（选择第二项手动创建然后回车）<br />
<img src="https://img-blog.csdnimg.cn/20200721182302291.png" alt="在这里插入图片描述" /><br />
3.2选住图中三个配置，按空格是选择，选好后回车确定<br />
<img src="https://img-blog.csdnimg.cn/20200721182508264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
3.3询问是否安装历史模式路由，选择安装哈希模式，选择n之后回车<br />
<img src="https://img-blog.csdnimg.cn/20200721182615770.png" alt="在这里插入图片描述" /><br />
3.4询问版本，选择Standard config 回车<br />
<img src="https://img-blog.csdnimg.cn/2020072118272027.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
3.5询问什么时候进行历史校验，选择默认后回车<br />
<img src="https://img-blog.csdnimg.cn/20200721182849306.png" alt="在这里插入图片描述" /><br />
3.6创建单独配置文件，选择第一项后回车<br />
<img src="https://img-blog.csdnimg.cn/20200721182941812.png" alt="在这里插入图片描述" /><br />
3.7是否将当前选择保存为一个模板，可以选择是或者否，这里选择是后回车<br />
模板名称：vue_model_01<br />
<img src="https://img-blog.csdnimg.cn/2020072118313420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
3.8等待创建 创建完成后cd进入项目根目录，然后运行npm run serve启动项目<br />
<img src="https://img-blog.csdnimg.cn/20200721183404972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200721183438341.png" alt="在这里插入图片描述" /><br />
最后复制地址在浏览器打开即可<br />
<img src="https://img-blog.csdnimg.cn/2020072118351666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200721183537248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<strong>2.图形化界面创建</strong></p>
</li>
<li>
<p>第一步，输入vue ui<img src="https://img-blog.csdnimg.cn/2020072119484944.png" alt="在这里插入图片描述" /></p>
</li>
<li>
<p>点击创建，在此创建新项目<img src="https://img-blog.csdnimg.cn/20200721195206714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
6.填写文件名字和初始化git仓库<img src="https://img-blog.csdnimg.cn/20200721195344552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
7.选择手动，或者自动，或者以前创建过得模板，这里选择手动（第一次）<img src="https://img-blog.csdnimg.cn/20200721195526321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
8.选择以下四个<br />
<img src="https://img-blog.csdnimg.cn/20200721195618558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200721195635692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
9.select下选择第三个，之后点击创建项目<img src="https://img-blog.csdnimg.cn/20200721195802507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
10 然后输入名称（）创建项目，保存预设或者不保存都可以<img src="https://img-blog.csdnimg.cn/20200721200001659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
11 然后运行即可<img src="https://img-blog.csdnimg.cn/20200721200146546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>对于maven中pom.xml依赖报红问题</title>
    <url>/2020/08/12/%E5%AF%B9%E4%BA%8Emaven%E4%B8%ADpom.xml%E4%BE%9D%E8%B5%96%E6%8A%A5%E7%BA%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="对于maven中pomxml依赖报红问题"><a class="markdownIt-Anchor" href="#对于maven中pomxml依赖报红问题"></a> 对于maven中pom.xml依赖报红问题</h2>
<a id="more"></a>
<p>在写maven项目的时候，导入的依赖报红问题解决办法，像下图标注位置是红色，依赖包也无法正常导入解决</p>
<p><img src="https://img-blog.csdnimg.cn/20200718212821319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p>1.按下图操作</p>
<p><img src="https://img-blog.csdnimg.cn/20200718213254585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
<img src="https://img-blog.csdnimg.cn/20200718213339727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p><img src="https://img-blog.csdnimg.cn/20200718213425194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
刷新之后等一下就可以了</p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
  </entry>
  <entry>
    <title>vscode设置在模板字符串中自动补全代码</title>
    <url>/2020/08/12/vscode%E8%AE%BE%E7%BD%AE%E5%9C%A8%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="在学习vue中的template时html代码具有自动闭合标签的功能经过查阅各种资料如下设置"><a class="markdownIt-Anchor" href="#在学习vue中的template时html代码具有自动闭合标签的功能经过查阅各种资料如下设置"></a> 在学习vue中的template时，html代码具有自动闭合标签的功能，经过查阅各种资料，如下设置。</h2>
<a id="more"></a>
<!-- more -->
<p>1.打开vscode编辑器&gt;文件&gt;首选项&gt;设置<br />
2.搜索栏搜索settings.json，选择在settings.json中编辑<br />
<img src="https://img-blog.csdnimg.cn/20200712172251198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
3.在文件配置处加入以下代码</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;emmet.showAbbreviationSuggestions&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;emmet.showExpandedAbbreviation&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">    <span class="string">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>示例：<br />
<img src="https://img-blog.csdnimg.cn/20200712172519270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY5MzcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />
设置完保存退出即可</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
  </entry>
</search>
